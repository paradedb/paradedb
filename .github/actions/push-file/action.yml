name: Commit and Push File
description: Checks out the specified remote repository, stages the provided file, commits it if there are changes, and pushes to the given branch.

inputs:
  repository:
    description: "Remote repository in owner/name format."
    required: true
  branch:
    description: "Branch to check out and push to."
    required: false
    default: "main"
  repo-path:
    description: "Local path to check out the repo into."
    required: false
    default: "push-file-temp"
  file-name:
    description: "File path (relative to repo) to add and commit."
    required: true
  commit-message:
    description: "Commit message to use."
    required: true
  push-token:
    description: "GitHub token (PAT or GITHUB_TOKEN) with permission to push to the target repository."
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        # Use the provided token if supplied; otherwise fall back to the caller's GITHUB_TOKEN
        token: ${{ inputs.push-token || github.token }}
        ref: ${{ inputs.branch }}
        path: ${{ inputs.repo-path }}
        # persist-credentials defaults to true; keep it so 'git push' works with the token
        persist-credentials: true
        # fetch-depth can be 0 if you might commit on non-default branches or need tags
        fetch-depth: 0

    - name: Configure Git user
      shell: bash
      working-directory: "${{ inputs.repo-path }}"
      run: |
        git config user.name "ParadeDB GitHub Actions"
        git config user.email "developers@paradedb.com"

    - name: Stage changes
      shell: bash
      working-directory: "${{ inputs.repo-path }}"
      run: |
        # If the file is generated outside of the repo, copy it in; otherwise remove this cp.
        cp "../${{ inputs.file-name }}" "./${{ inputs.file-name }}" 2>/dev/null || true
        mkdir -p "$(dirname "${{ inputs.file-name }}")"
        git add "${{ inputs.file-name }}"

    - name: Commit changes if needed
      shell: bash
      id: commit
      working-directory: "${{ inputs.repo-path }}"
      run: |
        if git diff --cached --quiet; then
          echo "no_changes=true" >> "$GITHUB_OUTPUT"
        else
          git commit -m "${{ inputs.commit-message }}"
          echo "no_changes=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Push changes
      if: steps.commit.outputs.no_changes == 'false'
      shell: bash
      working-directory: "${{ inputs.repo-path }}"
      run: |
        # Using the persisted HTTPS token credentials set by actions/checkout
        git push origin HEAD:${{ inputs.branch }}

    - name: Cleanup
      shell: bash
      run: rm -rf "${{ inputs.repo-path }}"
