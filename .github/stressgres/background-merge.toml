[[server]]
name = "Primary"
[server.style.Automatic]

[server.setup]
sql = """
DROP EXTENSION IF EXISTS pg_search CASCADE;
DROP TABLE IF EXISTS test CASCADE;
CREATE EXTENSION pg_search;
CREATE TABLE test (
    id SERIAL8 NOT NULL PRIMARY KEY,
    message TEXT
);
INSERT INTO test (message) VALUES ('beer wine cheese a');
INSERT INTO test (message) VALUES ('beer wine a');
INSERT INTO test (message) VALUES ('beer cheese a');
INSERT INTO test (message) VALUES ('beer a');
INSERT INTO test (message) VALUES ('wine cheese a');
INSERT INTO test (message) VALUES ('wine a');
INSERT INTO test (message) VALUES ('cheese a');
INSERT INTO test (message) VALUES ('beer wine cheese a');
INSERT INTO test (message) VALUES ('beer wine a');
INSERT INTO test (message) VALUES ('beer cheese a');
INSERT INTO test (message) VALUES ('beer a');
INSERT INTO test (message) VALUES ('wine cheese a');
INSERT INTO test (message) VALUES ('wine a');
INSERT INTO test (message) VALUES ('cheese a');
CREATE INDEX idxtest ON test USING bm25(id, message) WITH (key_field = 'id', layer_sizes = '5kb, 100kb, 1mb, 100mb', background_layer_size_threshold = '100kb');
CREATE OR REPLACE FUNCTION assert(a bigint, b bigint) RETURNS bool LANGUAGE plpgsql AS $$
DECLARE
    current_txid bigint;
BEGIN
    -- Get the current transaction ID
    current_txid := txid_current();
    -- Check if the values are not equal
    IF a <> b THEN
        RAISE EXCEPTION 'Assertion failed: % <> %. Transaction ID: %', a, b, current_txid;
    END IF;
    RETURN true;
END;
$$;
"""

[server.teardown]
sql = """
DROP TABLE test CASCADE;
DROP EXTENSION pg_search CASCADE;
"""
[server.monitor]
refresh_ms = 10
title = "Monitor Segment Count"
log_columns = ["num_segments"]

# Combined query returning both columns
sql = """
SELECT COUNT(*) as num_segments FROM paradedb.index_info('idxtest');
"""

[[jobs]]
refresh_ms = 100
title = "Index Scan"
log_tps = true
on_connect = """
SET enable_indexonlyscan to OFF;
"""
sql = """
SELECT assert(count(*)::bigint, 8::bigint), count(*) FROM test where id @@@ 'message:cheese';
"""

[[jobs]]
refresh_ms = 5
title = "Custom Scan"
log_tps = true
on_connect = """
SET enable_indexonlyscan to OFF;
SET enable_indexscan to OFF;
"""
sql = """
SELECT assert(count(*)::bigint, 8::bigint), count(*) FROM test where id @@@ 'message:beer';
"""

[[jobs]]
refresh_ms = 5
title = "Index Only Scan"
log_tps = true
sql = """
SELECT assert(count(*)::bigint, 8::bigint), count(*) FROM test where id @@@ 'message:wine';
"""

[[jobs]]
refresh_ms = 5
title = "Update random values"
log_tps = true
sql = """
UPDATE test
SET message = substring(message FROM 1 FOR length(message)-1)
              || chr((trunc(random() * 26) + 65)::int)
WHERE id < 10;
"""

[[jobs]]
refresh_ms = 5
title = "Update random values"
log_tps = true
sql = """
UPDATE test
SET message = substring(message FROM 1 FOR length(message)-1)
              || chr((trunc(random() * 26) + 65)::int)
WHERE id > 10 AND id < 20;
"""

[[jobs]]
refresh_ms = 5
title = "Update random values"
log_tps = true
sql = """
UPDATE test
SET message = substring(message FROM 1 FOR length(message)-1)
              || chr((trunc(random() * 26) + 65)::int)
WHERE id > 20 and id < 30;
"""

[[jobs]]
refresh_ms = 5
title = "Insert value"
log_tps = true
sql = """
INSERT INTO test (message) VALUES ('lore ispum dolor');
"""

[[jobs]]
refresh_ms = 5
title = "Insert value"
log_tps = true
sql = """
INSERT INTO test (message) VALUES ('the cat in the hat');
"""

[[jobs]]
refresh_ms = 5
title = "Insert value"
log_tps = true
sql = """
INSERT INTO test (message) VALUES ('test text');
"""

[[jobs]]
refresh_ms = 5
title = "Delete value"
log_tps = true
sql = """
DELETE FROM test WHERE id > 100;
"""

[[jobs]]
refresh_ms = 10000
title = "Vacuum"
log_tps = true
sql = """
VACUUM test;
"""
