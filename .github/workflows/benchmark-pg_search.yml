# workflows/benchmark-pg_search.yml
#
# Benchmark pg_search
# Benchmark pg_search performance on a nightly basis. This workflow can also be triggered
# manually to benchmark other systems on one-off basis, to compare against pg_search.

name: Benchmark pg_search

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - dev
    paths:
      - "**/*.rs"
      - "**/*.toml"
  workflow_dispatch:

concurrency:
  group: benchmark-pg_search-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  benchmark-pg_search:
    name: Benchmark pg_search
    strategy:
      matrix:
        runner: [ubicloud-standard-8]
        pg_version: [17]
        num_rows: [100000000]
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install & Configure Supported PostgreSQL Version
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update && sudo apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }}
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/ /usr/lib/postgresql/${{ matrix.pg_version }}/ /var/lib/postgresql/${{ matrix.pg_version }}/
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Extract pgrx Version
        id: pgrx
        working-directory: pg_search/
        run: |
          version=$(cargo tree --depth 1 -i pgrx -p pg_search | head -n 1 | sed -E 's/.*v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          key: ${{ matrix.pg_version }}-${{ steps.pgrx.outputs.version }}
          cache-targets: true
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/dev' }}

      - name: Install pgrx & pg_search
        working-directory: pg_search/
        run: |
          cargo install -j $(nproc) --locked cargo-pgrx --version ${{ steps.pgrx.outputs.version }} --debug
          cargo pgrx init --pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config
          cargo pgrx install --pg-config="/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config" --release

      - name: Configure PostgreSQL settings
        working-directory: /home/runner/.pgrx/data-${{ matrix.pg_version }}/
        run: |
          sed -i "s/^#shared_preload_libraries = .*/shared_preload_libraries = 'pg_search'/" postgresql.conf
          sed -i "s/^#maintenance_work_mem = .*/maintenance_work_mem = '12GB'/" postgresql.conf
          sed -i "s/^shared_buffers = .*/shared_buffers = '12GB'/" postgresql.conf
          sed -i "s/^#max_parallel_workers = .*/max_parallel_workers = 8/" postgresql.conf
          sed -i "s/^#max_worker_processes = .*/max_worker_processes = 8/" postgresql.conf
          sed -i "s/^#max_parallel_workers_per_gather = .*/max_parallel_workers_per_gather = 8/" postgresql.conf

      - name: Restart Postgres
        working-directory: pg_search/
        run: |
          cargo pgrx stop pg${{ matrix.pg_version }}
          cargo pgrx start pg${{ matrix.pg_version }}

      - name: Generate Benchmark Data
        working-directory: benchmarks/
        run: psql postgresql://localhost:288${{ matrix.pg_version }}/postgres -f create-table.sql -v num_rows=${{ matrix.num_rows }}

      - name: Index Benchmark Data
        working-directory: benchmarks/
        run: ./index.sh postgresql://localhost:288${{ matrix.pg_version }}/postgres

      - name: Run Benchmark
        working-directory: benchmarks/
        run: ./benchmark.sh postgresql://localhost:288${{ matrix.pg_version }}/postgres

      - name: Get PostgreSQL Settings
        id: get_settings
        run: |
          maintenance_work_mem=$(psql postgresql://localhost:288${{ matrix.pg_version }}/postgres -t -c "SHOW maintenance_work_mem;" | tr -d ' ')
          shared_buffers=$(psql postgresql://localhost:288${{ matrix.pg_version }}/postgres -t -c "SHOW shared_buffers;" | tr -d ' ')
          max_parallel_workers=$(psql postgresql://localhost:288${{ matrix.pg_version }}/postgres -t -c "SHOW max_parallel_workers;" | tr -d ' ')
          max_worker_processes=$(psql postgresql://localhost:288${{ matrix.pg_version }}/postgres -t -c "SHOW max_worker_processes;" | tr -d ' ')
          max_parallel_workers_per_gather=$(psql postgresql://localhost:288${{ matrix.pg_version }}/postgres -t -c "SHOW max_parallel_workers_per_gather;" | tr -d ' ')

          echo "maintenance_work_mem=$maintenance_work_mem" >> $GITHUB_OUTPUT
          echo "shared_buffers=$shared_buffers" >> $GITHUB_OUTPUT
          echo "max_parallel_workers=$max_parallel_workers" >> $GITHUB_OUTPUT
          echo "max_worker_processes=$max_worker_processes" >> $GITHUB_OUTPUT
          echo "max_parallel_workers_per_gather=$max_parallel_workers_per_gather" >> $GITHUB_OUTPUT

      - name: Create PR Comment
        working-directory: benchmarks/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT="## pg_search Benchmark Results

          ### Test Info
          | Property | Value |
          |----------|-------|
          | Instance Type | ${{ matrix.runner }} |
          | Estimated Row Count | ${{ matrix.num_rows }} |

          ### PostgreSQL Settings
          | Setting | Value |
          |---------|-------|
          | maintenance_work_mem | ${{ steps.get_settings.outputs.maintenance_work_mem }} |
          | shared_buffers | ${{ steps.get_settings.outputs.shared_buffers }} |
          | max_parallel_workers | ${{ steps.get_settings.outputs.max_parallel_workers }} |
          | max_worker_processes | ${{ steps.get_settings.outputs.max_worker_processes }} |
          | max_parallel_workers_per_gather | ${{ steps.get_settings.outputs.max_parallel_workers_per_gather }} |
          "

          BENCHMARK_RESULTS=$(cat benchmark.md)
          INDEX_RESULTS=$(cat index.md)

          COMMENT="$COMMENT

          ### Index Results
          $INDEX_RESULTS

          ### Query Performance
          $BENCHMARK_RESULTS"

          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT"

      - name: Send Slack Notification
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          SLACK_MESSAGE="New pg_search benchmark results available on dev branch. View the PR: $PR_URL"

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$SLACK_MESSAGE\"}" \
            $SLACK_WEBHOOK_URL
