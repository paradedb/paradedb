# workflows/publish-github-release.yml
#
# Publish GitHub Release
# Publish a ParadeDB GitHub Release, which triggers the entire release process. This workflow
# is always triggered manually via the GitHub Actions UI and deploys the branch that it is being run from.

name: Publish GitHub Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release, in semver format (e.g. 0.15.0). This must match the version in Cargo.toml."
        type: string
        required: true
        default: ""
      beta:
        description: "Whether this release is a beta release. Defaults to false."
        type: boolean
        required: false
        default: false
      confirmation:
        description: "I confirm that the version was incremented, the SQL upgrade script was written, and the docs and changelog were updated. Defaults to false."
        type: boolean
        required: true
        default: false

concurrency:
  group: publish-github-release-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-github-release:
    name: Publish ParadeDB GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: Confirm the Pre-Release Checklist Was Completed
        run: |
          echo "Confirmation: ${{ github.event.inputs.confirmation }}"
          if [[ "${{ github.event.inputs.confirmation }}" == "true" ]]; then
            echo "Thank you for confirming that the version was incremented, the SQL upgrade script was written, and the docs and changelog were updated."
          else
            echo "Confirmation failed! Please confirm that the version was incremented, the SQL upgrade script was written, and the docs and changelog were updated."
            exit 1
          fi

      - name: Checkout Git Repository
        uses: actions/checkout@v4

      # We confirm that if the release type is beta, the version in Cargo.toml matches with `-rc.X`, and that the
      # version provided matches the version in Cargo.toml. If the user forgot to increment the version, they will
      # need to do it in a PR, which will trigger the workflow test_pg_search-upgrade.yml, ensuring that the upgrade is tested.
      - name: Validate Cargo.toml Version Matches Release Type
        run: |
          echo "Checking for existing release..."
          if gh release view v${{ github.event.inputs.version }} > /dev/null 2>&1; then
            echo "Release v${{ github.event.inputs.version }} already exists. All releases must be unique."
            exit 1
          fi
          echo "Release check passed!"

          if [[ "${{ github.event.inputs.beta }}" == "true" ]]; then
            echo "Validating that the version in Cargo.toml contains `-rc.X`..."
            if [[ "${{ github.event.inputs.version }}" != *"-rc."* ]]; then
              echo "Version (${{ github.event.inputs.version }}) does not contain `-rc.X` but is marked as a beta release."
              exit 1
            fi
          else
            echo "Validating that the version in Cargo.toml does not contain `-rc.X`..."
            if [[ "${{ github.event.inputs.version }}" == *"-rc."* ]]; then
              echo "Version (${{ github.event.inputs.version }}) contains `-rc.X` but is not marked as a beta release."
              exit 1
            fi
          fi

          CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | awk -F '"' '{print $2}')
          echo "Validating that the version in Cargo.toml matches the upcoming version..."
          if [[ "${{ github.event.inputs.version }}" != "$CARGO_VERSION" ]]; then
            echo "Version in top-level Cargo.toml ($CARGO_VERSION) does not match upcoming version (${{ github.event.inputs.version }})."
            exit 1
          fi
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "Validating that the version is a minor release on the main branch..."
            if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.0(-rc\.[0-9]+)?$ ]]; then
              echo "On releases of the 'main' branch, releases must be minor (patch = 0)."
              echo "Provided version '${{ github.event.inputs.version }}' is not a minor release."
              exit 1
            fi
          fi
          echo "Version check passed!"

      - name: Determine if Release Should be Marked as Latest
        id: release_latest
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
        run: |
          # Get the upcoming and current latest release tag (without the "v")
          current="${{ github.event.inputs.version }}"
          latest_tag=$(gh release list --jq '.[] | select(.isLatest == true) | .name' --json=name,isLatest | sed 's/^v//')
          echo "Current latest release is $latest_tag"
          echo "Current version to be released is $current"

          # Install semver CLI and compare versions according to semVer rules
          npm install semver
          if npx semver -r ">$latest_tag" "$current"; then
            echo "is_latest=true" >> $GITHUB_OUTPUT
          else
            echo "is_latest=false" >> $GITHUB_OUTPUT
          fi

      # The tag_name will have `-rc.X` suffix and be marked as a prerelease for beta releases,
      # and no suffix and marked as a full release for prod releases
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          target_commitish: ${{ github.ref_name }} # Deploy the branch that this workflow is being run from
          prerelease: ${{ github.event.inputs.beta }} # Whether this release is a beta release
          make_latest: ${{ steps.release_latest.outputs.is_latest }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
