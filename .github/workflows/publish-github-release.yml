# workflows/publish-github-release.yml
#
# Publish GitHub Release
# Publish a ParadeDB GitHub Release, which triggers the entire release process. This workflow
# is always triggered manually via the GitHub Actions UI.

name: Publish GitHub Release

on:
  workflow_dispatch:
    inputs:
      beta:
        type: boolean
        description: Whether to publish a beta release. Default is `true`.
        default: true

concurrency:
  group: publish-github-release-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-github-release:
    name: Publish ParadeDB GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      # We store the GitHub Release version number in GitHub Actions Variables. Since it's
      # not possible for a GHA variable to be negative, we store the version of the next
      # release, to allow 0-indexing. This is why we immediately release the version stored,
      # and increment it after the GitHub release is created.
      - name: Retrieve & Increment Release Version Number
        id: version
        run: |
          if [[ ${{ inputs.beta }} == "false" ]]; then
            echo 'Using prod configuration...'
            CURRENT_RELEASE_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}"

            # Increment GHA variable version by 0.0.1 for next release
            GHA_VAR_NAME="VERSION_PATCH"
            GHA_VAR_VALUE="$(( ${{ vars.VERSION_PATCH }} + 1 ))"
          else
            echo 'Using staging configuration...'
            CURRENT_RELEASE_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}-rc.${{ vars.VERSION_RC }}"

            # Increment GHA variable version by -rc.1 for next release
            GHA_VAR_NAME="VERSION_RC"
            GHA_VAR_VALUE="$(( ${{ vars.VERSION_RC }} + 1 ))"
          fi

          # Output the current release version to create the GitHub Release tag, and the new version to update GitHub Actions variable
          echo "version=${CURRENT_RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "gha_var_name=${GHA_VAR_NAME}" >> $GITHUB_OUTPUT
          echo "gha_var_value=${GHA_VAR_VALUE}" >> $GITHUB_OUTPUT

      - name: Update Version Number in GitHub Actions Variables
        env:
          GH_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
        run: |
          # On prod releases we update patch and reset the RC version to 1
          if [[ ${{ inputs.beta }} == "false" ]]; then
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/paradedb/paradedb/actions/variables/${{ steps.version.outputs.gha_var_name }} \
              -f name='${{ steps.version.outputs.gha_var_name }}' \
              -f value='${{ steps.version.outputs.gha_var_value }}'

            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/paradedb/paradedb/actions/variables/VERSION_RC \
              -f name='VERSION_RC' \
              -f value='1'
          # On beta releases we only update the RC version
          else
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/paradedb/paradedb/actions/variables/${{ steps.version.outputs.gha_var_name }} \
              -f name='${{ steps.version.outputs.gha_var_name }}' \
              -f value='${{ steps.version.outputs.gha_var_value }}'
          fi

      # The tag_name will have `-rc.X` suffix and be marked as a prerelease for staging releases,
      # and no suffix and marked as a full release for prod releases
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          target_commitish: "main"
          generate_release_notes: true
          prerelease: ${{ inputs.beta }}
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
