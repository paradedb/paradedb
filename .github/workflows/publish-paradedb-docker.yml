# workflows/publish-paradedb-docker.yml
#
# Publish ParadeDB (Docker)
# Publish ParadeDB as a Docker image to Docker Hub and as a Helm Chart to paradedb.github.io via our
# `paradedb/charts` repository. This workflow only runs after a GitHub Release gets created, which
# happens once we merge to `main`.

name: Publish ParadeDB (Docker)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "The version to set for the ParadeDB release. This publishes the latest commit of the chosen branch and tags it with the provided version."
        required: true
        default: ""

concurrency:
  group: publish-paradedb-docker-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

# Used by actions/attest-build-provenance to sign the builds
permissions:
  id-token: write
  attestations: write

jobs:
  publish-paradedb-docker-image:
    name: Publish ParadeDB Docker Image for PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [13, 14, 15, 16, 17]
    env:
      default_pg_version: 17

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Retrieve GitHub Release Version
        id: version
        run: |
          # If no workflow_dispatch version is provided, we use workflow tag trigger version
          if [ -z "${{ github.event.inputs.version }}" ]; then
            if [[ $GITHUB_REF == refs/tags/v* ]]; then
              VERSION=${GITHUB_REF#refs/tags/v}
              TAG=${GITHUB_REF#refs/tags/}
            else
              # If there is no tag and no provided version, it's a test run and we set a default version
              VERSION="0.0.0"
              TAG="v0.0.0"
            fi
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "GitHub Tag Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # Cross-compilation is incredibly slow, so we use an external service called Depot to
      # speed up container builds for universal images. We could eventually replace this with
      # Docker Build Cloud once they add support for multiple concurrent builders.
      - name: Configure Depot CLI
        uses: depot/setup-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # The pg_version-tag Docker tag syntax is necessary for our CloudNativePG Helm chart
      - name: Setup Docker Image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: paradedb/paradedb
          tags: |
            type=raw,value=${{ matrix.pg_version }}-${{ steps.version.outputs.tag }}
            type=raw,value=${{ steps.version.outputs.tag }}-pg${{ matrix.pg_version }}
            type=raw,value=${{ steps.version.outputs.version }}-pg${{ matrix.pg_version }}
            type=raw,value=latest-pg${{ matrix.pg_version }}
            type=raw,value=latest,enable=${{ matrix.pg_version == env.default_pg_version }}
            type=raw,value=${{ steps.version.outputs.tag }},enable=${{ matrix.pg_version == env.default_pg_version }}
            type=raw,value=${{ steps.version.outputs.version }},enable=${{ matrix.pg_version == env.default_pg_version }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # We don't need to use secret mounts for the build-args here because
      # the PostHog secrets are public-facing and don't need to be kept secret.
      - name: Build and Push Docker Image to Docker Hub
        id: build-push
        uses: depot/build-push-action@v1
        with:
          context: .
          build-args: |
            PG_VERSION_MAJOR=${{ matrix.pg_version }}
            POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY }}
            POSTHOG_HOST=${{ secrets.POSTHOG_HOST }}
            COMMIT_SHA=${{ steps.version.outputs.commit_sha }}
            PARADEDB_VERSION=${{ steps.version.outputs.version }}
            PARADEDB_TELEMETRY=true
          platforms: linux/amd64,linux/arm64
          file: docker/Dockerfile
          push: true
          sbom: true
          provenance: mode=max
          project: ${{ secrets.DEPOT_PROJECT }}
          token: ${{ secrets.DEPOT_TOKEN }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Sign and Attest Build Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/paradedb/paradedb
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true

  publish-paradedb-helm-chart:
    name: Publish ParadeDB Helm Chart for PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [17]

    steps:
      - name: Retrieve GitHub Release Version
        id: version
        run: |
          # If no workflow_dispatch version is provided, we use workflow tag trigger version
          if [ -z "${{ github.event.inputs.version }}" ]; then
            if [[ $GITHUB_REF == refs/tags/v* ]]; then
              VERSION=${GITHUB_REF#refs/tags/v}
            else
              # If there is no tag and no provided version, it's a test run and we set a default version
              VERSION="0.0.0"
            fi
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "GitHub Tag Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Trigger paradedb/charts Release Workflow
        uses: multinarity/workflow-dispatch@master
        with:
          token: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
          workflow: paradedb-publish-chart.yml
          repo: paradedb/charts
          ref: main
          inputs: '{ "appVersion": "${{ steps.version.outputs.version }}" }'
