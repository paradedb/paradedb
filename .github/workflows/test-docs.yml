# workflows/test-docs.yml
#
# Test Docs
# Test our documentation for broken links via Mintlify.

name: Test Docs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - 0.*.x # Release branches
    paths:
      - ".github/workflows/test-docs.yml"
      - "docs/**"
  workflow_dispatch:

concurrency:
  group: test-docs-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-docs:
    name: Test Docs for Broken Links & SEO Issues
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v5

      - name: Install Mintlify CLI
        run: npm install -g mintlify

      - name: Test Docs for Broken Links
        working-directory: docs/
        run: |
          output=$(mintlify broken-links)
          if [[ "$output" == *"success no broken links found"* ]]; then
            echo "No broken links found."
          else
            echo "Broken links found:"
            echo "$output"
            exit 1
          fi

      # Check that:
      # - There are no underscores in URLs
      # - Each .mdx file has a title, description, and canonical URL
      # - Each canonical URL matches the file path
      - name: Test for SEO Issues
        working-directory: docs/
        run: |
          echo "Running SEO validation..."

          echo ""
          echo "Checking for underscores in URLs..."
          files=$(find . -type f -name "*_*" ! -path "./images/*" ! -path "./logo/*")
          if [ -n "$files" ]; then
            echo "‚ùå Found files with underscores:"
            echo "$files" | sed 's/^/  - /'
            exit 1
          else
            echo "‚úÖ No filenames with underscores (excluding /images/ and /logo/)."
          fi

          echo ""
          echo "Checking that each file has title, description, and canonical URL..."
          missing_meta=0
          for file in $(find . -name "*.mdx" ! -path "./documentation/*" ! -path "./changelog/*" ! -path "./welcome/support); do
            title=$(grep -E "^title:" "$file" || true)
            desc=$(grep -E "^description:" "$file" || true)
            canonical=$(grep -E "^canonical:" "$file" || true)

            if [ -z "$title" ] || [ -z "$desc" ] || [ -z "$canonical" ]; then
              echo "‚ùå Missing metadata in $file"
              missing_meta=1
              continue
            fi

            # Build expected canonical: https://docs.paradedb.com/<relative path without .mdx>
            relative_path=$(echo "$file" | sed 's|^\./||; s|\.mdx$||; s|^docs/||')
            expected_canonical="https://docs.paradedb.com/${relative_path}"

            # Extract canonical from file (strip 'canonical:' and whitespace)
            found_canonical=$(echo "$canonical" | sed 's/^canonical:[[:space:]]*//')

            if [ "$found_canonical" != "$expected_canonical" ]; then
              echo "‚ùå Canonical URL mismatch in $file"
              echo "   Expected: $expected_canonical"
              echo "   Found:    $found_canonical"
              missing_meta=1
            fi
          done

          if [ "$missing_meta" -eq 1 ]; then
            exit 1
          else
            echo "‚úÖ All files have proper metadata and canonical URLs."
          fi

          echo "üéâ All SEO checks passed!"
