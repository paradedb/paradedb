# workflows/test-docs.yml
#
# Test Docs
# Test our documentation for broken links via Mintlify.

name: Test Docs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - 0.*.x # Release branches
    paths:
      - ".github/workflows/test-docs.yml"
      - "docs/**"
  workflow_dispatch:

concurrency:
  group: test-docs-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-docs:
    name: Test Docs for Broken Links & SEO Issues
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v5

      - name: Install Mintlify CLI
        run: npm install -g mintlify

      - name: Test Docs for Broken Links
        working-directory: docs/
        run: |
          output=$(mintlify broken-links)
          if [[ "$output" == *"success no broken links found"* ]]; then
            echo "No broken links found."
          else
            echo "Broken links found:"
            echo "$output"
            exit 1
          fi

      # Check that:
      # - There are no underscores in URLs
      # - There are no missing alt texts for images
      # - Each .mdx file has a title, description, and canonical URL
      # - Each canonical URL matches the file path
      - name: Test for SEO Issues
        working-directory: docs/
        run: |
          echo "Running SEO validation..."

          echo "Checking for underscores in URLs..."
          if grep -R "_[A-Za-z0-9]" ./**/*.mdx --include \*.mdx; then
            echo "‚ùå Found underscores in URLs."
            exit 1
          else
            echo "‚úÖ No underscores in URLs."
          fi

          echo "Checking for missing alt texts in images..."
          if grep -R '!\[\s*\]\(.*\)' ./**/*.mdx --include \*.mdx --exclude-dir=node_modules; then
            echo "‚ùå Found images missing alt text."
            exit 1
          else
            echo "‚úÖ All images have alt text."
          fi

          echo "Checking that each file has title, description, and canonical URL..."
          missing_meta=0
          for file in $(find . -name "*.mdx"); do
            title=$(grep -E "^title:" "$file" || true)
            desc=$(grep -E "^description:" "$file" || true)
            canonical=$(grep -E "^canonical:" "$file" || true)

            if [ -z "$title" ] || [ -z "$desc" ] || [ -z "$canonical" ]; then
              echo "‚ùå Missing metadata in $file"
              missing_meta=1
              continue
            fi

            # Ensure canonical matches file path (assuming /docs/foo/bar.mdx ‚Üí canonical: /foo/bar)
            relative_path=$(echo "$file" | sed 's|^\./||; s|\.mdx$||; s|^docs/||')
            canonical_path=$(echo "$canonical" | sed 's/^canonical:[[:space:]]*//; s|/||')
            expected_path=$(echo "$relative_path" | sed 's|^/||')

            if [ "$canonical_path" != "$expected_path" ]; then
              echo "‚ùå Canonical URL mismatch in $file"
              echo "   Expected: /$expected_path"
              echo "   Found: /$canonical_path"
              missing_meta=1
            fi
          done

          if [ "$missing_meta" -eq 1 ]; then
            exit 1
          else
            echo "‚úÖ All files have proper metadata and canonical URLs."
          fi

          echo "üéâ All SEO checks passed!"
