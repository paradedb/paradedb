# workflows/test-pg_search-docker.yml
#
# Test pg_search Docker
# Test building the ParadeDB Docker Image using Docker Compose.

name: Test pg_search Docker

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - staging
      - dev
    paths:
      - ".github/workflows/test-pg_search-docker.yml"
      - "docker/**"
      - "pg_search/**"
      - "tokenizers/**"
  workflow_dispatch:

concurrency:
  group: test-pg_search-docker-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-paradedb:
    name: Test ParadeDB Docker Image
    runs-on: ubicloud-standard-8
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      # Only login to Docker Hub on PRs to `main` or `staging` since this is only used
      # for comparing upcoming release Docker images via Docker Scout.
      - name: Login to Docker Hub
        if: github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'staging'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Build the ParadeDB Docker Image via Docker Compose
        working-directory: docker/
        run: docker compose -f docker-compose.dev.yml build

      # On PRs to `dev`, we start the ParadeDB Docker image using Docker Compose to test the
      # compose file. The docker-compose.yml file will use the local ParadeDB image that we
      # just built since we tagged it with `latest` in docker-compose.dev.yml.
      - name: Start the ParadeDB Docker Image via Docker Compose (dev only)
        if: github.event.pull_request.base.ref == 'dev'
        working-directory: docker/
        run: docker compose -f docker-compose.yml up -d && sleep 10

      # On PRs to `main` or `staging`, we start the ParadeDB Docker image using `docker run` to test the
      # standalone Docker image. We add a --tmpfs mount as a test of compatibility with the
      # upstream `postgres` image. The `docker run` command will use the local ParadeDB image
      # that we just built since we tagged it with `latest` in docker-compose.dev.yml.
      - name: Start the ParadeDB Docker Image via Docker Run (main only)
        if: github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'staging'
        working-directory: docker/
        run: |
          docker run -d \
            --name paradedb \
            -e POSTGRES_USER=myuser \
            -e POSTGRES_PASSWORD=mypassword \
            -e POSTGRES_DB=mydatabase \
            -p 5432:5432 \
            --tmpfs /tmp \
            paradedb/paradedb:latest

      # We run the container in detached mode, and grep for the word ERROR to see if it failed to start correctly
      - name: Check for Errors in the ParadeDB Docker Image
        working-directory: docker/
        run: |
          CONTAINER_ID=$(docker ps -aq --filter "name=paradedb")
          CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' $CONTAINER_ID)
          echo "paradedb container ID: $CONTAINER_ID"
          echo "Container status: $CONTAINER_STATUS"

          echo ""
          echo "Printing logs for the ParadeDB Docker container..."
          docker logs $CONTAINER_ID

          # Fail the run if the container failed to start
          if [ "$CONTAINER_STATUS" = "exited" ]; then
            echo "Error: Container failed to start properly"
            exit 1
          fi

          # Fail the run if there are any Postgres ERRORs in the logs
          if docker logs $CONTAINER_ID | grep -q ERROR; then
            echo "Error: ParadeDB Docker container logs contain an error"
            exit 1
          fi

      # On PRs to `main` or `staging`, we compare the Docker image built from the PR to the last official
      # ParadeDB Docker image in Docker Hub to check for security regressions.
      - name: Compare the ParadeDB Docker Image to the ParadeDB Docker Image in Docker Hub via Docker Scout
        if: github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'staging'
        uses: docker/scout-action@v1
        with:
          command: compare
          image: paradedb/paradedb:latest # Local ParadeDB Docker Image
          to-env: production # Docker Hub ParadeDB Docker Image
          organization: paradedb
          ignore-unchanged: true
          only-severities: critical,high
          github-token: ${{ secrets.GITHUB_TOKEN }}
