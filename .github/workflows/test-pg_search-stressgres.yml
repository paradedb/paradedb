# workflows/test-pg_search-stressgres.yml
#
# Test pg_search Stressgres
# Run the Stressgres stress testing against pg_search.

name: Test pg_search Stressgres

on:
  pull_request:
    branches: # On the `staging` and `main` branches, we run Stressgres in PRs to test thoroughly
      - main
      - staging
  push:
    branches: # On the `dev` branch, we run Stressgres post pushes to speed up CI
      - dev
    paths:
      - ".github/stressgres/**"
      - ".github/workflows/test-pg_search-stressgres.yml"
      - "**/*.rs"
      - "**/*.toml"
  workflow_dispatch:

# - New commits to a feature branch PR cancel previous runs.
# - Pushes to `dev` get grouped under "dev".
# - Pushes to `staging` get grouped under "staging".
# - A PR from `dev` to `main` uses the same key as pushes to `dev`, avoiding duplicate runs when doing a promotion.
concurrency:
  group: test-pg_search-stressgres-${{ (github.event_name == 'push' && github.ref == 'refs/heads/dev' || github.event.pull_request.head.ref == 'dev') && 'dev' || (github.event_name == 'push' && github.ref == 'refs/heads/staging' || github.event.pull_request.head.ref == 'staging') && 'staging' || github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  test-pg_search-stressgres:
    name: Run Stressgres ${{ matrix.test_file }} on pg_search with PostgreSQL ${{ matrix.pg_version }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    if: ${{ !cancelled() && github.event.pull_request.draft == false }}
    strategy:
      matrix:
        include:
          - runner: ubicloud-standard-8
            pg_version: 17
            arch: amd64
            test_file: single-server.toml
          - runner: ubicloud-standard-8
            pg_version: 17
            arch: amd64
            test_file: bulk-updates.toml
    env:
      default_pg_version: 17

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          path: paradedb

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Extract pgrx Version
        id: pgrx
        working-directory: paradedb/pg_search/
        run: |
          version=$(cargo tree --depth 1 -i pgrx -p pg_search | head -n 1 | sed -E 's/.*v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      # Caches from base branches are available to PRs, but not across unrelated branches, so we only
      # save the cache on the 'dev' branch, but load it on all branches.
      - name: Install Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          key: ${{ matrix.pg_version }}-${{ steps.pgrx.outputs.version }}
          cache-targets: true
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/dev' }}

      - name: Install required system tools
        run: sudo apt-get update && sudo apt-get install -y lsof

      - name: Install llvm-tools-preview
        run: rustup component add llvm-tools-preview

      - name: Install & Configure Supported PostgreSQL Version
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update && sudo apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }}
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Install cargo-pgrx
        run: cargo install -j $(nproc) --locked cargo-pgrx --version ${{ steps.pgrx.outputs.version }} --debug

      - name: Initialize cargo-pgrx environment
        run: cargo pgrx init --pg${{ matrix.pg_version }}=`which pg_config`

      - name: Checkout Stressgres Repo
        uses: actions/checkout@v4
        with:
          repository: paradedb/stressgres
          path: stressgres
          token: ${{ secrets.GHA_CREATE_RELEASE_PAT }}

      - name: Compile & install pg_search extension
        working-directory: paradedb/pg_search/
        run: cargo pgrx install --sudo --release --pg-config `which pg_config` --features=pg${{ matrix.pg_version }},icu --no-default-features

      - name: Run Stressgres Test Suite for 10 minutes
        working-directory: stressgres/
        run: |
          sudo chmod a+rwx /var/run/postgresql/ && \
          cargo run --release -- headless \
          /home/runner/work/paradedb/paradedb/paradedb/.github/stressgres/${{ matrix.test_file }} \
          --log-file stressgres-${{ matrix.test_file }}.log \
          --runtime 600000

      - name: Create Stressgres Graph
        working-directory: stressgres/
        run: cargo run --release -- graph stressgres-${{ matrix.test_file }}.log stressgres-${{ matrix.test_file }}.png

      - name: Upload Stressgres Graph
        id: artifact-graph
        uses: actions/upload-artifact@v4
        with:
          name: stressgres-graph-${{ matrix.test_file }}
          path: stressgres/stressgres-${{ matrix.test_file }}.png

      - name: Upload Stressgres Logs
        id: artifact-logs
        uses: actions/upload-artifact@v4
        with:
          name: stressgres-logs-${{ matrix.test_file }}
          path: stressgres/stressgres-${{ matrix.test_file }}.log

      - name: Derive Short Commit
        id: commit_info
        run: |
          short_commit=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "short_commit=$short_commit" >> $GITHUB_OUTPUT

      - name: Upload Stressgres Graphs to Slack
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: files.uploadV2
          token: ${{ secrets.SLACK_OAUTH_TOKEN }}
          payload: |
            channel_id: ${{ secrets.SLACK_BENCHMARKS_CHANNEL_ID }}
            initial_comment: |
              *Community Stressgres Results (${{ matrix.test_file }})*
              <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ steps.commit_info.outputs.short_commit }}> | <${{ steps.artifact-logs.outputs.artifact-url }} | Download Logs>
            file: "stressgres/stressgres-${{ matrix.test_file }}.png"
            filename: "stressgres-${{ matrix.test_file }}.png"
            request_file_info: true
          errors: true
          payload-templated: false
          retries: 5

      - name: Print Postgres Logs
        run: |
          for f in `ls /tmp/stressgres/*.log`; do
            echo $f
            cat $f
          done

      - name: Notify Slack on Failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_GITHUB_CHANNEL_WEBHOOK_URL }}
        run: |
          GITHUB_RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          ARTIFACT_URL="${{ steps.artifact-logs.outputs.artifact-url }}"
          MESSAGE="<!here> \`test-pg_search-stressgres\` workflow (${{ matrix.test_file }}) failed in \`paradedb/paradedb\` -- investigate immediately! GitHub Action Logs: ${GITHUB_RUN_URL} | Stressgres Log: ${ARTIFACT_URL}"
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\": \"${MESSAGE}\"}" \
          ${SLACK_WEBHOOK_URL}
