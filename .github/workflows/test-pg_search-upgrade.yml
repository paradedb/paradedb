# workflows/test-pg_search-upgrade.yml
#
# Test pg_search Upgrade
# Test that the pg_search extension can upgrade via ALTER EXTENSION.

name: Test pg_search Upgrade

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - 0.*.x
    paths:
      - ".github/workflows/test-pg_search-upgrade.yml"
      - "pg_search/**"
      - "tests/**"
      - "tokenizers/**"
  workflow_dispatch:

# This is the first pg_search version that has a rust-toolchain.toml file which allows us to use a version of rust known
# to compile pg_search.
env:
  PRIOR_PG_SEARCH_VERSION: "v0.16.1"

concurrency:
  group: test-pg_search-upgrade-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-pg_search-upgrade:
    name: Test upgrading pg_search via ALTER EXTENSION
    runs-on: ubicloud-standard-8
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        pg_version: [17]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch the entire history

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Extract pgrx Version
        id: pgrx
        working-directory: pg_search/
        run: |
          version=$(cargo tree --depth 1 -i pgrx -p pg_search | head -n 1 | sed -E 's/.*v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: "rust-cache"
          shared-key: pg${{ matrix.pg_version }}-${{ hashFiles('**/Cargo.lock') }}
          cache-targets: true
          cache-all-crates: true

      - name: Install required system tools
        run: sudo apt-get update && sudo apt-get install -y lsof

      - name: Install & Configure Supported PostgreSQL Version
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update && sudo apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }}
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      # Needed for hybrid search unit tests
      - name: Install pgvector
        run: |
          git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
          cd pgvector/
          sudo PG_CONFIG=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config make -j
          sudo PG_CONFIG=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config make install -j

      - name: Install llvm-tools-preview
        run: rustup component add llvm-tools-preview

      # This is the pgrx version compatible with ParadeDB $PRIOR_PG_SEARCH_VERSION
      - name: Install cargo-pgrx for ParadeDB $PRIOR_PG_SEARCH_VERSION
        run: cargo install -j $(nproc) --locked cargo-pgrx --version 0.15.0 --debug

      - name: Initialize cargo-pgrx environment for ParadeDB $PRIOR_PG_SEARCH_VERSION
        run: cargo pgrx init "--pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"

      # While technically backwards-compatible since 0.15.0, our Lindera dependency made a backwards-incompatible
      # change by deleting its previous repository URL and forcing dependencies to upgrade, which forces us to test
      # our upgrade compatibility from 0.15.19 onwards
      #
      # And to complicate matters, v0.15.19 stopped being able to compile on modern rust, so now we just use $PRIOR_PG_SEARCH_VERSION
      - name: Checkout ParadeDB $PRIOR_PG_SEARCH_VERSION
        run: git checkout $PRIOR_PG_SEARCH_VERSION

      - name: Compile & install pg_search $PRIOR_PG_SEARCH_VERSION
        working-directory: pg_search/
        run: cargo pgrx install --sudo --features icu --pg-config="/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"

      - name: Start Postgres via cargo-pgrx
        working-directory: pg_search/
        run: |
          RUST_BACKTRACE=1 cargo pgrx start pg${{ matrix.pg_version }}
          # Necessary for the ephemeral Postgres test to have proper permissions
          sudo chown -R $(whoami) /var/run/postgresql/

      - name: Create pg_search Extension
        working-directory: pg_search/
        run: psql -h localhost -p 288${{ matrix.pg_version }} postgres -c 'CREATE EXTENSION pg_search;'

      # We create and test the BM25 index before and after the upgrade to test for version compatibility
      - name: Create and Test BM25 Index
        working-directory: pg_search/
        run: |
          psql -h localhost -p 288${{ matrix.pg_version }} postgres -c "CALL paradedb.create_bm25_test_table(schema_name => 'public', table_name => 'mock_items');"
          psql -h localhost -p 288${{ matrix.pg_version }} postgres -c "SELECT description, rating, category FROM mock_items LIMIT 3;"
          psql -h localhost -p 288${{ matrix.pg_version }} postgres -c "CREATE INDEX search_idx ON mock_items USING bm25 (id, description, category, rating, in_stock, created_at, metadata, weight_range) WITH (key_field='id');"
          psql -h localhost -p 288${{ matrix.pg_version }} postgres -c "SELECT description, rating, category FROM mock_items WHERE description @@@ 'shoes' OR category @@@ 'footwear' AND rating @@@ '>2' ORDER BY description LIMIT 5;"

      - name: Stop Postgres via cargo-pgrx
        working-directory: pg_search/
        run: RUST_BACKTRACE=1 cargo pgrx stop pg${{ matrix.pg_version }}

      - name: Install the cargo-pgrx version for ParadeDB
        run: cargo install -j $(nproc) --locked cargo-pgrx --version ${{ steps.pgrx.outputs.version }} --debug

      - name: Initialize cargo-pgrx environment for ParadeDB
        run: cargo pgrx init "--pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"

      - name: Fetch and Checkout PR Head
        run: |
          git fetch origin +refs/pull/${{ github.event.pull_request.number }}/head:${{ github.event.pull_request.head.ref }}
          git checkout ${{ github.event.pull_request.head.ref }}

      - name: Compile & install pg_search
        working-directory: pg_search/
        run: cargo pgrx install --sudo --features icu --pg-config="/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"

      - name: Start Postgres via cargo-pgrx
        working-directory: pg_search/
        run: |
          RUST_BACKTRACE=1 cargo pgrx start pg${{ matrix.pg_version }}
          # Necessary for the ephemeral Postgres test to have proper permissions
          sudo chown -R $(whoami) /var/run/postgresql/

      - name: Alter pg_search extension to the latest version
        working-directory: pg_search/
        run: |
          VERSION=$(grep "^version" ../Cargo.toml | head -1 | awk -F '"' '{print $2}')
          psql -h localhost -p 288${{ matrix.pg_version }} postgres -c "ALTER EXTENSION pg_search UPDATE TO '$VERSION';"

      # We test the BM25 index before and after the upgrade to test for version compatibility
      - name: Test BM25 Index
        working-directory: pg_search/
        run: |
          psql -h localhost -p 288${{ matrix.pg_version }} postgres -c "CREATE OR REPLACE FUNCTION assert(a bigint, b bigint) RETURNS bool STABLE STRICT LANGUAGE plpgsql AS \$\$ BEGIN IF a <> b THEN RAISE EXCEPTION 'Assertion failed: % <> %', a, b; END IF; RETURN true; END; \$\$;"
          psql -h localhost -p 288${{ matrix.pg_version }} postgres -c "SELECT assert(count(*), 0) FROM paradedb.validate_checksum('search_idx');"

      # We only run the integration tests since pgrx won't run the #[pg_test] unit tests in an existing database
      - name: Run pg_search Integration Tests
        working-directory: tests/
        run: |
          export DATABASE_URL=postgresql://localhost:288${{ matrix.pg_version }}/postgres
          export PG_CONFIG=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config
          RUST_BACKTRACE=1 cargo test --jobs $(nproc) --features icu

      - name: Print the Postgres Logs
        if: always()
        run: cat ~/.pgrx/${{ matrix.pg_version}}.log
