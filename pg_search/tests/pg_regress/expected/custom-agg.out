-- Test custom agg function with paradedb.agg()
CREATE EXTENSION IF NOT EXISTS pg_search;
SET paradedb.enable_aggregate_custom_scan TO on;
DROP TABLE IF EXISTS logs CASCADE;
-- Setup test data
CREATE TABLE logs (
    id SERIAL PRIMARY KEY,
    description TEXT,
    severity TEXT,
    category TEXT,
    response_time INT,
    status_code INT,
    timestamp TIMESTAMP
);
INSERT INTO logs (description, severity, category, response_time, status_code, timestamp) VALUES
    ('Database connection error', 'error', 'database', 150, 500, '2024-01-01 10:00:00'),
    ('Failed to fetch data', 'error', 'api', 200, 404, '2024-01-01 10:01:00'),
    ('Timeout connecting to service', 'error', 'network', 5000, 503, '2024-01-01 10:02:00'),
    ('Invalid query syntax error', 'error', 'database', 50, 400, '2024-01-01 10:03:00');
CREATE INDEX logs_idx ON logs USING bm25 (id, description, severity, category, response_time, status_code, timestamp)
WITH (
    key_field = 'id',
    text_fields = '{"description": {}, "severity": {"fast": true}, "category": {"fast": true}}',
    numeric_fields = '{"response_time": {"fast": true}, "status_code": {"fast": true}}',
    datetime_fields = '{"timestamp": {"fast": true}}'
);
-- Test 1: Simple custom agg with terms aggregation (without search query - should fail gracefully or not be intercepted)
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT category, paradedb.agg('{"terms": {"field": "severity"}}'::jsonb)
FROM logs
WHERE description @@@ 'error'
GROUP BY category;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: category, paradedb.agg('{"terms": {"field": "severity"}}'::jsonb)
   Group Key: logs.category
   ->  Sort
         Output: category
         Sort Key: logs.category
         ->  Custom Scan (ParadeDB Scan) on public.logs
               Output: category
               Table: logs
               Index: logs_idx
               Exec Method: MixedFastFieldExecState
               Fast Fields: category
               Scores: false
               Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"error","lenient":null,"conjunction_mode":null}}}}
(14 rows)

SELECT category, paradedb.agg('{"terms": {"field": "severity"}}'::jsonb)
FROM logs
WHERE description @@@ 'error'
GROUP BY category;
ERROR:  paradedb.agg() placeholder function should not be executed.
-- Test 2: Custom agg in window function
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT *, paradedb.agg('{"avg": {"field": "response_time"}}'::jsonb) OVER ()
FROM logs
WHERE description @@@ 'error'
ORDER BY timestamp DESC LIMIT 10;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: id, description, severity, category, response_time, status_code, "timestamp", (paradedb.window_agg('{"agg_types":[{"Custom":{"agg_json":{"avg":{"field":"response_time"}},"filter":null,"indexrelid":0}}],"grouping_columns":[]}'::text))
   ->  Custom Scan (ParadeDB Scan) on public.logs
         Output: id, description, severity, category, response_time, status_code, "timestamp", paradedb.window_agg('{"agg_types":[{"Custom":{"agg_json":{"avg":{"field":"response_time"}},"filter":null,"indexrelid":0}}],"grouping_columns":[]}'::text)
         Table: logs
         Index: logs_idx
         Exec Method: TopNScanExecState
         Scores: false
            TopN Order By: timestamp desc
            TopN Limit: 10
         Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"error","lenient":null,"conjunction_mode":null}}}}
(11 rows)

SELECT *, paradedb.agg('{"avg": {"field": "response_time"}}'::jsonb) OVER ()
FROM logs
WHERE description @@@ 'error'
ORDER BY timestamp DESC LIMIT 10;
 id |        description         | severity | category | response_time | status_code |        timestamp         |       agg        
----+----------------------------+----------+----------+---------------+-------------+--------------------------+------------------
  4 | Invalid query syntax error | error    | database |            50 |         400 | Mon Jan 01 10:03:00 2024 | {"value": 100.0}
  1 | Database connection error  | error    | database |           150 |         500 | Mon Jan 01 10:00:00 2024 | {"value": 100.0}
(2 rows)

-- Test 3: Mix custom and standard aggregates
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT category, 
       COUNT(*),
       paradedb.agg('{"terms": {"field": "severity"}}'::jsonb)
FROM logs
WHERE description @@@ 'error'
GROUP BY category;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: category, count(*), paradedb.agg('{"terms": {"field": "severity"}}'::jsonb)
   Group Key: logs.category
   ->  Sort
         Output: category
         Sort Key: logs.category
         ->  Custom Scan (ParadeDB Scan) on public.logs
               Output: category
               Table: logs
               Index: logs_idx
               Exec Method: MixedFastFieldExecState
               Fast Fields: category
               Scores: false
               Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"error","lenient":null,"conjunction_mode":null}}}}
(14 rows)

SELECT category, 
       COUNT(*),
       paradedb.agg('{"terms": {"field": "severity"}}'::jsonb)
FROM logs
WHERE description @@@ 'error'
GROUP BY category;
ERROR:  paradedb.agg() placeholder function should not be executed.
-- Test 4: Custom agg with FILTER (extracted at planning time)
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT paradedb.agg('{"avg": {"field": "response_time"}}'::jsonb) 
       FILTER (WHERE status_code >= 500)
FROM logs
WHERE description @@@ 'error';
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: paradedb.agg('{"avg": {"field": "response_time"}}'::jsonb) FILTER (WHERE (status_code >= 500))
   ->  Custom Scan (ParadeDB Scan) on public.logs
         Output: status_code
         Table: logs
         Index: logs_idx
         Exec Method: MixedFastFieldExecState
         Fast Fields: status_code
         Scores: false
         Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"error","lenient":null,"conjunction_mode":null}}}}
(10 rows)

SELECT paradedb.agg('{"avg": {"field": "response_time"}}'::jsonb) 
       FILTER (WHERE status_code >= 500)
FROM logs
WHERE description @@@ 'error';
ERROR:  paradedb.agg() placeholder function should not be executed.
-- Test 5: Custom agg with FILTER and OVER (window function)
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT *, paradedb.agg('{"terms": {"field": "category"}}'::jsonb) 
       FILTER (WHERE status_code >= 500) OVER ()
FROM logs
WHERE description @@@ 'error'
ORDER BY timestamp DESC LIMIT 10;
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: id, description, severity, category, response_time, status_code, "timestamp", (paradedb.agg('{"terms": {"field": "category"}}'::jsonb) FILTER (WHERE (status_code >= 500)) OVER (?))
   ->  Sort
         Output: id, description, severity, category, response_time, status_code, "timestamp", (paradedb.agg('{"terms": {"field": "category"}}'::jsonb) FILTER (WHERE (status_code >= 500)) OVER (?))
         Sort Key: logs."timestamp" DESC
         ->  WindowAgg
               Output: id, description, severity, category, response_time, status_code, "timestamp", paradedb.agg('{"terms": {"field": "category"}}'::jsonb) FILTER (WHERE (status_code >= 500)) OVER (?)
               ->  Custom Scan (ParadeDB Scan) on public.logs
                     Output: id, description, severity, category, response_time, status_code, "timestamp"
                     Table: logs
                     Index: logs_idx
                     Exec Method: NormalScanExecState
                     Scores: false
                     Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"error","lenient":null,"conjunction_mode":null}}}}
(14 rows)

SELECT *, paradedb.agg('{"terms": {"field": "category"}}'::jsonb) 
       FILTER (WHERE status_code >= 500) OVER ()
FROM logs
WHERE description @@@ 'error'
ORDER BY timestamp DESC LIMIT 10;
ERROR:  paradedb.agg() placeholder function should not be executed.
-- Test 6: EXPLAIN query to show custom agg is recognized
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT category, 
       COUNT(*),
       paradedb.agg('{"max": {"field": "response_time"}}'::jsonb)
FROM logs
WHERE description @@@ 'error'
GROUP BY category;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: category, count(*), paradedb.agg('{"max": {"field": "response_time"}}'::jsonb)
   Group Key: logs.category
   ->  Sort
         Output: category
         Sort Key: logs.category
         ->  Custom Scan (ParadeDB Scan) on public.logs
               Output: category
               Table: logs
               Index: logs_idx
               Exec Method: MixedFastFieldExecState
               Fast Fields: category
               Scores: false
               Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"error","lenient":null,"conjunction_mode":null}}}}
(14 rows)

SELECT category, 
       COUNT(*),
       paradedb.agg('{"max": {"field": "response_time"}}'::jsonb)
FROM logs
WHERE description @@@ 'error'
GROUP BY category;
ERROR:  paradedb.agg() placeholder function should not be executed.
-- Cleanup
DROP TABLE logs CASCADE;
