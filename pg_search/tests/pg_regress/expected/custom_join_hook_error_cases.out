-- Test error cases and edge conditions for custom join hook
-- This test verifies proper error handling and edge case behavior
-- Create the extension first
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Enable the custom join feature
SET paradedb.enable_custom_join = true;
-- Test 1: Empty tables
CREATE TABLE empty_docs (
    id SERIAL PRIMARY KEY,
    title TEXT,
    content TEXT
);
CREATE TABLE empty_files (
    id SERIAL PRIMARY KEY,
    document_id INTEGER,
    filename TEXT,
    content TEXT
);
-- Create BM25 indexes on empty tables
CREATE INDEX empty_docs_idx ON empty_docs USING bm25 (
    id,
    title,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
CREATE INDEX empty_files_idx ON empty_files USING bm25 (
    id,
    document_id,
    filename,
    content
) WITH (
    key_field = 'id',
    numeric_fields = '{"document_id": {"fast": true}}',
    text_fields = '{"filename": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
-- Test join on empty tables
SELECT d.id, d.title, f.filename
FROM empty_docs d
JOIN empty_files f ON d.id = f.document_id
WHERE d.content @@@ 'nonexistent' AND f.content @@@ 'missing';
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["empty_docs"], inner relids: ["empty_files"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation empty_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["empty_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation empty_files (rti 2)
WARNING:  ParadeDB: Checked relations ["empty_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation empty_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for empty_docs: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation empty_files (rti 2)
WARNING:  ParadeDB: Extracted search query for empty_files: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for empty_docs - uses_search: true
WARNING:  ParadeDB: Inner predicate for empty_files - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["empty_docs"], inner: ["empty_files"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["empty_docs"], inner: ["empty_files"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["empty_files"], inner relids: ["empty_docs"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation empty_files (rti 2)
WARNING:  ParadeDB: Checked relations ["empty_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation empty_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["empty_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation empty_files (rti 2)
WARNING:  ParadeDB: Extracted search query for empty_files: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation empty_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for empty_docs: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for empty_files - uses_search: true
WARNING:  ParadeDB: Inner predicate for empty_docs - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["empty_files"], inner: ["empty_docs"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["empty_files"], inner: ["empty_docs"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: ========== PLANNING STAGE START ==========
WARNING:  ParadeDB: plan_custom_path called - is_join = false
WARNING:  ParadeDB: No join search predicates found in private data
WARNING:  ParadeDB: ========== SCAN NODE PLANNING ==========
WARNING:  ParadeDB: Planning regular scan node
WARNING:  ParadeDB: Completed scan node planning
WARNING:  ParadeDB: ========== PLANNING STAGE COMPLETE ==========
WARNING:  ParadeDB: Input Target List: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: Custom Target List We're Setting: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: ==========================================
WARNING:  ParadeDB: ========== PLANNING STAGE START ==========
WARNING:  ParadeDB: plan_custom_path called - is_join = false
WARNING:  ParadeDB: No join search predicates found in private data
WARNING:  ParadeDB: ========== SCAN NODE PLANNING ==========
WARNING:  ParadeDB: Planning regular scan node
WARNING:  ParadeDB: Completed scan node planning
WARNING:  ParadeDB: ========== PLANNING STAGE COMPLETE ==========
WARNING:  ParadeDB: Input Target List: ({TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 2 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: Custom Target List We're Setting: ({TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 2 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: ==========================================
 id | title | filename 
----+-------+----------
(0 rows)

-- Test 2: Tables with no matching search results
CREATE TABLE no_match_docs (
    id SERIAL PRIMARY KEY,
    title TEXT,
    content TEXT
);
CREATE TABLE no_match_files (
    id SERIAL PRIMARY KEY,
    document_id INTEGER,
    filename TEXT,
    content TEXT
);
INSERT INTO no_match_docs (title, content) VALUES 
    ('Doc 1', 'This document contains cats and dogs'),
    ('Doc 2', 'This document contains birds and fish');
INSERT INTO no_match_files (document_id, filename, content) VALUES 
    (1, 'file1.txt', 'File about animals and pets'),
    (2, 'file2.txt', 'File about wildlife and nature');
CREATE INDEX no_match_docs_idx ON no_match_docs USING bm25 (
    id,
    title,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
CREATE INDEX no_match_files_idx ON no_match_files USING bm25 (
    id,
    document_id,
    filename,
    content
) WITH (
    key_field = 'id',
    numeric_fields = '{"document_id": {"fast": true}}',
    text_fields = '{"filename": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
-- Test search with no matches
SELECT d.id, d.title, f.filename
FROM no_match_docs d
JOIN no_match_files f ON d.id = f.document_id
WHERE d.content @@@ 'robots' AND f.content @@@ 'spaceships';
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["no_match_docs"], inner relids: ["no_match_files"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation no_match_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["no_match_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation no_match_files (rti 2)
WARNING:  ParadeDB: Checked relations ["no_match_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation no_match_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for no_match_docs: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation no_match_files (rti 2)
WARNING:  ParadeDB: Extracted search query for no_match_files: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for no_match_docs - uses_search: true
WARNING:  ParadeDB: Inner predicate for no_match_files - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["no_match_docs"], inner: ["no_match_files"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["no_match_docs"], inner: ["no_match_files"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["no_match_files"], inner relids: ["no_match_docs"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation no_match_files (rti 2)
WARNING:  ParadeDB: Checked relations ["no_match_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation no_match_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["no_match_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation no_match_files (rti 2)
WARNING:  ParadeDB: Extracted search query for no_match_files: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation no_match_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for no_match_docs: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for no_match_files - uses_search: true
WARNING:  ParadeDB: Inner predicate for no_match_docs - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["no_match_files"], inner: ["no_match_docs"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["no_match_files"], inner: ["no_match_docs"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: ========== PLANNING STAGE START ==========
WARNING:  ParadeDB: plan_custom_path called - is_join = true
WARNING:  ParadeDB: Found join search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: ========== JOIN NODE PLANNING ==========
WARNING:  ParadeDB: Planning custom join path with scanrelid = 0
WARNING:  ParadeDB: Using PostgreSQL's provided target list with 3 entries, processed_tlist has 3 entries
WARNING:  ParadeDB: Found 2 relevant RTIs for score functions: {2, 1}
WARNING:  ParadeDB: No score functions detected - using PostgreSQL's standard target list handling for joins
WARNING:  ParadeDB: ========== JOIN PLANNING COMPLETE ==========
WARNING:  ParadeDB: ========== PLANNING STAGE COMPLETE ==========
WARNING:  ParadeDB: Input Target List: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: Custom Target List We're Setting: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: ==========================================
ERROR:  variable not found in subplan target list
-- Test 3: Mismatched join keys (no join matches)
CREATE TABLE mismatch_docs (
    id SERIAL PRIMARY KEY,
    title TEXT,
    content TEXT
);
CREATE TABLE mismatch_files (
    id SERIAL PRIMARY KEY,
    document_id INTEGER,
    filename TEXT,
    content TEXT
);
INSERT INTO mismatch_docs (title, content) VALUES 
    ('Doc 1', 'Technology document'),
    ('Doc 2', 'Science document');
INSERT INTO mismatch_files (document_id, filename, content) VALUES 
    (99, 'file1.txt', 'Technology file'),
    (100, 'file2.txt', 'Science file');
CREATE INDEX mismatch_docs_idx ON mismatch_docs USING bm25 (
    id,
    title,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
CREATE INDEX mismatch_files_idx ON mismatch_files USING bm25 (
    id,
    document_id,
    filename,
    content
) WITH (
    key_field = 'id',
    numeric_fields = '{"document_id": {"fast": true}}',
    text_fields = '{"filename": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
-- Test join with mismatched keys
SELECT d.id, d.title, f.filename
FROM mismatch_docs d
JOIN mismatch_files f ON d.id = f.document_id
WHERE d.content @@@ 'technology' AND f.content @@@ 'file';
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["mismatch_docs"], inner relids: ["mismatch_files"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation mismatch_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["mismatch_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation mismatch_files (rti 2)
WARNING:  ParadeDB: Checked relations ["mismatch_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation mismatch_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for mismatch_docs: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation mismatch_files (rti 2)
WARNING:  ParadeDB: Extracted search query for mismatch_files: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for mismatch_docs - uses_search: true
WARNING:  ParadeDB: Inner predicate for mismatch_files - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["mismatch_docs"], inner: ["mismatch_files"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["mismatch_docs"], inner: ["mismatch_files"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["mismatch_files"], inner relids: ["mismatch_docs"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation mismatch_files (rti 2)
WARNING:  ParadeDB: Checked relations ["mismatch_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation mismatch_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["mismatch_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation mismatch_files (rti 2)
WARNING:  ParadeDB: Extracted search query for mismatch_files: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation mismatch_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for mismatch_docs: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for mismatch_files - uses_search: true
WARNING:  ParadeDB: Inner predicate for mismatch_docs - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["mismatch_files"], inner: ["mismatch_docs"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["mismatch_files"], inner: ["mismatch_docs"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: ========== PLANNING STAGE START ==========
WARNING:  ParadeDB: plan_custom_path called - is_join = true
WARNING:  ParadeDB: Found join search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: ========== JOIN NODE PLANNING ==========
WARNING:  ParadeDB: Planning custom join path with scanrelid = 0
WARNING:  ParadeDB: Using PostgreSQL's provided target list with 3 entries, processed_tlist has 3 entries
WARNING:  ParadeDB: Found 2 relevant RTIs for score functions: {2, 1}
WARNING:  ParadeDB: No score functions detected - using PostgreSQL's standard target list handling for joins
WARNING:  ParadeDB: ========== JOIN PLANNING COMPLETE ==========
WARNING:  ParadeDB: ========== PLANNING STAGE COMPLETE ==========
WARNING:  ParadeDB: Input Target List: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: Custom Target List We're Setting: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: ==========================================
ERROR:  variable not found in subplan target list
-- Test 4: Large result sets (stress test)
CREATE TABLE large_docs (
    id SERIAL PRIMARY KEY,
    title TEXT,
    content TEXT
);
CREATE TABLE large_files (
    id SERIAL PRIMARY KEY,
    document_id INTEGER,
    filename TEXT,
    content TEXT
);
-- Insert many rows to test performance
INSERT INTO large_docs (title, content) 
SELECT 
    'Document ' || i,
    'This is document number ' || i || ' with technology content'
FROM generate_series(1, 100) i;
INSERT INTO large_files (document_id, filename, content)
SELECT 
    (i % 100) + 1,
    'file' || i || '.txt',
    'This is file number ' || i || ' with technology content'
FROM generate_series(1, 500) i;
CREATE INDEX large_docs_idx ON large_docs USING bm25 (
    id,
    title,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
CREATE INDEX large_files_idx ON large_files USING bm25 (
    id,
    document_id,
    filename,
    content
) WITH (
    key_field = 'id',
    numeric_fields = '{"document_id": {"fast": true}}',
    text_fields = '{"filename": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
-- Test large result set with LIMIT
SELECT d.id, d.title, f.filename
FROM large_docs d
JOIN large_files f ON d.id = f.document_id
WHERE d.content @@@ 'technology' AND f.content @@@ 'technology'
LIMIT 10;
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["large_docs"], inner relids: ["large_files"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation large_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["large_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation large_files (rti 2)
WARNING:  ParadeDB: Checked relations ["large_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation large_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for large_docs: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation large_files (rti 2)
WARNING:  ParadeDB: Extracted search query for large_files: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for large_docs - uses_search: true
WARNING:  ParadeDB: Inner predicate for large_files - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["large_docs"], inner: ["large_files"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["large_docs"], inner: ["large_files"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 2500, startup_cost: 50.00, total_cost: 62.50
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["large_files"], inner relids: ["large_docs"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation large_files (rti 2)
WARNING:  ParadeDB: Checked relations ["large_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation large_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["large_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation large_files (rti 2)
WARNING:  ParadeDB: Extracted search query for large_files: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation large_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for large_docs: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for large_files - uses_search: true
WARNING:  ParadeDB: Inner predicate for large_docs - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["large_files"], inner: ["large_docs"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["large_files"], inner: ["large_docs"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 2500, startup_cost: 50.00, total_cost: 62.50
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: ========== PLANNING STAGE START ==========
WARNING:  ParadeDB: plan_custom_path called - is_join = true
WARNING:  ParadeDB: Found join search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: ========== JOIN NODE PLANNING ==========
WARNING:  ParadeDB: Planning custom join path with scanrelid = 0
WARNING:  ParadeDB: Using PostgreSQL's provided target list with 3 entries, processed_tlist has 3 entries
WARNING:  ParadeDB: Found 2 relevant RTIs for score functions: {2, 1}
WARNING:  ParadeDB: No score functions detected - using PostgreSQL's standard target list handling for joins
WARNING:  ParadeDB: ========== JOIN PLANNING COMPLETE ==========
WARNING:  ParadeDB: ========== PLANNING STAGE COMPLETE ==========
WARNING:  ParadeDB: Input Target List: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: Custom Target List We're Setting: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: ==========================================
ERROR:  variable not found in subplan target list
-- Test 5: Complex search queries
CREATE TABLE complex_docs (
    id SERIAL PRIMARY KEY,
    title TEXT,
    content TEXT
);
CREATE TABLE complex_files (
    id SERIAL PRIMARY KEY,
    document_id INTEGER,
    filename TEXT,
    content TEXT
);
INSERT INTO complex_docs (title, content) VALUES 
    ('Advanced Technology', 'This document discusses advanced technology and artificial intelligence'),
    ('Basic Science', 'This document covers basic science and research methods'),
    ('Data Analysis', 'This document explains data analysis and machine learning');
INSERT INTO complex_files (document_id, filename, content) VALUES 
    (1, 'tech.txt', 'Advanced technology file with AI content'),
    (2, 'science.txt', 'Basic science file with research data'),
    (3, 'data.txt', 'Data analysis file with ML algorithms');
CREATE INDEX complex_docs_idx ON complex_docs USING bm25 (
    id,
    title,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
CREATE INDEX complex_files_idx ON complex_files USING bm25 (
    id,
    document_id,
    filename,
    content
) WITH (
    key_field = 'id',
    numeric_fields = '{"document_id": {"fast": true}}',
    text_fields = '{"filename": {"tokenizer": {"type": "default"}}, "content": {"tokenizer": {"type": "default"}}}'
);
-- Test complex boolean queries
SELECT d.id, d.title, f.filename
FROM complex_docs d
JOIN complex_files f ON d.id = f.document_id
WHERE d.content @@@ 'technology AND artificial' AND f.content @@@ 'AI OR algorithms';
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["complex_docs"], inner relids: ["complex_files"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation complex_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["complex_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation complex_files (rti 2)
WARNING:  ParadeDB: Checked relations ["complex_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation complex_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for complex_docs: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation complex_files (rti 2)
WARNING:  ParadeDB: Extracted search query for complex_files: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for complex_docs - uses_search: true
WARNING:  ParadeDB: Inner predicate for complex_files - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["complex_docs"], inner: ["complex_files"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["complex_docs"], inner: ["complex_files"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["complex_files"], inner relids: ["complex_docs"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation complex_files (rti 2)
WARNING:  ParadeDB: Checked relations ["complex_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation complex_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["complex_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation complex_files (rti 2)
WARNING:  ParadeDB: Extracted search query for complex_files: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation complex_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for complex_docs: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for complex_files - uses_search: true
WARNING:  ParadeDB: Inner predicate for complex_docs - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["complex_files"], inner: ["complex_docs"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["complex_files"], inner: ["complex_docs"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: ========== PLANNING STAGE START ==========
WARNING:  ParadeDB: plan_custom_path called - is_join = true
WARNING:  ParadeDB: Found join search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: ========== JOIN NODE PLANNING ==========
WARNING:  ParadeDB: Planning custom join path with scanrelid = 0
WARNING:  ParadeDB: Using PostgreSQL's provided target list with 3 entries, processed_tlist has 3 entries
WARNING:  ParadeDB: Found 2 relevant RTIs for score functions: {2, 1}
WARNING:  ParadeDB: No score functions detected - using PostgreSQL's standard target list handling for joins
WARNING:  ParadeDB: ========== JOIN PLANNING COMPLETE ==========
WARNING:  ParadeDB: ========== PLANNING STAGE COMPLETE ==========
WARNING:  ParadeDB: Input Target List: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: Custom Target List We're Setting: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: ==========================================
ERROR:  variable not found in subplan target list
-- Test phrase queries
SELECT d.id, d.title, f.filename
FROM complex_docs d
JOIN complex_files f ON d.id = f.document_id
WHERE d.content @@@ '"data analysis"' AND f.content @@@ '"ML algorithms"';
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["complex_docs"], inner relids: ["complex_files"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation complex_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["complex_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation complex_files (rti 2)
WARNING:  ParadeDB: Checked relations ["complex_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation complex_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for complex_docs: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation complex_files (rti 2)
WARNING:  ParadeDB: Extracted search query for complex_files: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for complex_docs - uses_search: true
WARNING:  ParadeDB: Inner predicate for complex_files - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["complex_docs"], inner: ["complex_files"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["complex_docs"], inner: ["complex_files"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["complex_files"], inner relids: ["complex_docs"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation complex_files (rti 2)
WARNING:  ParadeDB: Checked relations ["complex_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation complex_docs (rti 1)
WARNING:  ParadeDB: Checked relations ["complex_docs"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation complex_files (rti 2)
WARNING:  ParadeDB: Extracted search query for complex_files: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation complex_docs (rti 1)
WARNING:  ParadeDB: Extracted search query for complex_docs: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for complex_files - uses_search: true
WARNING:  ParadeDB: Inner predicate for complex_docs - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["complex_files"], inner: ["complex_docs"]
WARNING:  ParadeDB: ========== STAGE 1: PATH CREATION STAGE ==========
WARNING:  ParadeDB: Creating custom join path for jointype: INNER, outer: ["complex_files"], inner: ["complex_docs"]
WARNING:  ParadeDB: ========== STAGE 2: PATH COST ESTIMATION ==========
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: ========== PLANNING STAGE START ==========
WARNING:  ParadeDB: plan_custom_path called - is_join = true
WARNING:  ParadeDB: Found join search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: ========== JOIN NODE PLANNING ==========
WARNING:  ParadeDB: Planning custom join path with scanrelid = 0
WARNING:  ParadeDB: Using PostgreSQL's provided target list with 3 entries, processed_tlist has 3 entries
WARNING:  ParadeDB: Found 2 relevant RTIs for score functions: {2, 1}
WARNING:  ParadeDB: No score functions detected - using PostgreSQL's standard target list handling for joins
WARNING:  ParadeDB: ========== JOIN PLANNING COMPLETE ==========
WARNING:  ParadeDB: ========== PLANNING STAGE COMPLETE ==========
WARNING:  ParadeDB: Input Target List: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: Custom Target List We're Setting: ({TARGETENTRY :expr {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 1 :location -1} :resno 1 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 2 :location -1} :resno 2 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false} {TARGETENTRY :expr {VAR :varno 2 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 2 :varattnosyn 3 :location -1} :resno 3 :resname <> :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false})
WARNING:  ParadeDB: ==========================================
ERROR:  variable not found in subplan target list
-- Cleanup
DROP TABLE empty_docs CASCADE;
DROP TABLE empty_files CASCADE;
DROP TABLE no_match_docs CASCADE;
DROP TABLE no_match_files CASCADE;
DROP TABLE mismatch_docs CASCADE;
DROP TABLE mismatch_files CASCADE;
DROP TABLE large_docs CASCADE;
DROP TABLE large_files CASCADE;
DROP TABLE complex_docs CASCADE;
DROP TABLE complex_files CASCADE;
RESET paradedb.enable_custom_join; 
