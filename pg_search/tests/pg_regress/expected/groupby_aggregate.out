-- Test GROUP BY functionality in aggregate custom scan
-- This file combines and consolidates tests from multiple GROUP BY test files
CREATE EXTENSION IF NOT EXISTS pg_search;
SET paradedb.enable_aggregate_custom_scan TO on;
-- ===========================================================================
-- SECTION 1: Basic GROUP BY Tests with Numeric Fields
-- ===========================================================================
DROP TABLE IF EXISTS products CASCADE;
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    description TEXT,
    rating INTEGER,
    category TEXT,
    price NUMERIC,
    in_stock BOOLEAN
);
INSERT INTO products (description, rating, category, price, in_stock) VALUES
    ('Laptop with fast processor', 5, 'Electronics', 999.99, true),
    ('Gaming laptop with RGB', 5, 'Electronics', 1299.99, true),
    ('Budget laptop for students', 3, 'Electronics', 499.99, false),
    ('Wireless keyboard and mouse', 4, 'Electronics', 79.99, true),
    ('Mechanical keyboard RGB', 5, 'Electronics', 149.99, true),
    ('Running shoes for athletes', 5, 'Sports', 89.99, true),
    ('Winter jacket warm', 4, 'Clothing', 129.99, true),
    ('Summer jacket light', 3, 'Clothing', 59.99, true);
CREATE INDEX products_idx ON products 
USING bm25 (id, description, rating, category, price)
WITH (
    key_field='id',
    text_fields='{"description": {}, "category": {"fast": true}}',
    numeric_fields='{"rating": {"fast": true}, "price": {"fast": true}}'
);
-- Test 1.1: Basic GROUP BY with integer field
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT rating, COUNT(*) AS count
FROM products 
WHERE description @@@ 'laptop' 
GROUP BY rating
ORDER BY rating;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ParadeDB Aggregate Scan) on public.products
   Output: rating, now()
   Index: products_idx
   Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"laptop","lenient":null,"conjunction_mode":null}}}}
   Aggregate Definition: {"group_0":{"terms":{"field":"rating"}}}
(5 rows)

SELECT rating, COUNT(*) AS count
FROM products 
WHERE description @@@ 'laptop' 
GROUP BY rating
ORDER BY rating;
WARNING:  Setting up tuple slot: natts=2, slot=0x7f9a5005e788
WARNING:  TupleDesc[0]: name=rating, typoid=23
WARNING:  TupleDesc[1]: name=count, typoid=20
WARNING:  ExecClearTuple completed
WARNING:  Slot state: tts_flags=18, tts_nvalid=0, tts_values=0x7f9a5005e7d0, tts_isnull=0x7f9a5005e7e0
WARNING:  Slot flags and nvalid set
WARNING:  Got datums and isnull slices
WARNING:  Converting aggregate value at index 0: Int(1)
WARNING:  Successfully converted aggregate value to datum
WARNING:  About to call ExecStoreVirtualTuple - checking final slot state
WARNING:  Final slot: flags=16, nvalid=2, natts=2
WARNING:  Datum[0]: value=Datum(0x3), isnull=false
WARNING:  Datum[1]: value=Datum(0x1), isnull=false
WARNING:  Calling ExecStoreVirtualTuple now...
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
