-- Test GROUP BY functionality in aggregate custom scan
-- This file combines and consolidates tests from multiple GROUP BY test files
CREATE EXTENSION IF NOT EXISTS pg_search;
SET paradedb.enable_aggregate_custom_scan TO on;
-- ===========================================================================
-- SECTION 1: Basic GROUP BY Tests with Numeric Fields
-- ===========================================================================
DROP TABLE IF EXISTS products CASCADE;
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    description TEXT,
    rating INTEGER,
    category TEXT,
    price NUMERIC,
    in_stock BOOLEAN
);
INSERT INTO products (description, rating, category, price, in_stock) VALUES
    ('Laptop with fast processor', 5, 'Electronics', 999.99, true),
    ('Gaming laptop with RGB', 5, 'Electronics', 1299.99, true),
    ('Budget laptop for students', 3, 'Electronics', 499.99, false),
    ('Wireless keyboard and mouse', 4, 'Electronics', 79.99, true),
    ('Mechanical keyboard RGB', 5, 'Electronics', 149.99, true),
    ('Running shoes for athletes', 5, 'Sports', 89.99, true),
    ('Winter jacket warm', 4, 'Clothing', 129.99, true),
    ('Summer jacket light', 3, 'Clothing', 59.99, true);
CREATE INDEX products_idx ON products 
USING bm25 (id, description, rating, category, price)
WITH (
    key_field='id',
    text_fields='{"description": {}, "category": {"fast": true}}',
    numeric_fields='{"rating": {"fast": true}, "price": {"fast": true}}'
);
-- Test 1.1: Basic GROUP BY with integer field
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT rating, COUNT(*) AS count
FROM products 
WHERE description @@@ 'laptop' 
GROUP BY rating
ORDER BY rating;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ParadeDB Aggregate Scan) on public.products
   Output: rating, now()
   Index: products_idx
   Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"laptop","lenient":null,"conjunction_mode":null}}}}
   Aggregate Definition: {"group_0":{"terms":{"field":"rating"}}}
(5 rows)

SELECT rating, COUNT(*) AS count
FROM products 
WHERE description @@@ 'laptop' 
GROUP BY rating
ORDER BY rating;
WARNING:  Processing aggregate at column 1 (agg_idx=0)
WARNING:  Aggregate value: Int(1)
WARNING:  Expected column type: 20 (count)
WARNING:  Converting Int(1) to BIGINT (typoid 20)
WARNING:  Converted to datum: Datum(0x1)
WARNING:  Column 1 set: datum=Datum(0x1), isnull=false
WARNING:  Processing aggregate at column 1 (agg_idx=0)
WARNING:  Aggregate value: Int(2)
WARNING:  Expected column type: 20 (count)
WARNING:  Converting Int(2) to BIGINT (typoid 20)
WARNING:  Converted to datum: Datum(0x2)
WARNING:  Column 1 set: datum=Datum(0x2), isnull=false
 rating | count 
--------+-------
      3 |     1
      5 |     2
(2 rows)

-- Test 1.2: GROUP BY with SUM aggregate
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT category, SUM(price) AS total_price
FROM products 
WHERE description @@@ 'laptop OR keyboard' 
GROUP BY category
ORDER BY category;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ParadeDB Aggregate Scan) on public.products
   Output: category, now()
   Index: products_idx
   Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"laptop OR keyboard","lenient":null,"conjunction_mode":null}}}}
   Aggregate Definition: {"group_0":{"terms":{"field":"category"},"aggs":{"agg_0":{"sum":{"field":"price"}}}}}
(5 rows)

SELECT category, SUM(price) AS total_price
FROM products 
WHERE description @@@ 'laptop OR keyboard' 
GROUP BY category
ORDER BY category;
WARNING:  Processing aggregate at column 1 (agg_idx=0)
WARNING:  Aggregate value: Float(3029.95)
WARNING:  Expected column type: 1700 (total_price)
WARNING:  Converting Float(3029.95) to datum
WARNING:  Converted to datum: Datum(0x40a7abe666666666)
WARNING:  Column 1 set: datum=Datum(0x40a7abe666666666), isnull=false
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
