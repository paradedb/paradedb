CREATE EXTENSION IF NOT EXISTS pg_search;
SET paradedb.enable_aggregate_custom_scan TO on;
SET paradedb.max_term_agg_buckets TO 10;
DROP TABLE IF EXISTS products CASCADE;
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    rating INTEGER
);
INSERT INTO products (rating)
SELECT rating
FROM generate_series(1, 100) rating, generate_series(1, rating);
INSERT INTO products (rating)
VALUES (null);
CREATE INDEX products_idx ON products
USING bm25 (id, rating)
WITH (key_field='id');
-- These should not be pushed down
-- No LIMIT
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY rating;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Custom Scan (ParadeDB Aggregate Scan) on products
   Index: products_idx
   Tantivy Query: {"with_index":{"query":"all"}}
   Aggregate Definition: {"group_0":{"terms":{"field":"rating","order":{"_key":"asc"},"size":10,"segment_size":10}}}
(4 rows)

-- Limit + offset exceeds max_term_agg_buckets
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY rating
LIMIT 5 OFFSET 6;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: rating
         ->  HashAggregate
               Group Key: rating
               ->  Custom Scan (ParadeDB Scan) on products
                     Table: products
                     Index: products_idx
                     Exec Method: MixedFastFieldExecState
                     Fast Fields: rating
                     Scores: false
                     Full Index Scan: true
                     Tantivy Query: {"with_index":{"query":"all"}}
(13 rows)

-- Ordering on a non grouping column
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating, id
ORDER BY rating, id
LIMIT 5 OFFSET 5;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: rating, id
         ->  HashAggregate
               Group Key: id
               ->  Custom Scan (ParadeDB Scan) on products
                     Table: products
                     Index: products_idx
                     Exec Method: MixedFastFieldExecState
                     Fast Fields: id, rating
                     Scores: false
                     Full Index Scan: true
                     Tantivy Query: {"with_index":{"query":"all"}}
(13 rows)

-- This should be pushed down
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY rating
LIMIT 5 OFFSET 5;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: rating, (now())
   ->  Custom Scan (ParadeDB Aggregate Scan) on public.products
         Output: rating, now()
         Index: products_idx
         Tantivy Query: {"with_index":{"query":"all"}}
         Aggregate Definition: {"group_0":{"terms":{"field":"rating","order":{"_key":"asc"},"size":10,"segment_size":10}}}
(7 rows)

SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY rating
LIMIT 5 OFFSET 5;
 rating | count 
--------+-------
      6 |     6
      7 |     7
      8 |     8
      9 |     9
     10 |    10
(5 rows)

-- Ordering on a non-grouping column
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY 2
LIMIT 5;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: (count(*))
         ->  HashAggregate
               Group Key: rating
               ->  Custom Scan (ParadeDB Scan) on products
                     Table: products
                     Index: products_idx
                     Exec Method: MixedFastFieldExecState
                     Fast Fields: rating
                     Scores: false
                     Full Index Scan: true
                     Tantivy Query: {"with_index":{"query":"all"}}
(13 rows)

SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY 2
LIMIT 5;
 rating | count 
--------+-------
      1 |     1
        |     1
      2 |     2
      3 |     3
      4 |     4
(5 rows)

-- Limit 0
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY rating
LIMIT 0;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: rating, (now())
   ->  Custom Scan (ParadeDB Aggregate Scan) on public.products
         Output: rating, now()
         Index: products_idx
         Tantivy Query: {"with_index":{"query":"all"}}
         Aggregate Definition: {"group_0":{"terms":{"field":"rating","order":{"_key":"asc"},"size":0,"segment_size":0}}}
(7 rows)

SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY rating
LIMIT 0;
 rating | count 
--------+-------
(0 rows)

-- High limit
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF, VERBOSE)
SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY rating
LIMIT 10000;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   Output: rating, (count(*))
   ->  Sort
         Output: rating, (count(*))
         Sort Key: products.rating
         ->  HashAggregate
               Output: rating, count(*)
               Group Key: products.rating
               ->  Custom Scan (ParadeDB Scan) on public.products
                     Output: rating
                     Table: products
                     Index: products_idx
                     Exec Method: MixedFastFieldExecState
                     Fast Fields: rating
                     Scores: false
                     Full Index Scan: true
                     Tantivy Query: {"with_index":{"query":"all"}}
(17 rows)

SELECT rating, COUNT(*) FROM products
WHERE id @@@ paradedb.all()
GROUP BY rating
ORDER BY rating
LIMIT 10000;
 rating | count 
--------+-------
      1 |     1
      2 |     2
      3 |     3
      4 |     4
      5 |     5
      6 |     6
      7 |     7
      8 |     8
      9 |     9
     10 |    10
     11 |    11
     12 |    12
     13 |    13
     14 |    14
     15 |    15
     16 |    16
     17 |    17
     18 |    18
     19 |    19
     20 |    20
     21 |    21
     22 |    22
     23 |    23
     24 |    24
     25 |    25
     26 |    26
     27 |    27
     28 |    28
     29 |    29
     30 |    30
     31 |    31
     32 |    32
     33 |    33
     34 |    34
     35 |    35
     36 |    36
     37 |    37
     38 |    38
     39 |    39
     40 |    40
     41 |    41
     42 |    42
     43 |    43
     44 |    44
     45 |    45
     46 |    46
     47 |    47
     48 |    48
     49 |    49
     50 |    50
     51 |    51
     52 |    52
     53 |    53
     54 |    54
     55 |    55
     56 |    56
     57 |    57
     58 |    58
     59 |    59
     60 |    60
     61 |    61
     62 |    62
     63 |    63
     64 |    64
     65 |    65
     66 |    66
     67 |    67
     68 |    68
     69 |    69
     70 |    70
     71 |    71
     72 |    72
     73 |    73
     74 |    74
     75 |    75
     76 |    76
     77 |    77
     78 |    78
     79 |    79
     80 |    80
     81 |    81
     82 |    82
     83 |    83
     84 |    84
     85 |    85
     86 |    86
     87 |    87
     88 |    88
     89 |    89
     90 |    90
     91 |    91
     92 |    92
     93 |    93
     94 |    94
     95 |    95
     96 |    96
     97 |    97
     98 |    98
     99 |    99
    100 |   100
        |     1
(101 rows)

