\i common/common_setup.sql
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
SET enable_indexscan to OFF;
SET paradedb.enable_mixed_fast_field_exec = true;
SET paradedb.enable_aggregate_custom_scan TO on;
CALL paradedb.create_bm25_test_table(
  schema_name => 'public',
  table_name => 'mock_items'
);
CREATE INDEX search_idx ON mock_items USING bm25 (id, description, rating, (category::pdb.literal), metadata) WITH (key_field='id');
CREATE TABLE allowed_categories (
    category TEXT PRIMARY KEY
);
INSERT INTO allowed_categories (category) VALUES
    ('Electronics'),
    ('Clothing');
EXPLAIN SELECT COUNT(*) FROM mock_items WHERE category @@@ paradedb.term_set(terms => ARRAY(SELECT paradedb.term('category', category) FROM allowed_categories LIMIT 5));
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ParadeDB Aggregate Scan) on mock_items  (cost=0.10..0.10 rows=0 width=8)
   Index: search_idx
   Tantivy Query: {}
     Applies to Aggregates: COUNT(*)
     Aggregate Definition: {"0":{"value_count":{"field":"ctid","missing":null}},"_doc_count":{"value_count":{"field":"ctid","missing":null}}}
   InitPlan 1
     ->  Limit  (cost=0.00..0.10 rows=5 width=32)
           ->  Seq Scan on allowed_categories  (cost=0.00..27.00 rows=1360 width=32)
(8 rows)

SELECT COUNT(*) FROM mock_items WHERE category @@@ paradedb.term_set(terms => ARRAY(SELECT paradedb.term('category', category) FROM allowed_categories LIMIT 5));
 count 
-------
     5
(1 row)

EXPLAIN SELECT
  COUNT(*) AS total,
  COUNT(*) FILTER (WHERE category @@@ paradedb.term_set(terms => ARRAY(SELECT paradedb.term('category', category) FROM allowed_categories LIMIT 2))),
  COUNT(*) FILTER (WHERE category @@@ paradedb.term_set(terms => ARRAY(SELECT paradedb.term('category', category) FROM allowed_categories LIMIT 2 OFFSET 2)))
FROM mock_items;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Custom Scan (ParadeDB Aggregate Scan) on mock_items  (cost=0.12..0.12 rows=0 width=24)
   Index: search_idx
   Execution Strategy: Multi-Query (2 Filter Groups)
     Group 1 Query (No Filter): "all"
     Group 1 Aggregates: COUNT(*)
     Group 2 Query: {}
     Group 2 Aggregates: COUNT(*) FILTER (WHERE {}), COUNT(*) FILTER (WHERE {})
   InitPlan 1
     ->  Limit  (cost=0.00..0.04 rows=2 width=32)
           ->  Seq Scan on allowed_categories  (cost=0.00..27.00 rows=1360 width=32)
   InitPlan 2
     ->  Limit  (cost=0.04..0.08 rows=2 width=32)
           ->  Seq Scan on allowed_categories allowed_categories_1  (cost=0.00..27.00 rows=1360 width=32)
(13 rows)

SELECT
  COUNT(*) AS total,
  COUNT(*) FILTER (WHERE category @@@ paradedb.term_set(terms => ARRAY(SELECT paradedb.term('category', category) FROM allowed_categories LIMIT 2))),
  COUNT(*) FILTER (WHERE category @@@ paradedb.term_set(terms => ARRAY(SELECT paradedb.term('category', category) FROM allowed_categories LIMIT 2 OFFSET 2)))
FROM mock_items;
 total | count | count 
-------+-------+-------
    41 |     5 |     0
(1 row)

-- Make sure the results are correct
SET paradedb.enable_aggregate_custom_scan TO off;
SELECT COUNT(*) FROM mock_items WHERE category @@@ paradedb.term_set(terms => ARRAY(SELECT paradedb.term('category', category) FROM allowed_categories LIMIT 5));
 count 
-------
     5
(1 row)

SELECT
  COUNT(*) AS total,
  COUNT(*) FILTER (WHERE category @@@ paradedb.term_set(terms => ARRAY(SELECT paradedb.term('category', category) FROM allowed_categories LIMIT 2))),
  COUNT(*) FILTER (WHERE category @@@ paradedb.term_set(terms => ARRAY(SELECT paradedb.term('category', category) FROM allowed_categories LIMIT 2 OFFSET 2)))
FROM mock_items;
 total | count | count 
-------+-------+-------
    41 |     5 |     0
(1 row)

DROP TABLE allowed_categories;
DROP TABLE mock_items;
