-- JOIN handling test cases
-- This file contains corner cases for JOIN support with @@@ operator and OR conditions
-- Covers: equi vs non-equi joins, cross-table OR, complex boolean logic,
-- edge cases, logical holes, and performance vs correctness scenarios
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
SET enable_indexscan to OFF;
-- Load the pg_search extension
CREATE EXTENSION IF NOT EXISTS pg_search;
-- =============================================================================
-- SETUP
-- =============================================================================
DROP TABLE IF EXISTS reviews CASCADE;
DROP TABLE IF EXISTS books CASCADE;
DROP TABLE IF EXISTS authors CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS publishers CASCADE;
DROP TABLE IF EXISTS bridge_table CASCADE;
CREATE TABLE authors (
    id SERIAL PRIMARY KEY,
    name TEXT,
    bio TEXT,
    country TEXT,
    birth_year INTEGER,
    is_active BOOLEAN DEFAULT true
);
CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name TEXT,
    description TEXT,
    is_active BOOLEAN DEFAULT true
);
CREATE TABLE publishers (
    id SERIAL PRIMARY KEY,
    name TEXT,
    description TEXT,
    founded_year INTEGER
);
CREATE TABLE books (
    id INT,
    title TEXT,
    content TEXT,
    author_id INTEGER REFERENCES authors(id),
    category_id INTEGER REFERENCES categories(id),
    publisher_id INTEGER REFERENCES publishers(id),
    publication_year INTEGER,
    is_published BOOLEAN DEFAULT true,
    rating DECIMAL(3,2),
    price DECIMAL(10,2),
    PRIMARY KEY (id, author_id)
);
CREATE TABLE reviews (
    id SERIAL PRIMARY KEY,
    book_id INTEGER,
    author_id INTEGER REFERENCES authors(id),  -- reviewer
    content TEXT,
    score INTEGER,
    is_verified BOOLEAN DEFAULT false,
    FOREIGN KEY (book_id, author_id) REFERENCES books(id, author_id)
);
CREATE TABLE bridge_table (
    author_id INTEGER REFERENCES authors(id),
    book_id INTEGER REFERENCES books(id),
    relationship_type TEXT,
    strength INTEGER
);
ERROR:  there is no unique constraint matching given keys for referenced table "books"
-- Insert comprehensive test data
INSERT INTO authors (name, bio, country, birth_year, is_active) VALUES
('J.K. Rowling', 'British author famous for Harry Potter magic series', 'UK', 1965, true),
('Stephen King', 'American author of horror and supernatural fiction terror', 'USA', 1947, true),
('Agatha Christie', 'English writer known for detective mystery novels', 'UK', 1890, false),
('George Orwell', 'English novelist and essayist technology writer', 'UK', 1903, false),
('Jane Austen', 'English novelist known for romantic fiction love stories', 'UK', 1775, false),
('John Smith', 'Famous science fiction author smartphone technology', 'USA', 1960, true);
INSERT INTO categories (name, description, is_active) VALUES
('Fantasy', 'Fantasy and magical realism books with magic spells', true),
('Horror', 'Horror and thriller books with terror elements', true),
('Mystery', 'Detective and mystery books with investigation', true),
('Classic', 'Classic literature books with timeless stories', true),
('Romance', 'Romantic fiction books with love stories', false),
('Technology', 'Technology and science publications with innovation', true);
INSERT INTO publishers (name, description, founded_year) VALUES
('TechBooks Publishing', 'technology and science publications with innovation', 1990),
('Mystery House Press', 'crime and mystery novels with detective stories', 1985),
('Romance World', 'romantic fiction publisher with love stories', 2000),
('Academic Press', 'educational and technical books with performance', 1975),
('Magic Books', 'fantasy and magical publications with spells', 1980);
INSERT INTO books (id, title, content, author_id, category_id, publisher_id, publication_year, is_published, rating, price) VALUES
(1, 'Harry Potter Magic', 'A magical story about wizards and magic spells technology', 1, 1, 5, 1997, true, 4.8, 29.99),
(1, 'Harry Potter Horrors', 'A magical story about wizards and magic spells', 2, 1, 5, 1997, true, 4.8, 29.99),
(2, 'The Shining Terror', 'A horror story about supernatural terror events performance', 2, 2, 4, 1977, true, 4.5, 19.99),
(3, 'Murder Mystery Case', 'A detective story with mystery and murder investigation', 3, 3, 2, 1934, true, 4.2, 39.99),
(4, 'Dystopian Future', 'A story about totalitarian surveillance and technology control', 4, 4, 4, 1949, true, 4.7, 24.99),
(5, 'Pride Romance', 'A romantic story about love and prejudice relationships', 5, 5, 3, 1813, false, 4.6, 34.99),
(6, 'Magic Detective', 'A mystery story with magical elements and detective work', 1, 3, 5, 2001, true, 4.1, 21.99),
(7, 'Smartphone Tech', 'Advanced smartphone technology with innovation features', 6, 6, 1, 2020, true, 4.3, 699.99),
(8, 'Future Technologies', 'artificial intelligence machine learning robots performance', 6, 6, 1, 2020, true, 4.4, 89.99);
INSERT INTO reviews (book_id, author_id, content, score, is_verified) VALUES
(1, 2, 'Amazing magical story with great characters and excellent storytelling', 5, true),
(2, 1, 'Terrifying horror story that kept me awake with excellent performance', 4, true),
(3, 4, 'Classic mystery with excellent detective work and investigation', 5, false),
(4, 3, 'Thought-provoking story about surveillance and technology innovation', 4, true),
(5, 2, 'Beautiful romantic story with great character development and love', 5, false),
(6, 5, 'Interesting combination of mystery and magic with storytelling', 4, true),
(7, 1, 'Great smartphone technology review with innovation features', 4, true),
(8, 3, 'Excellent technology book with performance and capabilities', 5, true);
ERROR:  insert or update on table "reviews" violates foreign key constraint "reviews_book_id_author_id_fkey"
INSERT INTO bridge_table (author_id, book_id, relationship_type, strength) VALUES
(1, 1, 'primary', 10), (2, 2, 'primary', 9), (3, 3, 'primary', 8),
(4, 4, 'primary', 7), (5, 5, 'primary', 6), (6, 7, 'primary', 9),
(1, 6, 'secondary', 5), (6, 8, 'primary', 8);
ERROR:  relation "bridge_table" does not exist at character 13
-- Create BM25 indexes
CREATE INDEX authors_bm25_idx ON authors USING bm25 (id, name, bio, country) WITH (key_field = 'id');
CREATE INDEX books_bm25_idx ON books USING bm25 (id, title, content) WITH (key_field = 'id');
CREATE INDEX reviews_bm25_idx ON reviews USING bm25 (id, content) WITH (key_field = 'id');
CREATE INDEX categories_bm25_idx ON categories USING bm25 (id, name, description) WITH (key_field = 'id');
CREATE INDEX publishers_bm25_idx ON publishers USING bm25 (id, name, description) WITH (key_field = 'id');
-- =============================================================================
-- SECTION 1: Equi-joins with various join types
-- =============================================================================
-- Test 1.1: INNER JOIN with equi-join condition
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
INNER JOIN books b ON a.id = b.author_id
WHERE (a.bio @@@ 'science' OR b.content @@@ 'technology')
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
  author_name  |      book_title      | author_score | book_score 
---------------+----------------------+--------------+------------
 J.K. Rowling  | Harry Potter Magic   |            0 |    0.98641
 Stephen King  | Harry Potter Horrors |            0 |          0
 George Orwell | Dystopian Future     |            0 |  1.0376933
 John Smith    | Smartphone Tech      |    1.6503524 |  1.1581132
 John Smith    | Future Technologies  |    1.6503524 |          0
(5 rows)

-- Test 1.2: LEFT JOIN with equi-join condition
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
LEFT JOIN books b ON a.id = b.author_id
WHERE (a.bio @@@ 'mystery' OR b.content @@@ 'romance')
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
   author_name   |     book_title      | author_score | book_score 
-----------------+---------------------+--------------+------------
 Agatha Christie | Murder Mystery Case |    1.5552412 |          0
(1 row)

-- Test 1.3: RIGHT JOIN with equi-join condition
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
RIGHT JOIN books b ON a.id = b.author_id
WHERE (a.bio @@@ 'fiction' OR b.content @@@ 'magic')
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
 author_name  |      book_title      | author_score | book_score 
--------------+----------------------+--------------+------------
 J.K. Rowling | Harry Potter Magic   |            0 |  1.3025584
 Stephen King | Harry Potter Horrors |   0.66167223 |  1.3702781
 Stephen King | The Shining Terror   |   0.66167223 |          0
 Jane Austen  | Pride Romance        |   0.66167223 |          0
 John Smith   | Smartphone Tech      |   0.74260163 |          0
 John Smith   | Future Technologies  |   0.74260163 |          0
(6 rows)

-- Test 1.4: Multiple equi-join conditions with AND
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
INNER JOIN books b ON a.id = b.author_id AND a.birth_year < 2000
WHERE (a.bio @@@ 'writer' OR b.content @@@ 'mystery')
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
   author_name   |     book_title      | author_score | book_score 
-----------------+---------------------+--------------+------------
 J.K. Rowling    | Magic Detective     |              |  1.3025584
 Agatha Christie | Murder Mystery Case |              |  1.3702781
 George Orwell   | Dystopian Future    |              |          0
(3 rows)

-- =============================================================================
-- SECTION 2: Non-equi joins and problematic conditions
-- =============================================================================
-- Test 2.1: CROSS JOIN (no join condition) - should be rejected
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
CROSS JOIN books b
WHERE (a.bio @@@ 'author' OR b.content @@@ 'mystery')
ORDER BY a.id, b.id, author_score DESC, book_score DESC
LIMIT 10;
 author_name  |      book_title      | author_score | book_score 
--------------+----------------------+--------------+------------
 J.K. Rowling | Harry Potter Horrors |   0.66167223 |          0
 J.K. Rowling | Harry Potter Magic   |   0.66167223 |          0
 J.K. Rowling | The Shining Terror   |   0.66167223 |          0
 J.K. Rowling | Murder Mystery Case  |   0.66167223 |  1.3702781
 J.K. Rowling | Dystopian Future     |   0.66167223 |          0
 J.K. Rowling | Pride Romance        |   0.66167223 |          0
 J.K. Rowling | Magic Detective      |   0.66167223 |  1.3025584
 J.K. Rowling | Smartphone Tech      |   0.66167223 |          0
 J.K. Rowling | Future Technologies  |   0.66167223 |          0
 Stephen King | Harry Potter Magic   |   0.66167223 |          0
(10 rows)

-- Test 2.2: INNER JOIN with non-equi condition (<, >, etc.)
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
INNER JOIN books b ON a.birth_year < b.publication_year
WHERE (a.bio @@@ 'fiction' OR b.content @@@ 'love')
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
 author_name  |      book_title      | author_score | book_score 
--------------+----------------------+--------------+------------
 Stephen King | Harry Potter Magic   |   0.66167223 |          0
 Stephen King | Harry Potter Horrors |   0.66167223 |          0
 Stephen King | The Shining Terror   |   0.66167223 |          0
 Stephen King | Dystopian Future     |   0.66167223 |          0
 Stephen King | Magic Detective      |   0.66167223 |          0
 Stephen King | Smartphone Tech      |   0.66167223 |          0
 Stephen King | Future Technologies  |   0.66167223 |          0
 Jane Austen  | Harry Potter Magic   |   0.66167223 |          0
 Jane Austen  | Harry Potter Horrors |   0.66167223 |          0
 Jane Austen  | The Shining Terror   |   0.66167223 |          0
 Jane Austen  | Murder Mystery Case  |   0.66167223 |          0
 Jane Austen  | Dystopian Future     |   0.66167223 |          0
 Jane Austen  | Pride Romance        |   0.66167223 |  1.8752021
 Jane Austen  | Magic Detective      |   0.66167223 |          0
 Jane Austen  | Smartphone Tech      |   0.66167223 |          0
 Jane Austen  | Future Technologies  |   0.66167223 |          0
 John Smith   | Harry Potter Magic   |   0.74260163 |          0
 John Smith   | Harry Potter Horrors |   0.74260163 |          0
 John Smith   | The Shining Terror   |   0.74260163 |          0
 John Smith   | Magic Detective      |   0.74260163 |          0
 John Smith   | Smartphone Tech      |   0.74260163 |          0
 John Smith   | Future Technologies  |   0.74260163 |          0
(22 rows)

-- Test 2.3: INNER JOIN with complex non-equi condition
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
INNER JOIN books b ON a.birth_year + 50 > b.publication_year
WHERE (a.bio @@@ 'writer' OR b.content @@@ 'programming')
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
   author_name   |     book_title      | author_score | book_score 
-----------------+---------------------+--------------+------------
 Agatha Christie | Murder Mystery Case |    1.0395092 |          0
 Agatha Christie | Pride Romance       |    1.0395092 |          0
 George Orwell   | Murder Mystery Case |    1.1030805 |          0
 George Orwell   | Dystopian Future    |    1.1030805 |          0
 George Orwell   | Pride Romance       |    1.1030805 |          0
(5 rows)

-- Test 2.4: INNER JOIN with BETWEEN condition (range, non-equi)
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
INNER JOIN books b ON b.price BETWEEN 20.00 AND 30.00 AND a.id = b.author_id
WHERE (a.bio @@@ 'author' OR b.content @@@ 'romance')
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
 author_name  |      book_title      | author_score | book_score 
--------------+----------------------+--------------+------------
 J.K. Rowling | Harry Potter Magic   |   0.66167223 |           
 J.K. Rowling | Magic Detective      |   0.66167223 |           
 Stephen King | Harry Potter Horrors |   0.66167223 |           
(3 rows)

-- =============================================================================
-- SECTION 3: CROSS-TABLE OR TESTS
-- =============================================================================
-- Test 3.1: Basic cross-table OR
SELECT 
    a.name as author_name,
    b.content as book_content,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
CROSS JOIN books b
WHERE (a.bio @@@ 'smartphone' OR b.content @@@ 'performance')
ORDER BY a.id, b.id, author_score DESC, book_score DESC
LIMIT 10;
   author_name   |                        book_content                         | author_score | book_score 
-----------------+-------------------------------------------------------------+--------------+------------
 J.K. Rowling    | A horror story about supernatural terror events performance |            0 |  1.3702781
 J.K. Rowling    | artificial intelligence machine learning robots performance |            0 |  1.5292932
 Stephen King    | A horror story about supernatural terror events performance |            0 |  1.3702781
 Stephen King    | artificial intelligence machine learning robots performance |            0 |  1.5292932
 Agatha Christie | A horror story about supernatural terror events performance |            0 |  1.3702781
 Agatha Christie | artificial intelligence machine learning robots performance |            0 |  1.5292932
 George Orwell   | A horror story about supernatural terror events performance |            0 |  1.3702781
 George Orwell   | artificial intelligence machine learning robots performance |            0 |  1.5292932
 Jane Austen     | A horror story about supernatural terror events performance |            0 |  1.3702781
 Jane Austen     | artificial intelligence machine learning robots performance |            0 |  1.5292932
(10 rows)

-- Test 3.2: Three-table OR
SELECT 
    a.name as author_name,
    b.title as book_title,
    c.name as category_name,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score,
    paradedb.score(c.id) as category_score
FROM authors a
INNER JOIN books b ON a.id = b.author_id
CROSS JOIN categories c
WHERE (a.bio @@@ 'author' OR b.content @@@ 'science' OR c.description @@@ 'technology')
ORDER BY a.id, b.id, c.id, author_score DESC, book_score DESC, category_score DESC
LIMIT 10;
 author_name  |     book_title     | category_name | author_score | book_score | category_score 
--------------+--------------------+---------------+--------------+------------+----------------
 J.K. Rowling | Harry Potter Magic | Fantasy       |   0.66167223 |          0 |              0
 J.K. Rowling | Harry Potter Magic | Horror        |   0.66167223 |          0 |              0
 J.K. Rowling | Harry Potter Magic | Mystery       |   0.66167223 |          0 |              0
 J.K. Rowling | Harry Potter Magic | Classic       |   0.66167223 |          0 |              0
 J.K. Rowling | Harry Potter Magic | Romance       |   0.66167223 |          0 |              0
 J.K. Rowling | Harry Potter Magic | Technology    |   0.66167223 |          0 |      1.5904956
 J.K. Rowling | Magic Detective    | Fantasy       |   0.66167223 |          0 |              0
 J.K. Rowling | Magic Detective    | Horror        |   0.66167223 |          0 |              0
 J.K. Rowling | Magic Detective    | Mystery       |   0.66167223 |          0 |              0
 J.K. Rowling | Magic Detective    | Classic       |   0.66167223 |          0 |              0
(10 rows)

-- Test 3.3: Multiple conditions per relation in OR
SELECT 
    a.name as author_name,
    a.country as author_country,
    b.content as book_content,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
CROSS JOIN books b
WHERE (a.bio @@@ 'smartphone' OR a.country @@@ 'British' OR b.content @@@ 'performance')
ORDER BY a.id, b.id, author_score DESC, book_score DESC
LIMIT 10;
   author_name   | author_country |                        book_content                         | author_score | book_score 
-----------------+----------------+-------------------------------------------------------------+--------------+------------
 J.K. Rowling    | UK             | A horror story about supernatural terror events performance |            0 |  1.3702781
 J.K. Rowling    | UK             | artificial intelligence machine learning robots performance |            0 |  1.5292932
 Stephen King    | USA            | A horror story about supernatural terror events performance |            0 |  1.3702781
 Stephen King    | USA            | artificial intelligence machine learning robots performance |            0 |  1.5292932
 Agatha Christie | UK             | A horror story about supernatural terror events performance |            0 |  1.3702781
 Agatha Christie | UK             | artificial intelligence machine learning robots performance |            0 |  1.5292932
 George Orwell   | UK             | A horror story about supernatural terror events performance |            0 |  1.3702781
 George Orwell   | UK             | artificial intelligence machine learning robots performance |            0 |  1.5292932
 Jane Austen     | UK             | A horror story about supernatural terror events performance |            0 |  1.3702781
 Jane Austen     | UK             | artificial intelligence machine learning robots performance |            0 |  1.5292932
(10 rows)

-- =============================================================================
-- SECTION 4: COMPLEX BOOLEAN LOGIC TESTS
-- =============================================================================
-- Test 4.1: Mixed search and non-search predicates in OR
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
INNER JOIN books b ON a.id = b.author_id
WHERE (a.bio @@@ 'science' OR b.content @@@ 'mystery' OR b.price > 25.00)
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
   author_name   |      book_title      | author_score | book_score 
-----------------+----------------------+--------------+------------
 J.K. Rowling    | Harry Potter Magic   |            0 |          0
 J.K. Rowling    | Magic Detective      |            0 |  1.3025584
 Stephen King    | Harry Potter Horrors |            0 |          0
 Agatha Christie | Murder Mystery Case  |            0 |  1.3702781
 Jane Austen     | Pride Romance        |            0 |          0
 John Smith      | Smartphone Tech      |    1.6503524 |          0
 John Smith      | Future Technologies  |    1.6503524 |          0
(7 rows)

-- Test 4.2: Nested AND/OR combinations
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
INNER JOIN books b ON a.id = b.author_id
WHERE (a.bio @@@ 'smartphone' AND a.birth_year > 1950) 
   OR (b.content @@@ 'magic' AND b.publication_year > 1980)
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
 author_name  |      book_title      | author_score | book_score 
--------------+----------------------+--------------+------------
 J.K. Rowling | Harry Potter Magic   |            0 |  1.3025584
 Stephen King | Harry Potter Horrors |            0 |  1.3702781
 John Smith   | Smartphone Tech      |    1.6503524 |          0
 John Smith   | Future Technologies  |    1.6503524 |          0
(4 rows)

-- Test 4.3: Complex boolean logic across three tables
SELECT 
    a.name as author_name,
    b.title as book_title,
    r.content as review_content,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score,
    paradedb.score(r.id) as review_score
FROM authors a
JOIN books b ON a.id = b.author_id
JOIN reviews r ON b.id = r.book_id
WHERE (a.bio @@@ 'British' AND b.is_published = true) 
   OR (b.content @@@ 'horror' AND r.score >= 4)
ORDER BY a.id, b.id, r.id, author_score DESC, book_score DESC, review_score DESC;
 author_name | book_title | review_content | author_score | book_score | review_score 
-------------+------------+----------------+--------------+------------+--------------
(0 rows)

-- Test 4.4: Intelligent partial salvage of AND expressions
SELECT 
    a.name as author_name,
    paradedb.score(a.id) as author_score
FROM authors a
JOIN categories c ON a.id = c.id
WHERE (a.bio @@@ 'laptop')
  AND (a.birth_year > 1000)
  AND (c.name @@@ 'Electronics')
ORDER BY a.id, author_score DESC;
 author_name | author_score 
-------------+--------------
(0 rows)

-- =============================================================================
-- SECTION 5: EDGE CASES AND LOGICAL HOLES
-- =============================================================================
-- Test 5.1: Self-join with equi-join condition
SELECT 
    a1.name as author1_name,
    a2.name as author2_name,
    paradedb.score(a1.id) as author1_score,
    paradedb.score(a2.id) as author2_score
FROM authors a1
INNER JOIN authors a2 ON a1.birth_year = a2.birth_year AND a1.id != a2.id
WHERE (a1.bio @@@ 'fiction' OR a2.bio @@@ 'mystery')
ORDER BY a1.id, a2.id, author1_score DESC, author2_score DESC;
 author1_name | author2_name | author1_score | author2_score 
--------------+--------------+---------------+---------------
(0 rows)

-- Test 5.2: Variable scope violation test
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
JOIN books b ON a.id = b.author_id
WHERE a.bio @@@ 'author' AND b.category_id = 1
ORDER BY a.id, b.id, author_score DESC, book_score DESC;
 author_name  |      book_title      | author_score | book_score 
--------------+----------------------+--------------+------------
 J.K. Rowling | Harry Potter Magic   |   0.66167223 |           
 Stephen King | Harry Potter Horrors |   0.66167223 |           
(2 rows)

-- Test 5.3: LEFT JOIN semantics test
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
LEFT JOIN books b ON a.id = b.author_id
WHERE a.bio @@@ 'author' OR b.content @@@ 'story'
ORDER BY a.id, b.id;
   author_name   |      book_title      | author_score | book_score 
-----------------+----------------------+--------------+------------
 J.K. Rowling    | Harry Potter Magic   |   0.66167223 | 0.27030534
 J.K. Rowling    | Magic Detective      |   0.66167223 | 0.27030534
 Stephen King    | Harry Potter Horrors |   0.66167223 | 0.28435844
 Stephen King    | The Shining Terror   |   0.66167223 | 0.28435844
 Agatha Christie | Murder Mystery Case  |            0 | 0.28435844
 George Orwell   | Dystopian Future     |            0 | 0.28435844
 Jane Austen     | Pride Romance        |            0 | 0.28435844
 John Smith      | Smartphone Tech      |   0.74260163 |          0
 John Smith      | Future Technologies  |   0.74260163 |          0
(9 rows)

-- Test 5.4: NULL-generating join test
SELECT 
    a.name as author_name,
    b.title as book_title,
    c.name as category_name,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score,
    paradedb.score(c.id) as category_score
FROM authors a
LEFT JOIN books b ON a.id = b.author_id
LEFT JOIN categories c ON b.category_id = c.id
WHERE a.bio @@@ 'author' 
   OR (b.content @@@ 'story' AND c.name @@@ 'Fantasy')
ORDER BY a.id, b.id, c.id
LIMIT 15;
 author_name  |      book_title      | category_name | author_score | book_score | category_score 
--------------+----------------------+---------------+--------------+------------+----------------
 J.K. Rowling | Harry Potter Magic   | Fantasy       |   0.66167223 | 0.27030534 |      1.5404451
 J.K. Rowling | Magic Detective      | Mystery       |   0.66167223 | 0.27030534 |              0
 Stephen King | Harry Potter Horrors | Fantasy       |   0.66167223 | 0.28435844 |      1.5404451
 Stephen King | The Shining Terror   | Horror        |   0.66167223 | 0.28435844 |              0
 John Smith   | Smartphone Tech      | Technology    |   0.74260163 |          0 |              0
 John Smith   | Future Technologies  | Technology    |   0.74260163 |          0 |              0
(6 rows)

-- Test 5.5: Complex join forcing joininfo conditions
SELECT 
    a.name as author_name,
    b.title as book_title,
    br.relationship_type,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
JOIN bridge_table br ON a.id = br.author_id
JOIN books b ON b.id = br.book_id
WHERE (a.bio @@@ 'smartphone' AND b.content @@@ 'advanced')
   OR (a.birth_year > 1900 AND b.rating > 4.0)
ORDER BY a.id, b.id, author_score DESC;
ERROR:  relation "bridge_table" does not exist at character 190
-- =============================================================================
-- SECTION 6: PERFORMANCE VS CORRECTNESS TESTS
-- =============================================================================
-- Test 6.1: Score consistency check - direct vs join query
SELECT 
    a.name as author_name,
    paradedb.score(a.id) as author_score
FROM authors a
WHERE a.bio @@@ 'author'
ORDER BY a.id, author_score DESC;
 author_name  | author_score 
--------------+--------------
 J.K. Rowling |   0.66167223
 Stephen King |   0.66167223
 John Smith   |   0.74260163
(3 rows)

SELECT 
    a.name as author_name,
    paradedb.score(a.id) as author_score
FROM authors a
JOIN books b ON a.id = b.author_id
WHERE a.bio @@@ 'author'
ORDER BY a.id, author_score DESC;
 author_name  | author_score 
--------------+--------------
 J.K. Rowling |   0.66167223
 J.K. Rowling |   0.66167223
 Stephen King |   0.66167223
 Stephen King |   0.66167223
 John Smith   |   0.74260163
 John Smith   |   0.74260163
(6 rows)

-- Test 6.2: Performance vs correctness trade-off
SELECT 
    COUNT(*) as total_results,
    AVG(paradedb.score(a.id)) as avg_author_score,
    AVG(paradedb.score(b.id)) as avg_book_score
FROM authors a
JOIN books b ON a.id = b.author_id
WHERE (a.bio @@@ 'author' OR b.content @@@ 'story')
  AND (a.is_active = true OR b.is_published = true);
 total_results | avg_author_score | avg_book_score 
---------------+------------------+----------------
             8 |                  |               
(1 row)

-- Test 6.3: Unsafe conditions that cannot be pushed down
SELECT 
    a.name as author_name,
    b.title as book_title,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score
FROM authors a
CROSS JOIN books b
WHERE (a.bio @@@ 'smartphone' OR a.birth_year = b.publication_year)
ORDER BY a.id, b.id, author_score DESC, book_score DESC
LIMIT 5;
 author_name |      book_title      | author_score | book_score 
-------------+----------------------+--------------+------------
 John Smith  | Harry Potter Magic   |    1.6503524 |          0
 John Smith  | Harry Potter Horrors |    1.6503524 |          0
 John Smith  | The Shining Terror   |    1.6503524 |          0
 John Smith  | Murder Mystery Case  |    1.6503524 |          0
 John Smith  | Dystopian Future     |    1.6503524 |          0
(5 rows)

-- =============================================================================
-- SECTION 7: Misc.
-- =============================================================================
-- Test 7.1: Multiple diagnostic types in one query
SELECT 
    a.name as author_name,
    b.title as book_title,
    r.content as review_content,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score,
    paradedb.score(r.id) as review_score
FROM authors a
JOIN books b ON a.id = b.author_id
LEFT JOIN reviews r ON b.id = r.book_id
WHERE (
    (a.bio @@@ 'laptop' AND a.birth_year > 1000)
    OR 
    (b.content @@@ 'Electronics' AND r.score > 4)
    OR
    (a.is_active = true AND b.is_published = true)
)
ORDER BY a.id, b.id, r.id, author_score DESC, book_score DESC
LIMIT 10;
 author_name  |      book_title      | review_content | author_score | book_score | review_score 
--------------+----------------------+----------------+--------------+------------+--------------
 J.K. Rowling | Harry Potter Magic   |                |              |            |             
 J.K. Rowling | Magic Detective      |                |              |            |             
 Stephen King | Harry Potter Horrors |                |              |            |             
 Stephen King | The Shining Terror   |                |              |            |             
 John Smith   | Smartphone Tech      |                |              |            |             
 John Smith   | Future Technologies  |                |              |            |             
(6 rows)

-- Test 7.2: Conservative OR handling demonstration
SELECT 
    a.name as author_name,
    c.name as category_name,
    paradedb.score(a.id) as author_score,
    paradedb.score(c.id) as category_score
FROM authors a
JOIN books b ON a.id = b.author_id
JOIN categories c ON b.category_id = c.id
WHERE (a.bio @@@ 'smartphone')    -- Safe condition on authors
   OR (c.description @@@ 'electronic')    -- External condition on categories
ORDER BY a.id, c.id, author_score DESC, category_score DESC;
 author_name | category_name | author_score | category_score 
-------------+---------------+--------------+----------------
 John Smith  | Technology    |    1.6503524 |              0
 John Smith  | Technology    |    1.6503524 |              0
(2 rows)

-- =============================================================================
-- SECTION 8: VERIFICATION AND COMPARISON TESTS
-- =============================================================================
-- Test 8.1: Single-table queries for comparison
SELECT 'Single table A - smartphone' as query_type, 
       a.name, paradedb.score(a.id) as score
FROM authors a 
WHERE a.bio @@@ 'smartphone'
UNION ALL
SELECT 'Single table B - performance' as query_type,
       b.title, paradedb.score(b.id) as score  
FROM books b
WHERE b.content @@@ 'performance'
ORDER BY score DESC;
          query_type          |        name         |   score   
------------------------------+---------------------+-----------
 Single table A - smartphone  | John Smith          | 1.6503524
 Single table B - performance | Future Technologies | 1.5292932
 Single table B - performance | The Shining Terror  | 1.3702781
(3 rows)

-- Test 8.2: Complex real-world scenario
SELECT 
    a.name as author_name,
    b.title as book_title,
    c.name as category_name,
    p.name as publisher_name,
    paradedb.score(a.id) as author_score,
    paradedb.score(b.id) as book_score,
    paradedb.score(c.id) as category_score,
    paradedb.score(p.id) as publisher_score
FROM authors a
LEFT JOIN books b ON a.id = b.author_id
LEFT JOIN categories c ON b.category_id = c.id
LEFT JOIN publishers p ON b.publisher_id = p.id
WHERE (a.bio @@@ 'technology' OR a.country @@@ 'British')
   OR (b.content @@@ 'performance' OR b.title @@@ 'magic')
   OR (c.description @@@ 'innovation' OR c.name @@@ 'Fantasy')
   OR (p.description @@@ 'technology' OR p.name @@@ 'Academic')
ORDER BY a.id, b.id, c.id, p.id, author_score DESC, book_score DESC
LIMIT 15;
  author_name  |      book_title      | category_name |    publisher_name    | author_score | book_score | category_score | publisher_score 
---------------+----------------------+---------------+----------------------+--------------+------------+----------------+-----------------
 J.K. Rowling  | Harry Potter Magic   | Fantasy       | Magic Books          |            0 |  1.2683676 |      1.5404451 |               0
 J.K. Rowling  | Magic Detective      | Mystery       | Magic Books          |            0 |  1.4976931 |              0 |               0
 Stephen King  | Harry Potter Horrors | Fantasy       | Magic Books          |            0 |          0 |      1.5404451 |               0
 Stephen King  | The Shining Terror   | Horror        | Academic Press       |            0 |  1.3702781 |              0 |       1.4398423
 George Orwell | Dystopian Future     | Classic       | Academic Press       |    1.1030805 |          0 |              0 |       1.4398423
 John Smith    | Smartphone Tech      | Technology    | TechBooks Publishing |    1.1030805 |          0 |      1.5904956 |       1.4048332
 John Smith    | Future Technologies  | Technology    | TechBooks Publishing |    1.1030805 |  1.5292932 |      1.5904956 |       1.4048332
(7 rows)

-- Cleanup
DROP TABLE IF EXISTS bridge_table;
DROP TABLE IF EXISTS reviews;
DROP TABLE IF EXISTS books;
DROP TABLE IF EXISTS publishers;
DROP TABLE IF EXISTS categories;
DROP TABLE IF EXISTS authors;
RESET max_parallel_workers_per_gather;
RESET enable_indexscan; 
