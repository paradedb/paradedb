\i common/common_setup.sql
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
SET enable_indexscan to OFF;
SET paradedb.enable_mixed_fast_field_exec = true;
DROP TABLE IF EXISTS layer_sizes;
CREATE TABLE layer_sizes (id serial8 not null primary key);
-- 1 layer ✅
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', layer_sizes = '1kb');
SELECT * FROM paradedb.layer_sizes('idxlayer_sizes');
 layer_sizes 
-------------
 {1024}
(1 row)

SELECT * FROM paradedb.background_layer_sizes('idxlayer_sizes');
                         background_layer_sizes                         
------------------------------------------------------------------------
 {10485760,104857600,1048576000,10485760000,104857600000,1048576000000}
(1 row)

DROP INDEX idxlayer_sizes;
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', background_layer_sizes = '1kb');
SELECT * FROM paradedb.layer_sizes('idxlayer_sizes');
      layer_sizes       
------------------------
 {10240,102400,1048576}
(1 row)

SELECT * FROM paradedb.background_layer_sizes('idxlayer_sizes');
 background_layer_sizes 
------------------------
 {1024}
(1 row)

DROP INDEX idxlayer_sizes;
-- negative layer ❌
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', layer_sizes = '-1kb');
ERROR:  a single layer size must be non-negative
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', background_layer_sizes = '-1kb');
ERROR:  a single layer size must be non-negative
-- zero layer ✅
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', layer_sizes = '0kb, 10kb');
SELECT * FROM paradedb.layer_sizes('idxlayer_sizes');
 layer_sizes 
-------------
 {10240}
(1 row)

SELECT * FROM paradedb.background_layer_sizes('idxlayer_sizes');
                         background_layer_sizes                         
------------------------------------------------------------------------
 {10485760,104857600,1048576000,10485760000,104857600000,1048576000000}
(1 row)

DROP INDEX idxlayer_sizes;
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', background_layer_sizes = '0kb, 10kb');
SELECT * FROM paradedb.layer_sizes('idxlayer_sizes');
      layer_sizes       
------------------------
 {10240,102400,1048576}
(1 row)

SELECT * FROM paradedb.background_layer_sizes('idxlayer_sizes');
 background_layer_sizes 
------------------------
 {10240}
(1 row)

DROP INDEX idxlayer_sizes;
-- malformed layer ❌
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', layer_sizes = '1kb, bob''s your uncle');
ERROR:  invalid size: " bob's your uncle"
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', background_layer_sizes = '1kb, bob''s your uncle');
ERROR:  invalid size: " bob's your uncle"
-- multiple layers ✅
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', layer_sizes = '1kb, 10kb, 100MB');
SELECT * FROM paradedb.layer_sizes('idxlayer_sizes');
      layer_sizes       
------------------------
 {1024,10240,104857600}
(1 row)

SELECT * FROM paradedb.background_layer_sizes('idxlayer_sizes');
                         background_layer_sizes                         
------------------------------------------------------------------------
 {10485760,104857600,1048576000,10485760000,104857600000,1048576000000}
(1 row)

DROP INDEX idxlayer_sizes;
CREATE INDEX idxlayer_sizes ON layer_sizes USING bm25(id) WITH (key_field='id', background_layer_sizes = '1kb, 10kb, 100MB');
SELECT * FROM paradedb.layer_sizes('idxlayer_sizes');
      layer_sizes       
------------------------
 {10240,102400,1048576}
(1 row)

SELECT * FROM paradedb.background_layer_sizes('idxlayer_sizes');
 background_layer_sizes 
------------------------
 {1024,10240,104857600}
(1 row)

DROP INDEX idxlayer_sizes;
DROP TABLE layer_sizes;
