-- Test that LIMIT clause uses TopN execution with mixed fast fields
-- This test ensures that when a LIMIT clause is used with mixed fast fields,
-- the execution uses the optimized TopN execution path
-- Create test table with mixed field types
DROP TABLE IF EXISTS limit_topn_test;
CREATE TABLE limit_topn_test (
    id SERIAL PRIMARY KEY,
    title TEXT,
    description TEXT,
    rating FLOAT,
    price NUMERIC,
    category TEXT,
    is_available BOOLEAN,
    tags TEXT[],
    created_at TIMESTAMP
);
-- Insert test data
INSERT INTO limit_topn_test (title, description, rating, price, category, is_available, created_at)
SELECT
    'Product ' || i,
    'Description for product ' || i,
    (random() * 5)::float,
    (random() * 1000)::numeric,
    (ARRAY['Electronics', 'Books', 'Clothing', 'Food', 'Toys'])[1 + (i % 5)],
    i % 2 = 0,
    NOW() - (i || ' days')::interval
FROM generate_series(1, 100) i;
-- Create search index with multiple fast fields
DROP INDEX IF EXISTS limit_topn_idx;
CREATE INDEX limit_topn_idx ON limit_topn_test
USING columnstore (title, rating, price, category, is_available)
WITH (type='hnsw');
ERROR:  access method "columnstore" does not exist
-- Enable execution method tracing to verify TopN usage
SET pg_search.explain_analyze_verbose TO TRUE;
-- Test basic LIMIT with mixed fields (should use TopN)
EXPLAIN ANALYZE
SELECT title, rating, price, category
FROM limit_topn_test
WHERE title ILIKE 'Product%'
ORDER BY rating DESC
LIMIT 10;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14.88..14.89 rows=1 width=104) (actual time=0.204..0.206 rows=10 loops=1)
   ->  Sort  (cost=14.88..14.89 rows=1 width=104) (actual time=0.203..0.204 rows=10 loops=1)
         Sort Key: rating DESC
         Sort Method: top-N heapsort  Memory: 26kB
         ->  Seq Scan on limit_topn_test  (cost=0.00..14.88 rows=1 width=104) (actual time=0.022..0.104 rows=100 loops=1)
               Filter: (title ~~* 'Product%'::text)
 Planning Time: 0.474 ms
 Execution Time: 0.228 ms
(8 rows)

-- Test LIMIT with mixed text and numeric fields
EXPLAIN ANALYZE
SELECT title, category, rating, price
FROM limit_topn_test
WHERE category = 'Electronics'
ORDER BY price ASC
LIMIT 5;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14.88..14.89 rows=2 width=104) (actual time=0.098..0.099 rows=5 loops=1)
   ->  Sort  (cost=14.88..14.89 rows=2 width=104) (actual time=0.097..0.098 rows=5 loops=1)
         Sort Key: price
         Sort Method: top-N heapsort  Memory: 25kB
         ->  Seq Scan on limit_topn_test  (cost=0.00..14.88 rows=2 width=104) (actual time=0.014..0.025 rows=20 loops=1)
               Filter: (category = 'Electronics'::text)
               Rows Removed by Filter: 80
 Planning Time: 0.423 ms
 Execution Time: 0.118 ms
(9 rows)

-- Test LIMIT with multiple string fields
EXPLAIN ANALYZE
SELECT title, category
FROM limit_topn_test
WHERE category IN ('Books', 'Electronics')
ORDER BY title
LIMIT 15;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14.91..14.92 rows=4 width=64) (actual time=0.105..0.108 rows=15 loops=1)
   ->  Sort  (cost=14.91..14.92 rows=4 width=64) (actual time=0.104..0.106 rows=15 loops=1)
         Sort Key: title
         Sort Method: top-N heapsort  Memory: 26kB
         ->  Seq Scan on limit_topn_test  (cost=0.00..14.88 rows=4 width=64) (actual time=0.011..0.028 rows=40 loops=1)
               Filter: (category = ANY ('{Books,Electronics}'::text[]))
               Rows Removed by Filter: 60
 Planning Time: 0.111 ms
 Execution Time: 0.128 ms
(9 rows)

-- Test LIMIT with boolean field
EXPLAIN ANALYZE
SELECT title, is_available, rating
FROM limit_topn_test
WHERE is_available = true
ORDER BY rating DESC
LIMIT 7;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=17.61..17.63 rows=7 width=41) (actual time=0.051..0.052 rows=7 loops=1)
   ->  Sort  (cost=17.61..18.10 rows=195 width=41) (actual time=0.050..0.051 rows=7 loops=1)
         Sort Key: rating DESC
         Sort Method: top-N heapsort  Memory: 25kB
         ->  Seq Scan on limit_topn_test  (cost=0.00..13.90 rows=195 width=41) (actual time=0.009..0.022 rows=50 loops=1)
               Filter: is_available
               Rows Removed by Filter: 50
 Planning Time: 0.057 ms
 Execution Time: 0.068 ms
(9 rows)

-- Test LIMIT with multiple numeric fields
EXPLAIN ANALYZE
SELECT rating, price
FROM limit_topn_test
WHERE rating > 3.0 AND price < 500
ORDER BY price DESC
LIMIT 12;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16.84..16.87 rows=12 width=40) (actual time=0.058..0.060 rows=12 loops=1)
   ->  Sort  (cost=16.84..16.94 rows=43 width=40) (actual time=0.057..0.058 rows=12 loops=1)
         Sort Key: price DESC
         Sort Method: quicksort  Memory: 26kB
         ->  Seq Scan on limit_topn_test  (cost=0.00..15.85 rows=43 width=40) (actual time=0.011..0.024 rows=16 loops=1)
               Filter: ((rating > '3'::double precision) AND (price < '500'::numeric))
               Rows Removed by Filter: 84
 Planning Time: 0.107 ms
 Execution Time: 0.078 ms
(9 rows)

-- Test LIMIT with complex where clause on mixed fields
EXPLAIN ANALYZE
SELECT title, category, rating, price
FROM limit_topn_test
WHERE (rating BETWEEN 2.5 AND 4.5) AND (category = 'Electronics' OR category = 'Toys')
ORDER BY price DESC
LIMIT 8;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=17.81..17.82 rows=1 width=104) (actual time=0.050..0.052 rows=8 loops=1)
   ->  Sort  (cost=17.81..17.82 rows=1 width=104) (actual time=0.050..0.051 rows=8 loops=1)
         Sort Key: price DESC
         Sort Method: quicksort  Memory: 26kB
         ->  Seq Scan on limit_topn_test  (cost=0.00..17.80 rows=1 width=104) (actual time=0.012..0.023 rows=13 loops=1)
               Filter: ((rating >= '2.5'::double precision) AND (rating <= '4.5'::double precision) AND ((category = 'Electronics'::text) OR (category = 'Toys'::text)))
               Rows Removed by Filter: 87
 Planning Time: 0.078 ms
 Execution Time: 0.071 ms
(9 rows)

-- Verify actual results of LIMIT queries (not just execution path)
SELECT title, rating, price, category
FROM limit_topn_test
WHERE title ILIKE 'Product%'
ORDER BY rating DESC
LIMIT 5;
   title    |       rating       |      price       | category 
------------+--------------------+------------------+----------
 Product 23 | 4.9556516099989185 | 254.305462056814 | Food
 Product 26 |  4.944420199671727 | 542.673537809587 | Books
 Product 12 |  4.925019814558094 |  567.16787114035 | Clothing
 Product 41 |  4.893773018121946 |  302.88039752867 | Books
 Product 17 |  4.785936934513444 |  617.39206977251 | Clothing
(5 rows)

-- Clean up
DROP INDEX IF EXISTS limit_topn_idx;
DROP TABLE IF EXISTS limit_topn_test; 
