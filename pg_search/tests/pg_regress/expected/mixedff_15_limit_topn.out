-- Test that LIMIT clause uses TopN execution with mixed fast fields
-- This test ensures that when a LIMIT clause is used with mixed fast fields,
-- the execution uses the optimized TopN execution path
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
-- Create test table with mixed field types
DROP TABLE IF EXISTS limit_topn_test;
CREATE TABLE limit_topn_test (
    id SERIAL PRIMARY KEY,
    title TEXT,
    description TEXT,
    rating FLOAT,
    price NUMERIC,
    category TEXT,
    is_available BOOLEAN,
    tags TEXT[],
    created_at TIMESTAMP
);
-- Insert test data
INSERT INTO limit_topn_test (title, description, rating, price, category, is_available, created_at)
SELECT
    'Product ' || i,
    'Description for product ' || i,
    (random() * 5)::float,
    (random() * 1000)::numeric,
    (ARRAY['Electronics', 'Books', 'Clothing', 'Food', 'Toys'])[1 + (i % 5)],
    i % 2 = 0,
    NOW() - (i || ' days')::interval
FROM generate_series(1, 100) i;
-- Create search index with multiple fast fields
DROP INDEX IF EXISTS limit_topn_idx;
CREATE INDEX limit_topn_idx ON limit_topn_test
USING columnstore (title, rating, price, category, is_available)
WITH (type='hnsw');
ERROR:  access method "columnstore" does not exist
-- Test basic LIMIT with mixed fields (should use TopN)
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, rating, price, category
FROM limit_topn_test
WHERE title ILIKE 'Product%'
ORDER BY rating DESC
LIMIT 10;
                     QUERY PLAN                     
----------------------------------------------------
 Limit
   ->  Sort
         Sort Key: rating DESC
         ->  Seq Scan on limit_topn_test
               Filter: (title ~~* 'Product%'::text)
(5 rows)

-- Test LIMIT with mixed text and numeric fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, category, rating, price
FROM limit_topn_test
WHERE category = 'Electronics'
ORDER BY price ASC
LIMIT 5;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: price
         ->  Seq Scan on limit_topn_test
               Filter: (category = 'Electronics'::text)
(5 rows)

-- Test LIMIT with multiple string fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, category
FROM limit_topn_test
WHERE category IN ('Books', 'Electronics')
ORDER BY title
LIMIT 15;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: title
         ->  Seq Scan on limit_topn_test
               Filter: (category = ANY ('{Books,Electronics}'::text[]))
(5 rows)

-- Test LIMIT with boolean field
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, is_available, rating
FROM limit_topn_test
WHERE is_available = true
ORDER BY rating DESC
LIMIT 7;
               QUERY PLAN                
-----------------------------------------
 Limit
   ->  Sort
         Sort Key: rating DESC
         ->  Seq Scan on limit_topn_test
               Filter: is_available
(5 rows)

-- Test LIMIT with multiple numeric fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT rating, price
FROM limit_topn_test
WHERE rating > 3.0 AND price < 500
ORDER BY price DESC
LIMIT 12;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: price DESC
         ->  Seq Scan on limit_topn_test
               Filter: ((rating > '3'::double precision) AND (price < '500'::numeric))
(5 rows)

-- Test LIMIT with complex where clause on mixed fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, category, rating, price
FROM limit_topn_test
WHERE (rating BETWEEN 2.5 AND 4.5) AND (category = 'Electronics' OR category = 'Toys')
ORDER BY price DESC
LIMIT 8;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: price DESC
         ->  Seq Scan on limit_topn_test
               Filter: ((rating >= '2.5'::double precision) AND (rating <= '4.5'::double precision) AND ((category = 'Electronics'::text) OR (category = 'Toys'::text)))
(5 rows)

-- Verify actual results of LIMIT queries (not just execution path)
SELECT title, rating, price, category
FROM limit_topn_test
WHERE title ILIKE 'Product%'
ORDER BY rating DESC
LIMIT 5;
   title    |       rating       |      price       |  category   
------------+--------------------+------------------+-------------
 Product 5  |  4.977789616859476 | 501.085893295197 | Electronics
 Product 58 | 4.9200515847609925 | 387.078996568841 | Food
 Product 59 |  4.853437459052499 | 828.895824277736 | Toys
 Product 20 |  4.819396214667342 | 783.201356868465 | Electronics
 Product 16 | 4.8175273322333645 | 60.5191979825876 | Books
(5 rows)

-- Clean up
DROP INDEX IF EXISTS limit_topn_idx;
DROP TABLE IF EXISTS limit_topn_test; 
-- Reset parallel workers setting to default
RESET max_parallel_workers_per_gather;
