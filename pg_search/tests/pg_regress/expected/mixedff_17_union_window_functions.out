-- Test UNION operations and window functions with mixed fast fields
-- This test verifies that mixed fast fields work correctly with UNION operations
-- and when used in window functions
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
-- Create test tables
DROP TABLE IF EXISTS union_test_a;
DROP TABLE IF EXISTS union_test_b;
CREATE TABLE union_test_a (
    id SERIAL PRIMARY KEY,
    title TEXT,
    author TEXT,
    rating NUMERIC,
    year INTEGER,
    price FLOAT,
    is_published BOOLEAN
);
CREATE TABLE union_test_b (
    id SERIAL PRIMARY KEY,
    title TEXT,
    author TEXT,
    rating NUMERIC,
    year INTEGER,
    price FLOAT,
    is_published BOOLEAN
);
-- Insert test data
INSERT INTO union_test_a (title, author, rating, year, price, is_published)
SELECT
    'Book A' || i,
    'Author ' || (1 + (i % 10)),
    (3 + random() * 2)::numeric,
    2000 + (i % 22),
    (10 + random() * 40)::float,
    i % 3 != 0
FROM generate_series(1, 50) i;
INSERT INTO union_test_b (title, author, rating, year, price, is_published)
SELECT
    'Book B' || i,
    'Author ' || (1 + (i % 15)),
    (1 + random() * 4)::numeric,
    1980 + (i % 40),
    (15 + random() * 60)::float,
    i % 4 != 0
FROM generate_series(1, 50) i;
-- Create indices with mixed fast fields
DROP INDEX IF EXISTS union_test_a_idx;
DROP INDEX IF EXISTS union_test_b_idx;
CREATE INDEX union_test_a_idx ON union_test_a
USING columnstore (title, author, rating, year, price, is_published)
WITH (type='hnsw');
ERROR:  access method "columnstore" does not exist
CREATE INDEX union_test_b_idx ON union_test_b
USING columnstore (title, author, rating, year, price, is_published)
WITH (type='hnsw');
ERROR:  access method "columnstore" does not exist
-- Test 1: Basic UNION with mixed field types
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, author, rating, price
FROM union_test_a
WHERE title LIKE 'Book A%' AND rating > 4
UNION
SELECT title, author, rating, price
FROM union_test_b
WHERE title LIKE 'Book B%' AND rating > 3
ORDER BY rating DESC, title;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: union_test_a.rating DESC, union_test_a.title
   ->  Unique
         ->  Sort
               Sort Key: union_test_a.title, union_test_a.author, union_test_a.rating, union_test_a.price
               ->  Append
                     ->  Seq Scan on union_test_a
                           Filter: ((title ~~ 'Book A%'::text) AND (rating > '4'::numeric))
                     ->  Seq Scan on union_test_b
                           Filter: ((title ~~ 'Book B%'::text) AND (rating > '3'::numeric))
(10 rows)

-- Test 2: UNION ALL with numeric fields for filtering
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, price, year
FROM union_test_a
WHERE price < 30 AND year > 2010
UNION ALL
SELECT title, price, year
FROM union_test_b
WHERE price < 45 AND year > 2000
ORDER BY price;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort
   Sort Key: union_test_a.price
   ->  Append
         ->  Seq Scan on union_test_a
               Filter: ((price < '30'::double precision) AND (year > 2010))
         ->  Seq Scan on union_test_b
               Filter: ((price < '45'::double precision) AND (year > 2000))
(7 rows)

-- Test 3: Window function - ROW_NUMBER() with mixed fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, author, price, rating,
       ROW_NUMBER() OVER (PARTITION BY author ORDER BY rating DESC) as author_rank
FROM union_test_a
WHERE title LIKE 'Book A%'
ORDER BY author, author_rank;
                       QUERY PLAN                       
--------------------------------------------------------
 Incremental Sort
   Sort Key: author, (row_number() OVER (?))
   Presorted Key: author
   ->  WindowAgg
         ->  Sort
               Sort Key: author, rating DESC
               ->  Seq Scan on union_test_a
                     Filter: (title ~~ 'Book A%'::text)
(8 rows)

-- Test 4: Window function - Running average price by author
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, author, price,
       AVG(price) OVER (PARTITION BY author ORDER BY price) as running_avg_price
FROM union_test_a
WHERE author LIKE 'Author%'
ORDER BY author, price;
                    QUERY PLAN                     
---------------------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: author, price
         ->  Seq Scan on union_test_a
               Filter: (author ~~ 'Author%'::text)
(5 rows)

-- Test 5: Window function with UNION and mixed filters
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
WITH combined_books AS (
    SELECT title, author, rating, 'A' as source
    FROM union_test_a
    WHERE rating > 3.5
    UNION
    SELECT title, author, rating, 'B' as source
    FROM union_test_b
    WHERE rating > 2.5
)
SELECT title, author, rating, source,
       RANK() OVER (PARTITION BY author ORDER BY rating DESC) as author_rank
FROM combined_books
ORDER BY author, author_rank;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Incremental Sort
   Sort Key: combined_books.author, (rank() OVER (?))
   Presorted Key: combined_books.author
   ->  WindowAgg
         ->  Sort
               Sort Key: combined_books.author, combined_books.rating DESC
               ->  Subquery Scan on combined_books
                     ->  HashAggregate
                           Group Key: union_test_a.title, union_test_a.author, union_test_a.rating, ('A'::text)
                           ->  Append
                                 ->  Seq Scan on union_test_a
                                       Filter: (rating > 3.5)
                                 ->  Seq Scan on union_test_b
                                       Filter: (rating > 2.5)
(14 rows)

-- Test 6: UNION with boolean and text fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, author, is_published
FROM union_test_a
WHERE is_published = true AND author LIKE 'Author 1%'
UNION
SELECT title, author, is_published
FROM union_test_b
WHERE is_published = true AND author LIKE 'Author 1%'
ORDER BY author, title;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort
   Sort Key: union_test_a.author, union_test_a.title
   ->  Unique
         ->  Sort
               Sort Key: union_test_a.title, union_test_a.author, union_test_a.is_published
               ->  Append
                     ->  Seq Scan on union_test_a
                           Filter: (is_published AND (author ~~ 'Author 1%'::text))
                     ->  Seq Scan on union_test_b
                           Filter: (is_published AND (author ~~ 'Author 1%'::text))
(10 rows)

-- Test 7: Window functions with multiple partitions and mixed fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT author, 
       AVG(rating) as avg_rating,
       AVG(price) as avg_price,
       COUNT(*) as book_count,
       RANK() OVER (ORDER BY AVG(rating) DESC) as rating_rank,
       RANK() OVER (ORDER BY AVG(price)) as price_rank
FROM union_test_a
WHERE author LIKE 'Author%'
GROUP BY author
ORDER BY avg_rating DESC;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: (avg(rating)) DESC
         ->  WindowAgg
               ->  Sort
                     Sort Key: (avg(price))
                     ->  GroupAggregate
                           Group Key: author
                           ->  Sort
                                 Sort Key: author
                                 ->  Seq Scan on union_test_a
                                       Filter: (author ~~ 'Author%'::text)
(12 rows)

-- Test 8: UNION with INTERSECT and different field types
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
(SELECT author FROM union_test_a WHERE rating > 4.5)
INTERSECT
(SELECT author FROM union_test_b WHERE rating > 4.0);
                 QUERY PLAN                 
--------------------------------------------
 HashSetOp Intersect
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               ->  Seq Scan on union_test_a
                     Filter: (rating > 4.5)
         ->  Subquery Scan on "*SELECT* 2"
               ->  Seq Scan on union_test_b
                     Filter: (rating > 4.0)
(8 rows)

-- Verify actual results of UNION (not just execution method)
SELECT title, author, rating, price
FROM union_test_a
WHERE title LIKE 'Book A1%' AND rating > 4
UNION
SELECT title, author, rating, price
FROM union_test_b
WHERE title LIKE 'Book B1%' AND rating > 3
ORDER BY rating DESC, title
LIMIT 10;
  title   |  author   |      rating      |       price        
----------+-----------+------------------+--------------------
 Book A15 | Author 6  | 4.99931712278151 | 12.457712908145409
 Book A1  | Author 2  | 4.82132902227771 |   37.1589653523803
 Book A12 | Author 3  | 4.70244505292104 |   22.9372733527089
 Book B14 | Author 15 | 4.63085792166747 |  38.45262492350821
 Book A18 | Author 9  | 4.45835174012998 | 14.086425231461659
 Book A17 | Author 8  |  4.3833932734994 | 31.313435083870075
 Book A16 | Author 7  |  4.0865620274685 |   32.7955344520214
 Book B16 | Author 2  | 3.87671027261926 |  41.85069059899179
 Book B18 | Author 4  | 3.86318006809909 | 23.521789982464632
 Book B11 | Author 12 | 3.56346676490133 |  20.31089263945651
(10 rows)

-- Verify window function results
SELECT title, author, price, rating,
       ROW_NUMBER() OVER (PARTITION BY author ORDER BY rating DESC) as author_rank
FROM union_test_a
WHERE author = 'Author 1'
ORDER BY author_rank
LIMIT 5;
  title   |  author  |       price        |      rating      | author_rank 
----------+----------+--------------------+------------------+-------------
 Book A50 | Author 1 |  37.20765944255565 | 4.94939982143199 |           1
 Book A40 | Author 1 |  34.89258559761105 | 4.93910476584184 |           2
 Book A30 | Author 1 | 30.415109519798918 | 4.82586023700851 |           3
 Book A10 | Author 1 | 13.510621537855627 | 3.67052788186093 |           4
 Book A20 | Author 1 | 24.737083890871723 | 3.31826066166799 |           5
(5 rows)

-- Clean up
DROP INDEX IF EXISTS union_test_a_idx;
DROP INDEX IF EXISTS union_test_b_idx;
DROP TABLE IF EXISTS union_test_a;
DROP TABLE IF EXISTS union_test_b; 
-- Reset parallel workers setting to default
RESET max_parallel_workers_per_gather;
