-- Tests score function behavior with mixed fast fields
\i common/mixedff_advanced_setup.sql
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
SET enable_indexscan to OFF;
SET paradedb.enable_mixed_fast_field_exec = true;
-- The `advanced` tests allow any number of columns to be used with fast fields, in order to test
-- more permutations of selected columns.
SET paradedb.mixed_fast_field_exec_column_threshold = 100;
-- Drop any existing test tables from this group
DROP TABLE IF EXISTS documents CASCADE;
DROP TABLE IF EXISTS files CASCADE; 
DROP TABLE IF EXISTS pages CASCADE;
DROP TABLE IF EXISTS mixed_numeric_string_test CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS conversion_test CASCADE;
-- Create test table for mixed fast and non-fast fields
CREATE TABLE mixed_numeric_string_test (
    id TEXT PRIMARY KEY,
    numeric_field1 INTEGER NOT NULL,
    numeric_field2 BIGINT NOT NULL,
    string_field1 TEXT NOT NULL,
    string_field2 TEXT NOT NULL,
    string_field3 TEXT NOT NULL,
    content TEXT
);
CREATE INDEX mixed_test_search ON mixed_numeric_string_test USING bm25 (
    id,
    numeric_field1,
    numeric_field2,
    string_field1,
    string_field2,
    string_field3,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"string_field1": {"tokenizer": {"type": "default"}, "fast": true}, "string_field2": {"tokenizer": {"type": "default"}, "fast": true}, "string_field3": {"tokenizer": {"type": "default"}, "fast": true}, "content": {"tokenizer": {"type": "default"}}}',
    numeric_fields = '{"numeric_field1": {"fast": true}, "numeric_field2": {"fast": true}}'
);
psql:common/mixedff_advanced_setup.sql:43: WARNING:  the `raw` tokenizer is deprecated
-- Insert test data
INSERT INTO mixed_numeric_string_test (id, numeric_field1, numeric_field2, string_field1, string_field2, string_field3, content) VALUES
('mix1', 100, 10000, 'Apple', 'Red', 'Fruit', 'This is a red apple'),
('mix2', 200, 20000, 'Banana', 'Yellow', 'Fruit', 'This is a yellow banana'),
('mix3', 300, 30000, 'Carrot', 'Orange', 'Vegetable', 'This is an orange carrot'),
('mix4', 400, 40000, 'Donut', 'Brown', 'Dessert', 'This is a chocolate donut'),
('mix5', 500, 50000, 'Egg', 'White', 'Protein', 'This is a white egg');
-- Data for window functions and UNION
DO $$
DECLARE
    i INTEGER;
BEGIN
    FOR i IN 1..10 LOOP
        INSERT INTO mixed_numeric_string_test (
            id, 
            numeric_field1, 
            numeric_field2, 
            string_field1, 
            string_field2, 
            string_field3, 
            content
        ) VALUES (
            'window' || i,
            (i * 10),
            (i * 100),
            'Group' || (i % 3),
            'Window' || (i % 2),
            'Test',
            'Window function test with searchable terms'
        );
    END LOOP;
END $$;
-- Set up document tables for advanced features
CREATE TABLE documents (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT,
    parents TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE files (
    id TEXT NOT NULL UNIQUE,
    documentId TEXT NOT NULL,
    title TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_size INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id, documentId),
    FOREIGN KEY (documentId) REFERENCES documents(id)
);
CREATE TABLE pages (
    id TEXT NOT NULL UNIQUE,
    fileId TEXT NOT NULL,
    page_number INTEGER NOT NULL,
    content TEXT NOT NULL,
    metadata JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id, fileId),
    FOREIGN KEY (fileId) REFERENCES files(id)
);
-- Create BM25 indexes
CREATE INDEX documents_search ON documents USING bm25 (
    id,
    title,
    parents,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}, "fast": true}, "parents": {"tokenizer": {"type": "default"}, "fast": true}, "content": {"tokenizer": {"type": "default"}, "fast": true}}'
);
psql:common/mixedff_advanced_setup.sql:119: WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX files_search ON files USING bm25 (
    id,
    documentId,
    title,
    file_path
) WITH (
    key_field = 'id',
    text_fields = '{"documentid": {"tokenizer": {"type": "keyword"}, "fast": true}, "title": {"tokenizer": {"type": "default"}, "fast": true}, "file_path": {"tokenizer": {"type": "default"}, "fast": true}}'
);
psql:common/mixedff_advanced_setup.sql:129: WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX pages_search ON pages USING bm25 (
    id,
    fileId,
    content,
    page_number
) WITH (
    key_field = 'id',
    text_fields = '{"fileid": {"tokenizer": {"type": "keyword"}, "fast": true}, "content": {"tokenizer": {"type": "default"}}}',
    numeric_fields = '{"page_number": {"fast": true}}'
);
psql:common/mixedff_advanced_setup.sql:140: WARNING:  the `raw` tokenizer is deprecated
-- Insert sample data
INSERT INTO documents (id, title, content, parents) VALUES
('doc1', 'Invoice 2023', 'This is an invoice for services rendered in 2023', 'Factures'),
('doc2', 'Receipt 2023', 'This is a receipt for payment received in 2023', 'Factures'),
('doc3', 'Contract 2023', 'This is a contract for services in 2023', 'Contracts');
INSERT INTO files (id, documentId, title, file_path, file_size) VALUES
('file1', 'doc1', 'Invoice PDF', '/invoices/2023.pdf', 1024),
('file2', 'doc1', 'Invoice Receipt', '/invoices/2023_receipt.pdf', 512),
('file3', 'doc2', 'Receipt', '/receipts/2023.pdf', 256),
('file4', 'doc3', 'Contract Document', '/contracts/2023.pdf', 2048);
INSERT INTO pages (id, fileId, page_number, content) VALUES
('page1', 'file1', 1, 'Page 1 of Invoice PDF with Socienty General details'),
('page2', 'file1', 2, 'Page 2 of Invoice PDF with payment information'),
('page3', 'file2', 1, 'Page 1 of Invoice Receipt with bank details'),
('page4', 'file3', 1, 'Page 1 of Receipt with Socienty General information'),
('page5', 'file3', 2, 'Page 2 of Receipt with transaction ID'),
('page6', 'file4', 1, 'Page 1 of Contract Document with terms and conditions');
-- Create recursive CTE test data
CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    parent_id INTEGER REFERENCES categories(id)
);
CREATE INDEX category_search ON categories USING bm25 (
    id,
    name,
    description
) WITH (
    key_field = 'id',
    text_fields = '{"name": {"tokenizer": {"type": "default"}, "fast": true}, "description": {"tokenizer": {"type": "default"}, "fast": true}}'
);
INSERT INTO categories (name, description, parent_id) VALUES
('Electronics', 'Electronic devices and accessories', NULL),
('Computers', 'Desktop and laptop computers', 1),
('Smartphones', 'Mobile phones and accessories', 1),
('Clothing', 'Apparel and fashion items', NULL),
('Men''s Clothing', 'Clothing for men', 4),
('Women''s Clothing', 'Clothing for women', 4),
('Food', 'Edible products', NULL),
('Dairy', 'Milk and dairy products', 7),
('Bakery', 'Bread and baked goods', 7);
-- Create products for multi-index search
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    category_id INTEGER REFERENCES categories(id),
    price FLOAT NOT NULL
);
CREATE INDEX product_search ON products USING bm25 (
    id,
    name,
    category_id,
    price
) WITH (
    key_field = 'id',
    text_fields = '{"name": {"tokenizer": {"type": "default"}, "fast": true}}',
    numeric_fields = '{"category_id": {"fast": true}, "price": {"fast": true}}'
);
INSERT INTO products (name, category_id, price) VALUES
('Laptop Pro', 2, 1299.99),
('Smartphone X', 3, 899.99),
('Men''s Shirt', 5, 49.99),
('Women''s Dress', 6, 199.99),
('Milk Carton', 8, 3.99),
('Bread Loaf', 9, 5.99);
-- Create table for type conversion testing
CREATE TABLE conversion_test (
    id TEXT PRIMARY KEY,
    smallint_field SMALLINT,
    integer_field INTEGER,
    bigint_field BIGINT,
    numeric_field FLOAT,
    real_field REAL,
    double_field DOUBLE PRECISION,
    bool_from_int BOOLEAN,
    timestamp_field TIMESTAMP,
    content TEXT
);
CREATE INDEX conversion_search ON conversion_test USING bm25 (
    id, 
    smallint_field, 
    integer_field, 
    bigint_field, 
    numeric_field, 
    real_field, 
    double_field, 
    bool_from_int,
    timestamp_field,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"content": {"tokenizer": {"type": "default"}}}',
    numeric_fields = '{
        "smallint_field": {"fast": true}, 
        "integer_field": {"fast": true}, 
        "bigint_field": {"fast": true}, 
        "numeric_field": {"fast": true}, 
        "real_field": {"fast": true}, 
        "double_field": {"fast": true}
    }',
    boolean_fields = '{"bool_from_int": {"fast": true}}'
);
psql:common/mixedff_advanced_setup.sql:254: WARNING:  the `raw` tokenizer is deprecated
INSERT INTO conversion_test VALUES
('conv1', 32767, 2147483647, 9223372036854775807, 9999999.99, 3.402e38, 1.7976931348623157e308, true, '1988-04-29', 'conversion test'),
('conv2', -32768, -2147483648, -9223372036854775808, -9999999.99, -3.402e38, -1.7976931348623157e308, false, '1999-12-31', 'conversion test'),
('conv3', 0, 0, 0, 0.0, 0.0, 0.0, false, '2000-01-01', 'conversion test');
-- Add a product with a distinct string for testing
INSERT INTO mixed_numeric_string_test (id, numeric_field1, numeric_field2, string_field1, string_field2, string_field3, content) VALUES
('unique1', 42, 4242, 'Unique Product Z', 'Test', 'Item', 'This is a uniqueproductZ for testing mixed fields'); 
-- Create test tables
DROP TABLE IF EXISTS union_test_a;
DROP TABLE IF EXISTS union_test_b;
CREATE TABLE union_test_a (
    id SERIAL PRIMARY KEY,
    title TEXT,
    author TEXT,
    rating FLOAT,
    year INTEGER,
    price FLOAT,
    is_published BOOLEAN
);
CREATE TABLE union_test_b (
    id SERIAL PRIMARY KEY,
    title TEXT,
    author TEXT,
    rating FLOAT,
    year INTEGER,
    price FLOAT,
    is_published BOOLEAN
);
-- Insert test data with deterministic values
INSERT INTO union_test_a (title, author, rating, year, price, is_published)
SELECT
    'Book A' || i,
    'Author ' || (1 + (i % 10)),
    (3 + (i % 3))::float,  -- Ratings from 3 to 5
    2000 + (i % 22),
    (10 + (i * 5))::float,   -- Deterministic prices
    i % 3 != 0               -- Deterministic boolean pattern
FROM generate_series(1, 50) i;
INSERT INTO union_test_b (title, author, rating, year, price, is_published)
SELECT
    'Book B' || i,
    'Author ' || (1 + (i % 15)),
    (1 + (i % 5))::float,  -- Ratings from 1 to 5
    1980 + (i % 40),
    (15 + (i * 3))::float,   -- Deterministic prices
    i % 4 != 0               -- Deterministic boolean pattern
FROM generate_series(1, 50) i;
-- Create indices with mixed fast fields
DROP INDEX IF EXISTS union_test_a_idx;
DROP INDEX IF EXISTS union_test_b_idx;
CREATE INDEX union_test_a_idx ON union_test_a
USING bm25 (id, title, author, rating, year, price, is_published)
WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}, "fast": true}, "author": {"tokenizer": {"type": "default"}, "fast": true}}',
    numeric_fields = '{"rating": {"fast": true}, "year": {"fast": true}, "price": {"fast": true}}',
    boolean_fields = '{"is_published": {"fast": true}}'
);
CREATE INDEX union_test_b_idx ON union_test_b
USING bm25 (id, title, author, rating, year, price, is_published)
WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}, "fast": true}, "author": {"tokenizer": {"type": "default"}, "fast": true}}',
    numeric_fields = '{"rating": {"fast": true}, "year": {"fast": true}, "price": {"fast": true}}',
    boolean_fields = '{"is_published": {"fast": true}}'
);
\echo 'Test: Score function behavior'
Test: Score function behavior
-- Create test table with mixed field types
DROP TABLE IF EXISTS score_test;
CREATE TABLE score_test (
    id SERIAL PRIMARY KEY,
    title TEXT,
    content TEXT,
    author TEXT,
    rating INTEGER,
    views FLOAT,
    published_date DATE,
    is_featured BOOLEAN
);
-- Insert test data with deterministic values
INSERT INTO score_test (title, content, author, rating, views, published_date, is_featured)
SELECT
    'Post ' || i,
    'This is content for post ' || i || '. It contains some searchable text and keywords like technology, science, research, and development.',
    'Author ' || (1 + (i % 5)),
    (1 + (i % 5)),
    (100 * i)::float,  -- Deterministic view counts
    '1988-04-29'::date + (i % 365) * '1 day'::interval,  -- Deterministic dates
    i % 7 = 0  -- Deterministic featured pattern
FROM generate_series(1, 100) i;
-- Add some specific posts for testing
INSERT INTO score_test (title, content, author, rating, views, published_date, is_featured)
VALUES
    ('Special Technology Post', 'This post is all about technology and innovative research.', 'Author Expert', 5, 9999, '2023-06-15', true),
    ('Advanced Science Research', 'Detailed explanation of scientific breakthroughs and research methodology.', 'Author Expert', 5, 8888, '2023-07-20', true),
    ('Technology Trends Analysis', 'Analysis of current and future technology trends and developments.', 'Author Expert', 4, 7777, '2023-08-10', true);
-- Create search index with mixed fast fields
DROP INDEX IF EXISTS score_test_idx;
CREATE INDEX score_test_idx ON score_test
USING bm25 (id, title, content, author, rating, views, is_featured)
WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}, "fast": true}, "content": {"tokenizer": {"type": "default"}}, "author": {"tokenizer": {"type": "default"}, "fast": true}}',
    numeric_fields = '{"rating": {"fast": true}, "views": {"fast": true}}',
    boolean_fields = '{"is_featured": {"fast": true}}'
);
-- Test 1: Basic score function with text field
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, paradedb.score(id), rating
FROM score_test
WHERE content @@@ 'technology'
ORDER BY title, paradedb.score(id), rating DESC
LIMIT 10;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: title, (paradedb.score(id)), rating DESC
         ->  Custom Scan (ParadeDB Scan) on score_test
               Table: score_test
               Index: score_test_idx
               Exec Method: NormalScanExecState
               Scores: true
                  Top N Limit: 10
               Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"technology","lenient":null,"conjunction_mode":null}}}}
(10 rows)

SELECT title, paradedb.score(id), rating
FROM score_test
WHERE content @@@ 'technology'
ORDER BY title, paradedb.score(id), rating DESC
LIMIT 10;
  title   |    score     | rating 
----------+--------------+--------
 Post 1   | 0.0144330505 |      2
 Post 10  | 0.0144330505 |      1
 Post 100 | 0.0144330505 |      1
 Post 11  | 0.0144330505 |      2
 Post 12  | 0.0144330505 |      3
 Post 13  | 0.0144330505 |      4
 Post 14  | 0.0144330505 |      5
 Post 15  | 0.0144330505 |      1
 Post 16  | 0.0144330505 |      2
 Post 17  | 0.0144330505 |      3
(10 rows)

-- Test 2: Score function with mixed field types in selection
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, author, rating, views, paradedb.score(id)
FROM score_test
WHERE content @@@ 'research'
ORDER BY title, author, rating, views, paradedb.score(id) DESC
LIMIT 5;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: title, author, rating, views, (paradedb.score(id)) DESC
         ->  Custom Scan (ParadeDB Scan) on score_test
               Table: score_test
               Index: score_test_idx
               Exec Method: NormalScanExecState
               Scores: true
                  Top N Limit: 5
               Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"research","lenient":null,"conjunction_mode":null}}}}
(10 rows)

SELECT title, author, rating, views, paradedb.score(id)
FROM score_test
WHERE content @@@ 'research'
ORDER BY title, author, rating, views, paradedb.score(id) DESC
LIMIT 5;
           title           |    author     | rating | views |    score     
---------------------------+---------------+--------+-------+--------------
 Advanced Science Research | Author Expert |      5 |  8888 |  0.018967897
 Post 1                    | Author 2      |      2 |   100 | 0.0144330505
 Post 10                   | Author 1      |      1 |  1000 | 0.0144330505
 Post 100                  | Author 1      |      1 | 10000 | 0.0144330505
 Post 11                   | Author 2      |      2 |  1100 | 0.0144330505
(5 rows)

-- Test 3: Score function with multiple conditions on different field types
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, author, paradedb.score(id)
FROM score_test
WHERE content @@@ 'technology' AND rating >= 4 AND is_featured = true
ORDER BY title, author, paradedb.score(id) DESC;
                                                                                                                                                                      QUERY PLAN                                                                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: title, author, (paradedb.score(id)) DESC
   ->  Custom Scan (ParadeDB Scan) on score_test
         Table: score_test
         Index: score_test_idx
         Exec Method: MixedFastFieldExecState
         Fast Fields: author, title, id
         String Fast Fields: author, title
         Numeric Fast Fields: id
         Scores: true
         Tantivy Query: {"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"technology","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"included":4},"upper_bound":null,"is_datetime":false}},{"term":{"field":"is_featured","value":true,"is_datetime":false}}]}}
(11 rows)

SELECT title, author, paradedb.score(id)
FROM score_test
WHERE content @@@ 'technology' AND rating >= 4 AND is_featured = true
ORDER BY title, author, paradedb.score(id) DESC;
           title            |    author     |   score   
----------------------------+---------------+-----------
 Post 14                    | Author 5      | 2.7966232
 Post 28                    | Author 4      | 2.7966232
 Post 49                    | Author 5      | 2.7966232
 Post 63                    | Author 4      | 2.7966232
 Post 84                    | Author 5      | 2.7966232
 Post 98                    | Author 4      | 2.7966232
 Special Technology Post    | Author Expert | 2.8006313
 Technology Trends Analysis | Author Expert | 2.8006313
(8 rows)

-- Test 4: Using score in a CTE with mixed fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
WITH scored_posts AS (
    SELECT title, author, rating, paradedb.score(id) as relevance
    FROM score_test
    WHERE content @@@ 'science OR research'
)
SELECT title, author, rating, relevance
FROM scored_posts
WHERE rating > 3
ORDER BY title, author, relevance DESC
LIMIT 10;
                                                                                                                                             QUERY PLAN                                                                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: score_test.title, score_test.author, (paradedb.score(score_test.id)) DESC
         ->  Custom Scan (ParadeDB Scan) on score_test
               Table: score_test
               Index: score_test_idx
               Exec Method: NormalScanExecState
               Scores: true
                  Top N Limit: 10
               Tantivy Query: {"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"science OR research","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"excluded":3},"upper_bound":null,"is_datetime":false}}]}}
(10 rows)

WITH scored_posts AS (
    SELECT title, author, rating, paradedb.score(id) as relevance
    FROM score_test
    WHERE content @@@ 'science OR research'
)
SELECT title, author, rating, relevance
FROM scored_posts
WHERE rating > 3
ORDER BY title, author, relevance DESC
LIMIT 10;
           title           |    author     | rating | relevance 
---------------------------+---------------+--------+-----------
 Advanced Science Research | Author Expert |      5 | 1.0189679
 Post 13                   | Author 4      |      4 | 1.0484424
 Post 14                   | Author 5      |      5 | 1.0484424
 Post 18                   | Author 4      |      4 | 1.0484424
 Post 19                   | Author 5      |      5 | 1.0484424
 Post 23                   | Author 4      |      4 | 1.0484424
 Post 24                   | Author 5      |      5 | 1.0484424
 Post 28                   | Author 4      |      4 | 1.0484424
 Post 29                   | Author 5      |      5 | 1.0484424
 Post 3                    | Author 4      |      4 | 1.0484424
(10 rows)

-- Test 5: Score function in subquery with mixed fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT sp.title, sp.author, sp.relevance
FROM (
    SELECT title, author, paradedb.score(id) as relevance
    FROM score_test
    WHERE content @@@ 'technology' AND rating > 3
) sp
WHERE sp.relevance > 0.5
ORDER BY sp.title, sp.author, sp.relevance DESC;
                                                                                                                                                                        QUERY PLAN                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: score_test.title, score_test.author, (paradedb.score(score_test.id)) DESC
   ->  Custom Scan (ParadeDB Scan) on score_test
         Table: score_test
         Index: score_test_idx
         Exec Method: MixedFastFieldExecState
         Fast Fields: author, title, id
         String Fast Fields: author, title
         Numeric Fast Fields: id
         Scores: true
         Tantivy Query: {"score_filter":{"bounds":[[{"Excluded":0.5},"Unbounded"]],"query":{"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"technology","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"excluded":3},"upper_bound":null,"is_datetime":false}}]}}}}
(11 rows)

SELECT sp.title, sp.author, sp.relevance
FROM (
    SELECT title, author, paradedb.score(id) as relevance
    FROM score_test
    WHERE content @@@ 'technology' AND rating > 3
) sp
WHERE sp.relevance > 0.5
ORDER BY sp.title, sp.author, sp.relevance DESC;
           title            |    author     | relevance 
----------------------------+---------------+-----------
 Post 13                    | Author 4      |  1.014433
 Post 14                    | Author 5      |  1.014433
 Post 18                    | Author 4      |  1.014433
 Post 19                    | Author 5      |  1.014433
 Post 23                    | Author 4      |  1.014433
 Post 24                    | Author 5      |  1.014433
 Post 28                    | Author 4      |  1.014433
 Post 29                    | Author 5      |  1.014433
 Post 3                     | Author 4      |  1.014433
 Post 33                    | Author 4      |  1.014433
 Post 34                    | Author 5      |  1.014433
 Post 38                    | Author 4      |  1.014433
 Post 39                    | Author 5      |  1.014433
 Post 4                     | Author 5      |  1.014433
 Post 43                    | Author 4      |  1.014433
 Post 44                    | Author 5      |  1.014433
 Post 48                    | Author 4      |  1.014433
 Post 49                    | Author 5      |  1.014433
 Post 53                    | Author 4      |  1.014433
 Post 54                    | Author 5      |  1.014433
 Post 58                    | Author 4      |  1.014433
 Post 59                    | Author 5      |  1.014433
 Post 63                    | Author 4      |  1.014433
 Post 64                    | Author 5      |  1.014433
 Post 68                    | Author 4      |  1.014433
 Post 69                    | Author 5      |  1.014433
 Post 73                    | Author 4      |  1.014433
 Post 74                    | Author 5      |  1.014433
 Post 78                    | Author 4      |  1.014433
 Post 79                    | Author 5      |  1.014433
 Post 8                     | Author 4      |  1.014433
 Post 83                    | Author 4      |  1.014433
 Post 84                    | Author 5      |  1.014433
 Post 88                    | Author 4      |  1.014433
 Post 89                    | Author 5      |  1.014433
 Post 9                     | Author 5      |  1.014433
 Post 93                    | Author 4      |  1.014433
 Post 94                    | Author 5      |  1.014433
 Post 98                    | Author 4      |  1.014433
 Post 99                    | Author 5      |  1.014433
 Special Technology Post    | Author Expert | 1.0184412
 Technology Trends Analysis | Author Expert | 1.0184412
(42 rows)

-- Test 6: Score function with UNION
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT title, author, paradedb.score(id) as relevance
FROM score_test
WHERE content @@@ 'technology'
UNION ALL
SELECT title, author, paradedb.score(id) as relevance
FROM score_test
WHERE content @@@ 'science' AND NOT (title @@@ 'technology')
ORDER BY title, author, relevance DESC
LIMIT 10;
                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: score_test.title, score_test.author, (paradedb.score(score_test.id)) DESC
         ->  Append
               ->  Custom Scan (ParadeDB Scan) on score_test
                     Table: score_test
                     Index: score_test_idx
                     Exec Method: MixedFastFieldExecState
                     Fast Fields: author, title, id
                     String Fast Fields: author, title
                     Numeric Fast Fields: id
                     Scores: true
                     Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"technology","lenient":null,"conjunction_mode":null}}}}
               ->  Custom Scan (ParadeDB Scan) on score_test score_test_1
                     Table: score_test
                     Index: score_test_idx
                     Exec Method: MixedFastFieldExecState
                     Fast Fields: author, title, id
                     String Fast Fields: author, title
                     Numeric Fast Fields: id
                     Scores: true
                     Tantivy Query: {"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"science","lenient":null,"conjunction_mode":null}}}},{"boolean":{"must":["all"],"must_not":[{"with_index":{"query":{"parse_with_field":{"field":"title","query_string":"technology","lenient":null,"conjunction_mode":null}}}}]}}]}}
(22 rows)

SELECT title, author, paradedb.score(id) as relevance
FROM score_test
WHERE content @@@ 'technology'
UNION ALL
SELECT title, author, paradedb.score(id) as relevance
FROM score_test
WHERE content @@@ 'science' AND NOT (title @@@ 'technology')
ORDER BY title, author, relevance DESC
LIMIT 10;
  title   |  author  |  relevance   
----------+----------+--------------
 Post 1   | Author 2 |   0.03400928
 Post 1   | Author 2 | 0.0144330505
 Post 10  | Author 1 |   0.03400928
 Post 10  | Author 1 | 0.0144330505
 Post 100 | Author 1 |   0.03400928
 Post 100 | Author 1 | 0.0144330505
 Post 11  | Author 2 |   0.03400928
 Post 11  | Author 2 | 0.0144330505
 Post 12  | Author 3 |   0.03400928
 Post 12  | Author 3 | 0.0144330505
(10 rows)

-- Test 7: Score function with JOIN using mixed fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT a.title, a.author, a.rating, a.score, b.title as related_title
FROM (
    SELECT title, author, rating, paradedb.score(id) as score
    FROM score_test
    WHERE content @@@ 'technology'
    ORDER BY score DESC
    LIMIT 5
) a
JOIN (
    SELECT title, author
    FROM score_test
    WHERE author IN (SELECT author FROM score_test WHERE content @@@ 'technology')
) b ON a.author = b.author AND a.title <> b.title
ORDER BY a.title, a.author, a.rating, a.score, b.title;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: score_test_2.title, score_test_2.author, score_test_2.rating, (paradedb.score(score_test_2.id)), score_test.title
   ->  Hash Semi Join
         Hash Cond: (score_test.author = score_test_1.author)
         ->  Hash Join
               Hash Cond: (score_test.author = score_test_2.author)
               Join Filter: (score_test_2.title <> score_test.title)
               ->  Seq Scan on score_test
               ->  Hash
                     ->  Limit
                           ->  Custom Scan (ParadeDB Scan) on score_test score_test_2
                                 Table: score_test
                                 Index: score_test_idx
                                 Exec Method: TopNScanExecState
                                 Scores: true
                                    Sort Field: paradedb.score()
                                    Sort Direction: desc
                                    Top N Limit: 5
                                 Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"technology","lenient":null,"conjunction_mode":null}}}}
         ->  Hash
               ->  Custom Scan (ParadeDB Scan) on score_test score_test_1
                     Table: score_test
                     Index: score_test_idx
                     Exec Method: StringFastFieldExecState
                     Fast Fields: author
                     String Agg Field: author
                     Scores: false
                        Sort Field: title
                        Sort Direction: asc
                     Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"technology","lenient":null,"conjunction_mode":null}}}}
(30 rows)

SELECT a.title, a.author, a.rating, a.score, b.title as related_title
FROM (
    SELECT title, author, rating, paradedb.score(id) as score
    FROM score_test
    WHERE content @@@ 'technology'
    ORDER BY score DESC
    LIMIT 5
) a
JOIN (
    SELECT title, author
    FROM score_test
    WHERE author IN (SELECT author FROM score_test WHERE content @@@ 'technology')
) b ON a.author = b.author AND a.title <> b.title
ORDER BY a.title, a.author, a.rating, a.score, b.title;
           title            |    author     | rating |    score     |       related_title        
----------------------------+---------------+--------+--------------+----------------------------
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 11
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 16
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 21
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 26
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 31
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 36
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 41
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 46
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 51
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 56
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 6
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 61
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 66
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 71
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 76
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 81
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 86
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 91
 Post 1                     | Author 2      |      2 | 0.0144330505 | Post 96
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 12
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 17
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 22
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 27
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 32
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 37
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 42
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 47
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 52
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 57
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 62
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 67
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 7
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 72
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 77
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 82
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 87
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 92
 Post 2                     | Author 3      |      3 | 0.0144330505 | Post 97
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 13
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 18
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 23
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 28
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 33
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 38
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 43
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 48
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 53
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 58
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 63
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 68
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 73
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 78
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 8
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 83
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 88
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 93
 Post 3                     | Author 4      |      4 | 0.0144330505 | Post 98
 Special Technology Post    | Author Expert |      5 |  0.018441152 | Advanced Science Research
 Special Technology Post    | Author Expert |      5 |  0.018441152 | Technology Trends Analysis
 Technology Trends Analysis | Author Expert |      4 |  0.018441152 | Advanced Science Research
 Technology Trends Analysis | Author Expert |      4 |  0.018441152 | Special Technology Post
(61 rows)

-- Test 8: Score function with CASE expression and mixed fields
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT 
    title, 
    author,
    rating,
    CASE 
        WHEN paradedb.score(id) > 0.8 THEN 'High Relevance'
        WHEN paradedb.score(id) > 0.5 THEN 'Medium Relevance'
        ELSE 'Low Relevance'
    END as relevance_category
FROM score_test
WHERE content @@@ 'research OR development' AND rating > 4
ORDER BY title, author, paradedb.score(id) DESC;
                                                                                                                                            QUERY PLAN                                                                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: title, author, (paradedb.score(id)) DESC
   ->  Custom Scan (ParadeDB Scan) on score_test
         Table: score_test
         Index: score_test_idx
         Exec Method: MixedFastFieldExecState
         Fast Fields: author, title, id, rating
         String Fast Fields: author, title
         Numeric Fast Fields: id, rating
         Scores: true
         Tantivy Query: {"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"research OR development","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"excluded":4},"upper_bound":null,"is_datetime":false}}]}}
(11 rows)

SELECT 
    title, 
    author,
    rating,
    CASE 
        WHEN paradedb.score(id) > 0.8 THEN 'High Relevance'
        WHEN paradedb.score(id) > 0.5 THEN 'Medium Relevance'
        ELSE 'Low Relevance'
    END as relevance_category
FROM score_test
WHERE content @@@ 'research OR development' AND rating > 4
ORDER BY title, author, paradedb.score(id) DESC;
           title           |    author     | rating | relevance_category 
---------------------------+---------------+--------+--------------------
 Advanced Science Research | Author Expert |      5 | High Relevance
 Post 14                   | Author 5      |      5 | High Relevance
 Post 19                   | Author 5      |      5 | High Relevance
 Post 24                   | Author 5      |      5 | High Relevance
 Post 29                   | Author 5      |      5 | High Relevance
 Post 34                   | Author 5      |      5 | High Relevance
 Post 39                   | Author 5      |      5 | High Relevance
 Post 4                    | Author 5      |      5 | High Relevance
 Post 44                   | Author 5      |      5 | High Relevance
 Post 49                   | Author 5      |      5 | High Relevance
 Post 54                   | Author 5      |      5 | High Relevance
 Post 59                   | Author 5      |      5 | High Relevance
 Post 64                   | Author 5      |      5 | High Relevance
 Post 69                   | Author 5      |      5 | High Relevance
 Post 74                   | Author 5      |      5 | High Relevance
 Post 79                   | Author 5      |      5 | High Relevance
 Post 84                   | Author 5      |      5 | High Relevance
 Post 89                   | Author 5      |      5 | High Relevance
 Post 9                    | Author 5      |      5 | High Relevance
 Post 94                   | Author 5      |      5 | High Relevance
 Post 99                   | Author 5      |      5 | High Relevance
 Special Technology Post   | Author Expert |      5 | High Relevance
(22 rows)

-- Verify actual results of score function (not just execution method)
SELECT title, author, rating, paradedb.score(id) as relevance
FROM score_test
WHERE content @@@ 'technology' AND rating > 4
ORDER BY title, author, relevance DESC;
          title          |    author     | rating | relevance 
-------------------------+---------------+--------+-----------
 Post 14                 | Author 5      |      5 |  1.014433
 Post 19                 | Author 5      |      5 |  1.014433
 Post 24                 | Author 5      |      5 |  1.014433
 Post 29                 | Author 5      |      5 |  1.014433
 Post 34                 | Author 5      |      5 |  1.014433
 Post 39                 | Author 5      |      5 |  1.014433
 Post 4                  | Author 5      |      5 |  1.014433
 Post 44                 | Author 5      |      5 |  1.014433
 Post 49                 | Author 5      |      5 |  1.014433
 Post 54                 | Author 5      |      5 |  1.014433
 Post 59                 | Author 5      |      5 |  1.014433
 Post 64                 | Author 5      |      5 |  1.014433
 Post 69                 | Author 5      |      5 |  1.014433
 Post 74                 | Author 5      |      5 |  1.014433
 Post 79                 | Author 5      |      5 |  1.014433
 Post 84                 | Author 5      |      5 |  1.014433
 Post 89                 | Author 5      |      5 |  1.014433
 Post 9                  | Author 5      |      5 |  1.014433
 Post 94                 | Author 5      |      5 |  1.014433
 Post 99                 | Author 5      |      5 |  1.014433
 Special Technology Post | Author Expert |      5 | 1.0184412
(21 rows)

\i common/mixedff_advanced_cleanup.sql
-- Cleanup for advanced features tests (13-21)
-- Drop the tables used in these tests (in reverse order to handle dependencies)
DROP TABLE IF EXISTS conversion_test CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS pages CASCADE;
DROP TABLE IF EXISTS files CASCADE;
DROP TABLE IF EXISTS documents CASCADE;
DROP TABLE IF EXISTS mixed_numeric_string_test CASCADE;
DROP INDEX IF EXISTS union_test_a_idx CASCADE;
DROP INDEX IF EXISTS union_test_b_idx CASCADE;
DROP TABLE IF EXISTS union_test_a CASCADE;
DROP TABLE IF EXISTS union_test_b CASCADE; 
-- Reset parallel workers setting to default
RESET max_parallel_workers_per_gather;
RESET enable_indexscan;
RESET paradedb.enable_mixed_fast_field_exec;
RESET paradedb.mixed_fast_field_exec_column_threshold;
SELECT 'Advanced features tests cleanup complete' AS status; 
                  status                  
------------------------------------------
 Advanced features tests cleanup complete
(1 row)

