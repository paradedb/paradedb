-- Tests that MixedFF is used for UUIDs in the key field or in other fields.
\i common/common_setup.sql
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
SET enable_indexscan to OFF;
SET paradedb.enable_mixed_fast_field_exec = true;
\echo 'Test: Mixed field types in the same query'
Test: Mixed field types in the same query
DROP TABLE IF EXISTS products CASCADE;
CREATE TABLE products
(
    uuid_key  UUID NOT NULL PRIMARY KEY,
    uuid  UUID NOT NULL,
    name  TEXT
);
INSERT into products
    (uuid_key, uuid, name)
VALUES
    (gen_random_uuid(), gen_random_uuid(), 'alice'),
    (gen_random_uuid(), gen_random_uuid(), 'bob'),
    (gen_random_uuid(), gen_random_uuid(), 'bob'),
    (gen_random_uuid(), gen_random_uuid(), 'cloe'),
    (gen_random_uuid(), gen_random_uuid(), 'sally');
CREATE INDEX idxproducts ON products USING bm25 (uuid_key, uuid, name)
WITH (
    key_field = 'uuid_key',
    text_fields = '{
        "uuid": { "tokenizer": { "type": "keyword" }, "fast": true },
        "name": { "tokenizer": { "type": "keyword" }, "fast": true }
    }'
);
WARNING:  the `raw` tokenizer is deprecated
-- Confirm that the UUID key_field is fast and gets MixedFF.
SELECT name FROM products WHERE name @@@ 'bob' ORDER BY uuid_key;
 name 
------
 bob
 bob
(2 rows)

EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT name FROM products WHERE name @@@ 'bob' ORDER BY uuid_key;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: uuid_key
   ->  Custom Scan (ParadeDB Scan) on products
         Table: products
         Index: idxproducts
         Exec Method: MixedFastFieldExecState
         Fast Fields: name, uuid_key
         String Fast Fields: name, uuid_key
         Scores: false
         Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"name","query_string":"bob","lenient":null,"conjunction_mode":null}}}}
(10 rows)

-- And that non-key UUID fields do too.
SELECT name FROM products WHERE name @@@ 'bob' ORDER BY uuid;
 name 
------
 bob
 bob
(2 rows)

EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT name FROM products WHERE name @@@ 'bob' ORDER BY uuid;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: uuid
   ->  Custom Scan (ParadeDB Scan) on products
         Table: products
         Index: idxproducts
         Exec Method: MixedFastFieldExecState
         Fast Fields: name, uuid
         String Fast Fields: name, uuid
         Scores: false
         Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"name","query_string":"bob","lenient":null,"conjunction_mode":null}}}}
(10 rows)

\i common/common_cleanup.sql
-- Reset parallel workers setting to default
RESET max_parallel_workers_per_gather;
RESET enable_indexscan;
RESET paradedb.enable_mixed_fast_field_exec;
SELECT 'Common tests cleanup complete' AS status; 
            status             
-------------------------------
 Common tests cleanup complete
(1 row)

