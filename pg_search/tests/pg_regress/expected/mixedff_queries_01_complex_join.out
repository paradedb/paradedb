-- Tests complex join queries with mixed fields
\i common/mixedff_queries_setup.sql
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
SET enable_indexscan to OFF;
SET paradedb.enable_mixed_fast_field_exec = true;
-- Drop any existing test tables from this group
DROP TABLE IF EXISTS documents CASCADE;
DROP TABLE IF EXISTS files CASCADE;
DROP TABLE IF EXISTS pages CASCADE;
-- Create document tables for testing relational queries
CREATE TABLE documents (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT,
    parents TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE files (
    id TEXT NOT NULL UNIQUE,
    documentId TEXT NOT NULL,
    title TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_size INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id, documentId),
    FOREIGN KEY (documentId) REFERENCES documents(id)
);
CREATE TABLE pages (
    id TEXT NOT NULL UNIQUE,
    fileId TEXT NOT NULL,
    page_number INTEGER NOT NULL,
    content TEXT NOT NULL,
    metadata JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id, fileId),
    FOREIGN KEY (fileId) REFERENCES files(id)
);
-- Create BM25 indexes with fast fields
CREATE INDEX documents_search ON documents USING bm25 (
    id,
    title,
    parents,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}, "fast": true}, "parents": {"tokenizer": {"type": "default"}, "fast": true}, "content": {"tokenizer": {"type": "default"}, "fast": true}}'
);
psql:common/mixedff_queries_setup.sql:53: WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX files_search ON files USING bm25 (
    id,
    documentId,
    title,
    file_path
) WITH (
    key_field = 'id',
    text_fields = '{"documentid": {"tokenizer": {"type": "keyword"}, "fast": true}, "title": {"tokenizer": {"type": "default"}, "fast": true}, "file_path": {"tokenizer": {"type": "default"}, "fast": true}}'
);
psql:common/mixedff_queries_setup.sql:63: WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX pages_search ON pages USING bm25 (
    id,
    fileId,
    content,
    page_number
) WITH (
    key_field = 'id',
    text_fields = '{"fileid": {"tokenizer": {"type": "keyword"}, "fast": true}, "content": {"tokenizer": {"type": "default"}}}',
    numeric_fields = '{"page_number": {"fast": true}}'
);
psql:common/mixedff_queries_setup.sql:74: WARNING:  the `raw` tokenizer is deprecated
-- Insert sample data for documents
INSERT INTO documents (id, title, content, parents) VALUES
('doc1', 'Invoice 2023', 'This is an invoice for services rendered in 2023', 'Factures'),
('doc2', 'Receipt 2023', 'This is a receipt for payment received in 2023', 'Factures'),
('doc3', 'Contract 2023', 'This is a contract for services in 2023', 'Contracts');
-- Insert sample data for files
INSERT INTO files (id, documentId, title, file_path, file_size) VALUES
('file1', 'doc1', 'Invoice PDF', '/invoices/2023.pdf', 1024),
('file2', 'doc1', 'Invoice Receipt', '/invoices/2023_receipt.pdf', 512),
('file3', 'doc2', 'Receipt', '/receipts/2023.pdf', 256),
('file4', 'doc3', 'Contract Document', '/contracts/2023.pdf', 2048);
-- Insert sample data for pages
INSERT INTO pages (id, fileId, page_number, content) VALUES
('page1', 'file1', 1, 'Page 1 of Invoice PDF with Socienty General details'),
('page2', 'file1', 2, 'Page 2 of Invoice PDF with payment information'),
('page3', 'file2', 1, 'Page 1 of Invoice Receipt with bank details'),
('page4', 'file3', 1, 'Page 1 of Receipt with Socienty General information'),
('page5', 'file3', 2, 'Page 2 of Receipt with transaction ID'),
('page6', 'file4', 1, 'Page 1 of Contract Document with terms and conditions');
-- Add data for CTE testing
INSERT INTO documents (id, title, content, parents) VALUES
('doc_cte1', 'CTE Test Doc 1', 'This document tests common table expressions', 'Reports'),
('doc_cte2', 'CTE Test Doc 2', 'Another document for CTE testing', 'Reports');
INSERT INTO files (id, documentId, title, file_path, file_size) VALUES
('file_cte1', 'doc_cte1', 'CTE Test File 1', '/reports/cte1.pdf', 500),
('file_cte2', 'doc_cte1', 'CTE Test File 2', '/reports/cte2.pdf', 600),
('file_cte3', 'doc_cte2', 'CTE Test File 3', '/reports/cte3.pdf', 700);
INSERT INTO pages (id, fileId, page_number, content) VALUES
('page_cte1', 'file_cte1', 1, 'Page 1 with searchable content for CTE testing'),
('page_cte2', 'file_cte1', 2, 'Page 2 with more content for testing'),
('page_cte3', 'file_cte2', 1, 'Another page with test terms to search'),
('page_cte4', 'file_cte3', 1, 'Final test page for CTE testing'); 
\echo 'Test: Complex joins'
Test: Complex joins
\echo 'Test: Complex join with mixed fields'
Test: Complex join with mixed fields
-- Check execution plan
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT d.id, d.parents, f.title, f.file_path, p.fileId, p.page_number
FROM documents d
JOIN files f ON d.id = f.documentId
JOIN pages p ON p.fileId = f.id
WHERE d.parents @@@ 'Factures' AND f.title @@@ 'Receipt' AND p.content @@@ 'Socienty'
ORDER BY d.id, f.id, p.id;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Incremental Sort
   Sort Key: d.id, p.fileid, p.id
   Presorted Key: d.id
   ->  Nested Loop
         Join Filter: (f.id = p.fileid)
         ->  Merge Join
               Merge Cond: (d.id = f.documentid)
               ->  Sort
                     Sort Key: d.id
                     ->  Custom Scan (ParadeDB Scan) on documents d
                           Table: documents
                           Index: documents_search
                           Segment Count: 2
                           Exec Method: MixedFastFieldExecState
                           Fast Fields: id, parents
                           String Fast Fields: id, parents
                           Scores: false
                           Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"parents","query_string":"Factures","lenient":null,"conjunction_mode":null}}}}
               ->  Sort
                     Sort Key: f.documentid
                     ->  Custom Scan (ParadeDB Scan) on files f
                           Table: files
                           Index: files_search
                           Segment Count: 2
                           Exec Method: MixedFastFieldExecState
                           Fast Fields: file_path, id, title
                           String Fast Fields: file_path, id, title
                           Scores: false
                           Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"title","query_string":"Receipt","lenient":null,"conjunction_mode":null}}}}
         ->  Custom Scan (ParadeDB Scan) on pages p
               Table: pages
               Index: pages_search
               Segment Count: 2
               Exec Method: MixedFastFieldExecState
               Fast Fields: fileid, id, page_number
               String Fast Fields: fileid, id
               Numeric Fast Fields: page_number
               Scores: false
               Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"Socienty","lenient":null,"conjunction_mode":null}}}}
(39 rows)

-- Test complex join
SELECT d.id, d.parents, f.title, f.file_path, p.fileId, p.page_number
FROM documents d
JOIN files f ON d.id = f.documentId
JOIN pages p ON p.fileId = f.id
WHERE d.parents @@@ 'Factures' AND f.title @@@ 'Receipt' AND p.content @@@ 'Socienty'
ORDER BY d.id, f.id, p.id;
  id  | parents  |  title  |     file_path      | fileid | page_number 
------+----------+---------+--------------------+--------+-------------
 doc2 | Factures | Receipt | /receipts/2023.pdf | file3  |           1
(1 row)

-- Test complex join with mixed fields
SELECT pages.fileId, pages.page_number, pages.content
FROM documents 
JOIN files ON documents.id = files.documentId
JOIN pages ON pages.fileId = files.id
WHERE documents.parents @@@ 'Factures' AND files.title @@@ 'Receipt' AND pages.content @@@ 'Socienty'
ORDER BY pages.fileId, pages.page_number
LIMIT 10;
 fileid | page_number |                       content                       
--------+-------------+-----------------------------------------------------
 file3  |           1 | Page 1 of Receipt with Socienty General information
(1 row)

EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT pages.fileId, pages.page_number, pages.content
FROM documents 
JOIN files ON documents.id = files.documentId
JOIN pages ON pages.fileId = files.id
WHERE documents.parents @@@ 'Factures' AND files.title @@@ 'Receipt' AND pages.content @@@ 'Socienty'
ORDER BY pages.fileId, pages.page_number
LIMIT 10;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Incremental Sort
         Sort Key: pages.fileid, pages.page_number
         Presorted Key: pages.fileid
         ->  Nested Loop
               Join Filter: (documents.id = files.documentid)
               ->  Merge Join
                     Merge Cond: (files.id = pages.fileid)
                     ->  Sort
                           Sort Key: files.id
                           ->  Custom Scan (ParadeDB Scan) on files
                                 Table: files
                                 Index: files_search
                                 Segment Count: 2
                                 Exec Method: StringFastFieldExecState
                                 Fast Fields: id
                                 String Agg Field: id
                                 Scores: false
                                    Sort Field: id
                                    Sort Direction: asc
                                 Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"title","query_string":"Receipt","lenient":null,"conjunction_mode":null}}}}
                     ->  Sort
                           Sort Key: pages.fileid
                           ->  Custom Scan (ParadeDB Scan) on pages
                                 Table: pages
                                 Index: pages_search
                                 Segment Count: 2
                                 Exec Method: NormalScanExecState
                                 Scores: false
                                 Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"Socienty","lenient":null,"conjunction_mode":null}}}}
               ->  Custom Scan (ParadeDB Scan) on documents
                     Table: documents
                     Index: documents_search
                     Segment Count: 2
                     Exec Method: NormalScanExecState
                     Scores: false
                     Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"parents","query_string":"Factures","lenient":null,"conjunction_mode":null}}}}
(37 rows)

DROP TABLE IF EXISTS pages CASCADE;
CREATE TABLE pages (
    id TEXT NOT NULL UNIQUE,
    fileId TEXT NOT NULL,
    page_number INTEGER NOT NULL,
    content TEXT NOT NULL,
    metadata JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id, fileId),
    FOREIGN KEY (fileId) REFERENCES files(id)
);
DROP INDEX IF EXISTS documents_search CASCADE;
DROP INDEX IF EXISTS files_search CASCADE;
DROP INDEX IF EXISTS pages_search CASCADE;
INSERT INTO documents (id, title, content, parents)
SELECT
  md5(i::text || 'documents')::uuid::text,
  'Invoice 2023',
  'This is an invoice for services rendered in 2023',
  'Factures'
FROM generate_series(1,15000) AS s(i);
INSERT INTO files (id, documentId, title, file_path, file_size)
SELECT
  md5(i::text || 'files')::uuid::text,
  (
    SELECT id
    FROM   documents
    WHERE  id = md5((i % 15000 + 1)::text || 'documents')::uuid::text
  ),
  'Receipt',
  '/files/path',
  15000
FROM generate_series(1,15000) AS s(i);
INSERT INTO pages (id, fileId, page_number, content, metadata)
SELECT
  md5(i::text || 'pages')::uuid::text,
  (
    SELECT id
    FROM   files
    WHERE  id = md5((i % 15000 + 1)::text || 'files')::uuid::text
  ),
  (i % 100 + 1)::int,
  'Socienty',
  '{"color":"red"}'::json
FROM generate_series(1,15000) AS s(i);
-- Create BM25 indexes with fast fields using inline field options
CREATE INDEX documents_search ON documents USING bm25 (
    id,
    title,
    parents,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}, "fast": true}, "parents": {"tokenizer": {"type": "default"}, "fast": true}, "content": {"tokenizer": {"type": "default"}, "fast": true}}'
);
WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX files_search ON files USING bm25 (
    id,
    documentId,
    title,
    file_path
) WITH (
    key_field = 'id',
    text_fields = '{"documentid": {"tokenizer": {"type": "keyword"}, "fast": true}, "title": {"tokenizer": {"type": "default"}, "fast": true}, "file_path": {"tokenizer": {"type": "default"}, "fast": true}}'
);
WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX pages_search ON pages USING bm25 (
    id,
    fileId,
    content,
    page_number
) WITH (
    key_field = 'id',
    text_fields = '{"fileid": {"tokenizer": {"type": "keyword"}, "fast": true}, "content": {"tokenizer": {"type": "default"}, "fast": true}}',
    numeric_fields = '{"page_number": {"fast": true}}'
);
WARNING:  the `raw` tokenizer is deprecated
-- Test complex join with mixed fields
SELECT pages.fileId, pages.page_number, pages.content
FROM documents 
JOIN files ON documents.id = files.documentId
JOIN pages ON pages.fileId = files.id
WHERE documents.parents @@@ 'Factures' AND files.title @@@ 'Receipt' AND pages.content @@@ 'Socienty'
ORDER BY pages.fileId, pages.page_number
LIMIT 10;
                fileid                | page_number | content  
--------------------------------------+-------------+----------
 00013e85-a019-3497-52d2-88612aee8785 |          26 | Socienty
 0001a8fb-7db8-c730-e9ca-dcb343444f85 |          27 | Socienty
 0003b564-3a04-4b80-f553-7f14a280b586 |          56 | Socienty
 0005764e-3e0d-bbf7-6c5f-62c1f834bdaf |          45 | Socienty
 000667aa-d327-bb8d-0b22-fc2ea2e05269 |          89 | Socienty
 000a8eb8-cb5a-38b3-ae3f-c032729b09e8 |          90 | Socienty
 000b9076-ec4f-80d2-97f4-db5ddeb43d3a |          15 | Socienty
 000fcbec-71a3-8c89-a172-0610509a65d7 |          69 | Socienty
 00109ad0-e8c7-8790-c3f4-6b177f5aca3f |          73 | Socienty
 0013e169-39dc-6f5c-c28b-07ea8eee3f2f |          19 | Socienty
(10 rows)

EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT pages.fileId, pages.page_number, pages.content
FROM documents 
JOIN files ON documents.id = files.documentId
JOIN pages ON pages.fileId = files.id
WHERE documents.parents @@@ 'Factures' AND files.title @@@ 'Receipt' AND pages.content @@@ 'Socienty'
LIMIT 10;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Hash Join
         Hash Cond: (documents.id = files.documentid)
         ->  Custom Scan (ParadeDB Scan) on documents
               Table: documents
               Index: documents_search
               Segment Count: 16
               Exec Method: NormalScanExecState
               Scores: false
               Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"parents","query_string":"Factures","lenient":null,"conjunction_mode":null}}}}
         ->  Hash
               ->  Hash Join
                     Hash Cond: (pages.fileid = files.id)
                     ->  Custom Scan (ParadeDB Scan) on pages
                           Table: pages
                           Index: pages_search
                           Segment Count: 15
                           Exec Method: MixedFastFieldExecState
                           Fast Fields: content, fileid, page_number
                           String Fast Fields: content, fileid
                           Numeric Fast Fields: page_number
                           Scores: false
                           Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"content","query_string":"Socienty","lenient":null,"conjunction_mode":null}}}}
                     ->  Hash
                           ->  Custom Scan (ParadeDB Scan) on files
                                 Table: files
                                 Index: files_search
                                 Segment Count: 16
                                 Exec Method: StringFastFieldExecState
                                 Fast Fields: id
                                 String Agg Field: id
                                 Scores: false
                                 Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"title","query_string":"Receipt","lenient":null,"conjunction_mode":null}}}}
(33 rows)

\i common/mixedff_queries_cleanup.sql
-- Cleanup for relational query tests (07-10)
-- Drop the tables used in these tests
DROP TABLE IF EXISTS pages CASCADE;
DROP TABLE IF EXISTS files CASCADE;
DROP TABLE IF EXISTS documents CASCADE;
-- Reset parallel workers setting to default
RESET max_parallel_workers_per_gather;
RESET enable_indexscan;
RESET paradedb.enable_mixed_fast_field_exec;
SELECT 'Relational query tests cleanup complete' AS status; 
                 status                  
-----------------------------------------
 Relational query tests cleanup complete
(1 row)

