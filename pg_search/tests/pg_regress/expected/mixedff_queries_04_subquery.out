-- Test subqueries with mixed fast fields
\i common/mixedff_queries_setup.sql
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
SET enable_indexscan to OFF;
SET paradedb.enable_mixed_fast_field_exec = true;
-- The `mixedff` tests allow any number of columns to be used with fast fields, in order to test
-- more permutations of selected columns.
SET paradedb.mixed_fast_field_exec_column_threshold = 100;
-- Drop any existing test tables from this group
DROP TABLE IF EXISTS documents CASCADE;
DROP TABLE IF EXISTS files CASCADE;
DROP TABLE IF EXISTS pages CASCADE;
-- Create document tables for testing relational queries
CREATE TABLE documents (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT,
    parents TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE files (
    id TEXT NOT NULL UNIQUE,
    documentId TEXT NOT NULL,
    title TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_size INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id, documentId),
    FOREIGN KEY (documentId) REFERENCES documents(id)
);
CREATE TABLE pages (
    id TEXT NOT NULL UNIQUE,
    fileId TEXT NOT NULL,
    page_number INTEGER NOT NULL,
    content TEXT NOT NULL,
    metadata JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id, fileId),
    FOREIGN KEY (fileId) REFERENCES files(id)
);
-- Create BM25 indexes with fast fields
CREATE INDEX documents_search ON documents USING bm25 (
    id,
    title,
    parents,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}, "fast": true}, "parents": {"tokenizer": {"type": "default"}, "fast": true}, "content": {"tokenizer": {"type": "default"}, "fast": true}}'
);
psql:common/mixedff_queries_setup.sql:56: WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX files_search ON files USING bm25 (
    id,
    documentId,
    title,
    file_path,
    file_size
) WITH (
    key_field = 'id',
    text_fields = '{"documentid": {"tokenizer": {"type": "keyword"}, "fast": true}, "title": {"tokenizer": {"type": "default"}, "fast": true}, "file_path": {"tokenizer": {"type": "default"}, "fast": true}}'
);
psql:common/mixedff_queries_setup.sql:67: WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX pages_search ON pages USING bm25 (
    id,
    fileId,
    content,
    page_number
) WITH (
    key_field = 'id',
    text_fields = '{"fileid": {"tokenizer": {"type": "keyword"}, "fast": true}, "content": {"tokenizer": {"type": "default"}, "fast": true}}',
    numeric_fields = '{"page_number": {"fast": true}}'
);
psql:common/mixedff_queries_setup.sql:78: WARNING:  the `raw` tokenizer is deprecated
-- Insert sample data for documents
INSERT INTO documents (id, title, content, parents) VALUES
('doc1', 'Invoice 2023', 'This is an invoice for services rendered in 2023', 'Factures'),
('doc2', 'Receipt 2023', 'This is a receipt for payment received in 2023', 'Factures'),
('doc3', 'Contract 2023', 'This is a contract for services in 2023', 'Contracts');
-- Insert sample data for files
INSERT INTO files (id, documentId, title, file_path, file_size) VALUES
('file1', 'doc1', 'Invoice PDF', '/invoices/2023.pdf', 1024),
('file2', 'doc1', 'Invoice Receipt', '/invoices/2023_receipt.pdf', 512),
('file3', 'doc2', 'Receipt', '/receipts/2023.pdf', 256),
('file4', 'doc3', 'Contract Document', '/contracts/2023.pdf', 2048);
-- Insert sample data for pages
INSERT INTO pages (id, fileId, page_number, content) VALUES
('page1', 'file1', 1, 'Page 1 of Invoice PDF with Socienty General details'),
('page2', 'file1', 2, 'Page 2 of Invoice PDF with payment information'),
('page3', 'file2', 1, 'Page 1 of Invoice Receipt with bank details'),
('page4', 'file3', 1, 'Page 1 of Receipt with Socienty General information'),
('page5', 'file3', 2, 'Page 2 of Receipt with transaction ID'),
('page6', 'file4', 1, 'Page 1 of Contract Document with terms and conditions');
-- Add data for CTE testing
INSERT INTO documents (id, title, content, parents) VALUES
('doc_cte1', 'CTE Test Doc 1', 'This document tests common table expressions', 'Reports'),
('doc_cte2', 'CTE Test Doc 2', 'Another document for CTE testing', 'Reports');
INSERT INTO files (id, documentId, title, file_path, file_size) VALUES
('file_cte1', 'doc_cte1', 'CTE Test File 1', '/reports/cte1.pdf', 500),
('file_cte2', 'doc_cte1', 'CTE Test File 2', '/reports/cte2.pdf', 600),
('file_cte3', 'doc_cte2', 'CTE Test File 3', '/reports/cte3.pdf', 700);
INSERT INTO pages (id, fileId, page_number, content) VALUES
('page_cte1', 'file_cte1', 1, 'Page 1 with searchable content for CTE testing'),
('page_cte2', 'file_cte1', 2, 'Page 2 with more content for testing'),
('page_cte3', 'file_cte2', 1, 'Another page with test terms to search'),
('page_cte4', 'file_cte3', 1, 'Final test page for CTE testing'); 
\echo 'Test: Subqueries with mixed fields'
Test: Subqueries with mixed fields
-- Check execution plan to verify mixed fast fields in subquery
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT d.id, d.title, d.parents,
    (
        SELECT COUNT(*)
        FROM files f
        WHERE f.documentId = d.id AND f.title @@@ 'Invoice'
    ) AS invoice_file_count
FROM documents d
WHERE d.parents @@@ 'Factures'
ORDER BY invoice_file_count DESC, d.id;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: ((SubPlan 1)) DESC, d.id
   ->  Custom Scan (ParadeDB Scan) on documents d
         Table: documents
         Index: documents_search
         Exec Method: NormalScanExecState
         Scores: false
         Tantivy Query: {"with_index":{"query":{"parse_with_field":{"field":"parents","query_string":"Factures","lenient":null,"conjunction_mode":null}}}}
         SubPlan 1
           ->  Aggregate
                 ->  Custom Scan (ParadeDB Scan) on files f
                       Table: files
                       Index: files_search
                       Exec Method: NormalScanExecState
                       Scores: false
                       Tantivy Query: {"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"title","query_string":"Invoice","lenient":null,"conjunction_mode":null}}}},{}]}}
(16 rows)

-- Test with subquery
SELECT d.id, d.title, d.parents,
    (
        SELECT COUNT(*)
        FROM files f
        WHERE f.documentId = d.id AND f.title @@@ 'Invoice'
    ) AS invoice_file_count
FROM documents d
WHERE d.parents @@@ 'Factures'
ORDER BY invoice_file_count DESC, d.id;
  id  |    title     | parents  | invoice_file_count 
------+--------------+----------+--------------------
 doc1 | Invoice 2023 | Factures |                  2
 doc2 | Receipt 2023 | Factures |                  0
(2 rows)

SELECT d.id, d.title, d.parents,
    (
        SELECT COUNT(*)
        FROM files f
        WHERE f.documentId = d.id AND (f.title = 'Invoice Receipt' OR f.title = 'Invoice PDF')
    ) AS invoice_file_count
FROM documents d
WHERE d.parents = 'Factures'
ORDER BY invoice_file_count DESC, d.id;
  id  |    title     | parents  | invoice_file_count 
------+--------------+----------+--------------------
 doc1 | Invoice 2023 | Factures |                  2
 doc2 | Receipt 2023 | Factures |                  0
(2 rows)

EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT d.id, d.title, d.parents,
    (
        SELECT COUNT(*)
        FROM files f
        WHERE f.documentId = d.id AND (f.title = 'Invoice Receipt' OR f.title = 'Invoice PDF')
    ) AS invoice_file_count
FROM documents d
WHERE d.parents = 'Factures'
ORDER BY invoice_file_count DESC, d.id;


 Sort
   Sort Key: ((SubPlan 1)) DESC, d.id
   ->  Custom Scan (ParadeDB Scan) on documents d
         Table: documents
         Index: documents_search
         Exec Method: NormalScanExecState
         Scores: false
         Tantivy Query: {"heap_filter":{"indexed_query":"all","field_filters":[{"expr_node":"{OPEXPR :opno 98 :opfuncid 67 :opresulttype 16 :opretset false :opcollid 0 :inputcollid 100 :args ({VAR :varno 1 :varattno 4 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 4 :location -1} {CONST :consttype 25 :consttypmod -1 :constcollid 100 :constlen -1 :constbyval false :constisnull false :location -1 :constvalue 12 [ 48 0 0 0 70 97 99 116 117 114 101 115 ]}) :location -1}","description":"OpExpr with operator OID 98"}]}}
         SubPlan 1
           ->  Aggregate
                 ->  Custom Scan (ParadeDB Scan) on files f
                       Table: files
                       Index: files_search
                       Exec Method: NormalScanExecState
                       Scores: false
                       Tantivy Query: {"boolean":{"must":[{"boolean":{"should":[{"heap_filter":{"indexed_query":"all","field_filters":[{"expr_node":"{OPEXPR :opno 98 :opfuncid 67 :opresulttype 16 :opretset false :opcollid 0 :inputcollid 100 :args ({VAR :varno 1 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 3 :location -1} {CONST :consttype 25 :consttypmod -1 :constcollid 100 :constlen -1 :constbyval false :constisnull false :location -1 :constvalue 19 [ 76 0 0 0 73 110 118 111 105 99 101 32 82 101 99 101 105 112 116 ]}) :location -1}","description":"OpExpr with operator OID 98"}]}},{"heap_filter":{"indexed_query":"all","field_filters":[{"expr_node":"{OPEXPR :opno 98 :opfuncid 67 :opresulttype 16 :opretset false :opcollid 0 :inputcollid 100 :args ({VAR :varno 1 :varattno 3 :vartype 25 :vartypmod -1 :varcollid 100 :varnullingrels (b) :varlevelsup 0 :varnosyn 1 :varattnosyn 3 :location -1} {CONST :consttype 25 :consttypmod -1 :constcollid 100 :constlen -1 :constbyval false :constisnull false :location -1 :constvalue 15 [ 60 0 0 0 73 110 118 111 105 99 101 32 80 68 70 ]}) :location -1}","description":"OpExpr with operator OID 98"}]}}]}},{}]}}
(16 rows)

\i common/mixedff_queries_cleanup.sql
-- Cleanup for relational query tests (07-10)
-- Drop the tables used in these tests
DROP TABLE IF EXISTS pages CASCADE;
DROP TABLE IF EXISTS files CASCADE;
DROP TABLE IF EXISTS documents CASCADE;
-- Reset parallel workers setting to default
RESET max_parallel_workers_per_gather;
RESET enable_indexscan;
RESET paradedb.enable_mixed_fast_field_exec;
RESET paradedb.mixed_fast_field_exec_column_threshold;
SELECT 'Relational query tests cleanup complete' AS status; 
                 status                  
-----------------------------------------
 Relational query tests cleanup complete
(1 row)

