-- Tests complex join queries with mixed fields
\i common/mixedff_queries_setup.sql
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
SET enable_indexscan to OFF;
SET paradedb.enable_mixed_fast_field_exec = true;
-- The `mixedff` tests allow any number of columns to be used with fast fields, in order to test
-- more permutations of selected columns.
SET paradedb.mixed_fast_field_exec_column_threshold = 100;
-- Drop any existing test tables from this group
DROP TABLE IF EXISTS documents CASCADE;
DROP TABLE IF EXISTS files CASCADE;
DROP TABLE IF EXISTS pages CASCADE;
-- Create document tables for testing relational queries
CREATE TABLE documents (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT,
    parents TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE files (
    id TEXT NOT NULL UNIQUE,
    documentId TEXT NOT NULL,
    title TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_size INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id, documentId),
    FOREIGN KEY (documentId) REFERENCES documents(id)
);
CREATE TABLE pages (
    id TEXT NOT NULL UNIQUE,
    fileId TEXT NOT NULL,
    page_number INTEGER NOT NULL,
    content TEXT NOT NULL,
    metadata JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id, fileId),
    FOREIGN KEY (fileId) REFERENCES files(id)
);
-- Create BM25 indexes with fast fields
CREATE INDEX documents_search ON documents USING bm25 (
    id,
    title,
    parents,
    content
) WITH (
    key_field = 'id',
    text_fields = '{"title": {"tokenizer": {"type": "default"}, "fast": true}, "parents": {"tokenizer": {"type": "default"}, "fast": true}, "content": {"tokenizer": {"type": "default"}, "fast": true}}'
);
psql:common/mixedff_queries_setup.sql:56: WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX files_search ON files USING bm25 (
    id,
    documentId,
    title,
    file_path,
    file_size
) WITH (
    key_field = 'id',
    text_fields = '{"documentid": {"tokenizer": {"type": "keyword"}, "fast": true}, "title": {"tokenizer": {"type": "default"}, "fast": true}, "file_path": {"tokenizer": {"type": "default"}, "fast": true}}'
);
psql:common/mixedff_queries_setup.sql:67: WARNING:  the `raw` tokenizer is deprecated
CREATE INDEX pages_search ON pages USING bm25 (
    id,
    fileId,
    content,
    page_number
) WITH (
    key_field = 'id',
    text_fields = '{"fileid": {"tokenizer": {"type": "keyword"}, "fast": true}, "content": {"tokenizer": {"type": "default"}, "fast": true}}',
    numeric_fields = '{"page_number": {"fast": true}}'
);
psql:common/mixedff_queries_setup.sql:78: WARNING:  the `raw` tokenizer is deprecated
-- Insert sample data for documents
INSERT INTO documents (id, title, content, parents) VALUES
('doc1', 'Invoice 2023', 'This is an invoice for services rendered in 2023', 'Factures'),
('doc2', 'Receipt 2023', 'This is a receipt for payment received in 2023', 'Factures'),
('doc3', 'Contract 2023', 'This is a contract for services in 2023', 'Contracts');
-- Insert sample data for files
INSERT INTO files (id, documentId, title, file_path, file_size) VALUES
('file1', 'doc1', 'Invoice PDF', '/invoices/2023.pdf', 1024),
('file2', 'doc1', 'Invoice Receipt', '/invoices/2023_receipt.pdf', 512),
('file3', 'doc2', 'Receipt', '/receipts/2023.pdf', 256),
('file4', 'doc3', 'Contract Document', '/contracts/2023.pdf', 2048);
-- Insert sample data for pages
INSERT INTO pages (id, fileId, page_number, content) VALUES
('page1', 'file1', 1, 'Page 1 of Invoice PDF with Socienty General details'),
('page2', 'file1', 2, 'Page 2 of Invoice PDF with payment information'),
('page3', 'file2', 1, 'Page 1 of Invoice Receipt with bank details'),
('page4', 'file3', 1, 'Page 1 of Receipt with Socienty General information'),
('page5', 'file3', 2, 'Page 2 of Receipt with transaction ID'),
('page6', 'file4', 1, 'Page 1 of Contract Document with terms and conditions');
-- Add data for CTE testing
INSERT INTO documents (id, title, content, parents) VALUES
('doc_cte1', 'CTE Test Doc 1', 'This document tests common table expressions', 'Reports'),
('doc_cte2', 'CTE Test Doc 2', 'Another document for CTE testing', 'Reports');
INSERT INTO files (id, documentId, title, file_path, file_size) VALUES
('file_cte1', 'doc_cte1', 'CTE Test File 1', '/reports/cte1.pdf', 500),
('file_cte2', 'doc_cte1', 'CTE Test File 2', '/reports/cte2.pdf', 600),
('file_cte3', 'doc_cte2', 'CTE Test File 3', '/reports/cte3.pdf', 700);
INSERT INTO pages (id, fileId, page_number, content) VALUES
('page_cte1', 'file_cte1', 1, 'Page 1 with searchable content for CTE testing'),
('page_cte2', 'file_cte1', 2, 'Page 2 with more content for testing'),
('page_cte3', 'file_cte2', 1, 'Another page with test terms to search'),
('page_cte4', 'file_cte3', 1, 'Final test page for CTE testing'); 
\echo 'Test: join with mixed fast fields'
Test: join with mixed fast fields
SET enable_hashjoin=off;
SET enable_memoize=off;
DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users
(
    id    serial8 not null primary key,
    name  text,
    color varchar,
    age   varchar
);
INSERT into users (name, color, age)
VALUES ('bob', 'blue', 20);
-- Use deterministic data patterns instead of random data
INSERT into users (name, color, age)
SELECT
    (ARRAY['alice', 'bob', 'cloe', 'sally', 'brandy', 'brisket', 'anchovy'])[1 + mod(s.a, 7)],
    (ARRAY['red', 'green', 'blue', 'orange', 'purple', 'pink', 'yellow'])[1 + mod(s.a, 7)],
    (20 + mod(s.a, 80))::text
FROM generate_series(1, 10000) as s(a);
CREATE INDEX idxusers ON users USING bm25 (id, name, color, age)
WITH (
key_field = 'id',
text_fields = '
            {
                "name": { "tokenizer": { "type": "keyword" }, "fast": true },
                "color": { "tokenizer": { "type": "keyword" }, "fast": true },
                "age": { "tokenizer": { "type": "keyword" }, "fast": true }
            }'
);
CREATE INDEX idxusers_name ON users (name);
CREATE INDEX idxusers_color ON users (color);
CREATE INDEX idxusers_age ON users (age);
ANALYZE;
DROP TABLE IF EXISTS products CASCADE;
CREATE TABLE products
(
    id    serial8 not null primary key,
    name  text,
    color varchar,
    age   varchar
);
INSERT into products (name, color, age)
VALUES ('bob', 'blue', 20);
-- Use deterministic data patterns instead of random data
INSERT into products (name, color, age)
SELECT
    (ARRAY['alice', 'bob', 'cloe', 'sally', 'brandy', 'brisket', 'anchovy'])[1 + mod(s.a, 7)],
    (ARRAY['red', 'green', 'blue', 'orange', 'purple', 'pink', 'yellow'])[1 + mod(s.a, 7)],
    (20 + mod(s.a, 80))::text
FROM generate_series(1, 10000) as s(a);
CREATE INDEX idxproducts ON products USING bm25 (id, name, color, age)
WITH (
key_field = 'id',
text_fields = '
            {
                "name": { "tokenizer": { "type": "keyword" }, "fast": true },
                "color": { "tokenizer": { "type": "keyword" }, "fast": true },
                "age": { "tokenizer": { "type": "keyword" }, "fast": true }
            }'
);
CREATE INDEX idxproducts_name ON products (name);
CREATE INDEX idxproducts_color ON products (color);
CREATE INDEX idxproducts_age ON products (age);
ANALYZE;
DROP TABLE IF EXISTS orders CASCADE;
CREATE TABLE orders
(
    id    serial8 not null primary key,
    name  text,
    color varchar,
    age   varchar
);
INSERT into orders (name, color, age)
VALUES ('bob', 'blue', 20);
-- Use deterministic data patterns instead of random data
INSERT into orders (name, color, age)
SELECT
    (ARRAY['alice', 'bob', 'cloe', 'sally', 'brandy', 'brisket', 'anchovy'])[1 + mod(s.a, 7)],
    (ARRAY['red', 'green', 'blue', 'orange', 'purple', 'pink', 'yellow'])[1 + mod(s.a, 7)],
    (20 + mod(s.a, 80))::text
FROM generate_series(1, 10000) as s(a);
CREATE INDEX idxorders ON orders USING bm25 (id, name, color, age)
WITH (
key_field = 'id',
text_fields = '
            {
                "name": { "tokenizer": { "type": "keyword" }, "fast": true },
                "color": { "tokenizer": { "type": "keyword" }, "fast": true },
                "age": { "tokenizer": { "type": "keyword" }, "fast": true }
            }'
);
CREATE INDEX idxorders_name ON orders (name);
CREATE INDEX idxorders_color ON orders (color);
CREATE INDEX idxorders_age ON orders (age);
ANALYZE;
SELECT users.color FROM users JOIN orders ON users.id = orders.id  WHERE (users.color  =  'blue') AND (users.name  =  'bob') LIMIT 10;
 color 
-------
 blue
(1 row)

vacuum;
SET paradedb.enable_mixed_fast_field_exec = false;
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF) SELECT users.color FROM users JOIN orders ON users.id = orders.id  WHERE (users.color @@@ 'blue') AND (users.name @@@ 'bob') LIMIT 10;
                                                                                                                                                 QUERY PLAN                                                                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Nested Loop
         ->  Custom Scan (ParadeDB Scan) on users
               Table: users
               Index: idxusers
               Exec Method: NormalScanExecState
               Scores: false
               Tantivy Query: {"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"color","query_string":"blue","lenient":null,"conjunction_mode":null}}}},{"with_index":{"query":{"parse_with_field":{"field":"name","query_string":"bob","lenient":null,"conjunction_mode":null}}}}]}}
         ->  Bitmap Heap Scan on orders
               Recheck Cond: (users.id = id)
               ->  Bitmap Index Scan on orders_pkey
                     Index Cond: (id = users.id)
(12 rows)

SELECT users.color FROM users JOIN orders ON users.id = orders.id  WHERE (users.color @@@ 'blue') AND (users.name @@@ 'bob') LIMIT 10;
 color 
-------
 blue
(1 row)

SET paradedb.enable_mixed_fast_field_exec = true;
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF) SELECT users.color FROM users JOIN orders ON users.id = orders.id  WHERE (users.color @@@ 'blue') AND (users.name @@@ 'bob') LIMIT 10;
                                                                                                                                                 QUERY PLAN                                                                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Nested Loop
         ->  Custom Scan (ParadeDB Scan) on users
               Table: users
               Index: idxusers
               Exec Method: MixedFastFieldExecState
               Fast Fields: color, id
               String Fast Fields: color
               Numeric Fast Fields: id
               Scores: false
               Tantivy Query: {"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"color","query_string":"blue","lenient":null,"conjunction_mode":null}}}},{"with_index":{"query":{"parse_with_field":{"field":"name","query_string":"bob","lenient":null,"conjunction_mode":null}}}}]}}
         ->  Bitmap Heap Scan on orders
               Recheck Cond: (users.id = id)
               ->  Bitmap Index Scan on orders_pkey
                     Index Cond: (id = users.id)
(15 rows)

SELECT users.color FROM users JOIN orders ON users.id = orders.id  WHERE (users.color @@@ 'blue') AND (users.name @@@ 'bob') LIMIT 10;
 color 
-------
 blue
(1 row)

RESET enable_hashjoin;
RESET enable_memoize;
\i common/mixedff_queries_cleanup.sql
-- Cleanup for relational query tests (07-10)
-- Drop the tables used in these tests
DROP TABLE IF EXISTS pages CASCADE;
DROP TABLE IF EXISTS files CASCADE;
DROP TABLE IF EXISTS documents CASCADE;
-- Reset parallel workers setting to default
RESET max_parallel_workers_per_gather;
RESET enable_indexscan;
RESET paradedb.enable_mixed_fast_field_exec;
RESET paradedb.mixed_fast_field_exec_column_threshold;
SELECT 'Relational query tests cleanup complete' AS status; 
                 status                  
-----------------------------------------
 Relational query tests cleanup complete
(1 row)

