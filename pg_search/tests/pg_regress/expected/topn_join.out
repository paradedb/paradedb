-- TopN Join Regression Tests
-- Test the TopN join optimization for queries with LIMIT and ORDER BY
\set ON_ERROR_STOP on
SET paradedb.enable_custom_join = true;
SET paradedb.enable_topn_join_optimization = true;
SET paradedb.enable_join_debug_logging = true;
DROP TABLE IF EXISTS topn_files;
DROP TABLE IF EXISTS topn_documents;
DROP TABLE IF EXISTS topn_categories;
-- Create test tables
CREATE TABLE topn_documents (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    category_id INTEGER
);
CREATE TABLE topn_files (
    id SERIAL PRIMARY KEY,
    filename TEXT NOT NULL,
    content TEXT NOT NULL,
    document_id INTEGER REFERENCES topn_documents(id)
);
CREATE TABLE topn_categories (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT
);
-- Insert test data
INSERT INTO topn_categories (name, description) VALUES 
    ('Tech', 'Technology articles'),
    ('Science', 'Scientific papers'),
    ('News', 'News articles');
INSERT INTO topn_documents (title, content, category_id) VALUES 
    ('Database Systems', 'PostgreSQL is a powerful database system with advanced search capabilities', 1),
    ('Machine Learning', 'Artificial intelligence and machine learning algorithms for data analysis', 1),
    ('Climate Change', 'Research on global climate patterns and environmental impact studies', 2),
    ('Space Exploration', 'Mars rover missions and deep space telescope discoveries', 2),
    ('Market Updates', 'Stock market analysis and economic trends for Q4 2024', 3),
    ('Tech News', 'Latest developments in cloud computing and containerization technologies', 3);
INSERT INTO topn_files (filename, content, document_id) VALUES 
    ('db_intro.pdf', 'Introduction to database design principles and PostgreSQL features', 1),
    ('db_advanced.pdf', 'Advanced database optimization techniques and performance tuning', 1),
    ('ml_basics.txt', 'Machine learning fundamentals and neural network architectures', 2),
    ('ml_deep.txt', 'Deep learning models for natural language processing applications', 2),
    ('climate_data.csv', 'Temperature and precipitation data from weather stations worldwide', 3),
    ('climate_analysis.py', 'Python scripts for analyzing climate change patterns and trends', 3),
    ('mars_photos.jpg', 'High resolution images from Mars rover exploration missions', 4),
    ('telescope_data.fits', 'Astronomical observations from the James Webb Space Telescope', 4),
    ('market_report.xlsx', 'Quarterly financial analysis and market performance metrics', 5),
    ('economics.pdf', 'Economic indicators and inflation trends analysis report', 5),
    ('cloud_guide.md', 'Best practices for cloud infrastructure and container orchestration', 6),
    ('tech_trends.json', 'Technology adoption metrics and industry forecast data', 6);
-- Create BM25 indexes
CREATE INDEX topn_documents_idx ON topn_documents
USING bm25 ("id",
    "content",
    "title",
    "category_id"
)
WITH (
    key_field = 'id',
    text_fields = '{
        "content": {
            "tokenizer": {"type": "default"}
        },
        "title": {
            "tokenizer": {"type": "default"}
        }
    }',
    numeric_fields = '{
        "category_id": {}
    }'
);
CREATE INDEX topn_files_idx ON topn_files
USING bm25 ("id",
    "content",
    "filename",
    "document_id"
)
WITH (
    key_field = 'id',
    text_fields = '{
        "content": {
            "tokenizer": {"type": "default"}
        },
        "filename": {
            "tokenizer": {"type": "default"}
        }
    }',
    numeric_fields = '{
        "document_id": {}
    }'
);
CREATE INDEX topn_categories_idx ON topn_categories
USING bm25 ("id",
    "name",
    "description"
)
WITH (
    key_field = 'id',
    text_fields = '{
        "name": {
            "tokenizer": {"type": "default"}
        },
        "description": {
            "tokenizer": {"type": "default"}
        }
    }'
);
-- Test 1: Basic TopN join with LIMIT and score-based ordering
\echo 'Test 1: Basic TopN join with LIMIT and score ordering'
Test 1: Basic TopN join with LIMIT and score ordering
SELECT 
    d.title,
    f.filename,
    paradedb.score(d.id) as doc_score,
    paradedb.score(f.id) as file_score,
    (paradedb.score(d.id) + paradedb.score(f.id)) as combined_score
FROM topn_documents d
JOIN topn_files f ON d.id = f.document_id
WHERE d.content @@@ 'database OR PostgreSQL'
  AND f.content @@@ 'database OR advanced'
ORDER BY combined_score DESC
LIMIT 3;
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["topn_documents"], inner relids: ["topn_files"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation topn_documents (rti 1)
WARNING:  ParadeDB: Checked relations ["topn_documents"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation topn_files (rti 2)
WARNING:  ParadeDB: Checked relations ["topn_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation topn_documents (rti 1)
WARNING:  ParadeDB: Extracted search query for topn_documents: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation topn_files (rti 2)
WARNING:  ParadeDB: Extracted search query for topn_files: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for topn_documents - uses_search: true
WARNING:  ParadeDB: Inner predicate for topn_files - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["topn_documents"], inner: ["topn_files"]
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: Join pathlist callback called - jointype: 0, outer relids: ["topn_files"], inner relids: ["topn_documents"]
WARNING:  ParadeDB: Both sides are base relations - proceeding with standard join
WARNING:  ParadeDB: Found BM25 index for relation topn_files (rti 2)
WARNING:  ParadeDB: Checked relations ["topn_files"] for BM25 indexes, found: true
WARNING:  ParadeDB: Found BM25 index for relation topn_documents (rti 1)
WARNING:  ParadeDB: Checked relations ["topn_documents"] for BM25 indexes, found: true
WARNING:  ParadeDB: Join feasibility check - outer has BM25: true, inner has BM25: true
WARNING:  ParadeDB: Analyzing join search predicates
WARNING:  ParadeDB: Found 1 join restriction clauses
WARNING:  ParadeDB: Analyzing join clause of type T_OpExpr
WARNING:  ParadeDB: Extracted join condition: 1.id = 2.document_id
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation topn_files (rti 2)
WARNING:  ParadeDB: Extracted search query for topn_files: uses_search_operator=true
WARNING:  ParadeDB: Analyzing 1 base restriction clauses for relation
WARNING:  ParadeDB: Extracting predicates for relation topn_documents (rti 1)
WARNING:  ParadeDB: Extracted search query for topn_documents: uses_search_operator=true
WARNING:  ParadeDB: Extracted 1 outer predicates, 1 inner predicates, 1 join conditions
WARNING:  ParadeDB: Found search predicates - outer: 1, inner: 1, bilateral: true
WARNING:  ParadeDB: Join is feasible based on composite analysis: BothBaseRelations
WARNING:  ParadeDB: Outer predicate for topn_files - uses_search: true
WARNING:  ParadeDB: Inner predicate for topn_documents - uses_search: true
WARNING:  ParadeDB: Bilateral search detected - proceeding with custom join path
WARNING:  ParadeDB: Storing join relation OIDs - outer: ["topn_files"], inner: ["topn_documents"]
WARNING:  ParadeDB: Join path estimates - rows: 1, startup_cost: 50.00, total_cost: 50.01
WARNING:  ParadeDB: Created custom join path, adding to joinrel
WARNING:  ParadeDB: Planning custom join path with scanrelid = 0
WARNING:  ParadeDB: Join target list has 0 entries
WARNING:  ParadeDB: Set custom scan target list for join node
ERROR:  variable not found in subplan target list
