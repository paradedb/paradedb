\i common/common_setup.sql
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Disable parallel workers to avoid differences in plans
SET max_parallel_workers_per_gather = 0;
SET enable_indexscan to OFF;
SET paradedb.enable_mixed_fast_field_exec = true;
CALL paradedb.create_bm25_test_table(
  schema_name => 'public',
  table_name => 'mock_items'
);
CREATE INDEX search_idx on mock_items
USING bm25 (id, description, rating, category, metadata)
WITH (key_field='id', text_fields = '{"category": {"fast": true}}', json_fields = '{"metadata": {"fast": true, "tokenizer": {"type": "raw", "lowercase": true}}}');
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating DESC
LIMIT 5;
                                                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Custom Scan (ParadeDB Scan) on mock_items
         Table: mock_items
         Index: search_idx
         Exec Method: TopNScanExecState
         Scores: true
            TopN Order By: rating desc
            TopN Limit: 5
         Tantivy Query: {"boolean":{"should":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"keyboard","lenient":null,"conjunction_mode":null}}}},{"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"shoes","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"excluded":2},"upper_bound":null,"is_datetime":false}}]}}]}}
(9 rows)

SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating DESC
LIMIT 5;
 id |       description        | rating |   score   
----+--------------------------+--------+-----------
  3 | Sleek running shoes      |      5 | 3.4849067
  5 | Generic shoes            |      4 | 3.8772602
  2 | Plastic Keyboard         |      4 | 3.2668595
  1 | Ergonomic metal keyboard |      4 | 2.8213787
  4 | White jogging shoes      |      3 | 3.4849067
(5 rows)

EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, id ASC
LIMIT 5;
                                                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Custom Scan (ParadeDB Scan) on mock_items
         Table: mock_items
         Index: search_idx
         Exec Method: TopNScanExecState
         Scores: true
            TopN Order By: rating asc, id asc
            TopN Limit: 5
         Tantivy Query: {"boolean":{"should":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"keyboard","lenient":null,"conjunction_mode":null}}}},{"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"shoes","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"excluded":2},"upper_bound":null,"is_datetime":false}}]}}]}}
(9 rows)

SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, id ASC
LIMIT 5;
 id |       description        | rating |   score   
----+--------------------------+--------+-----------
  4 | White jogging shoes      |      3 | 3.4849067
  1 | Ergonomic metal keyboard |      4 | 2.8213787
  2 | Plastic Keyboard         |      4 | 3.2668595
  5 | Generic shoes            |      4 | 3.8772602
  3 | Sleek running shoes      |      5 | 3.4849067
(5 rows)

EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, id ASC, category
LIMIT 5;
                                                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Custom Scan (ParadeDB Scan) on mock_items
         Table: mock_items
         Index: search_idx
         Exec Method: TopNScanExecState
         Scores: true
            TopN Order By: rating asc, id asc, category asc
            TopN Limit: 5
         Tantivy Query: {"boolean":{"should":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"keyboard","lenient":null,"conjunction_mode":null}}}},{"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"shoes","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"excluded":2},"upper_bound":null,"is_datetime":false}}]}}]}}
(9 rows)

SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, id ASC, category
LIMIT 5;
ERROR:  Unsupported sort-field count: 3. At most 2 are supported when `paradedb.score` is requested.
EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, paradedb.score(id) DESC
LIMIT 5;
                                                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Custom Scan (ParadeDB Scan) on mock_items
         Table: mock_items
         Index: search_idx
         Exec Method: TopNScanExecState
         Scores: true
            TopN Order By: rating asc, paradedb.score() desc
            TopN Limit: 5
         Tantivy Query: {"boolean":{"should":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"keyboard","lenient":null,"conjunction_mode":null}}}},{"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"shoes","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"excluded":2},"upper_bound":null,"is_datetime":false}}]}}]}}
(9 rows)

SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, paradedb.score(id) DESC
LIMIT 5;
 id |       description        | rating |   score   
----+--------------------------+--------+-----------
  4 | White jogging shoes      |      3 | 3.4849067
  5 | Generic shoes            |      4 | 3.8772602
  2 | Plastic Keyboard         |      4 | 3.2668595
  1 | Ergonomic metal keyboard |      4 | 2.8213787
  3 | Sleek running shoes      |      5 | 3.4849067
(5 rows)

EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, paradedb.score(id), id DESC
LIMIT 5;
                                                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Custom Scan (ParadeDB Scan) on mock_items
         Table: mock_items
         Index: search_idx
         Exec Method: TopNScanExecState
         Scores: true
            TopN Order By: rating asc, paradedb.score() asc, id desc
            TopN Limit: 5
         Tantivy Query: {"boolean":{"should":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"keyboard","lenient":null,"conjunction_mode":null}}}},{"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"shoes","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"excluded":2},"upper_bound":null,"is_datetime":false}}]}}]}}
(9 rows)

SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, paradedb.score(id), id DESC
LIMIT 5;
 id |       description        | rating |   score   
----+--------------------------+--------+-----------
  4 | White jogging shoes      |      3 | 3.4849067
  1 | Ergonomic metal keyboard |      4 | 2.8213787
  2 | Plastic Keyboard         |      4 | 3.2668595
  5 | Generic shoes            |      4 | 3.8772602
  3 | Sleek running shoes      |      5 | 3.4849067
(5 rows)

EXPLAIN (FORMAT TEXT, COSTS OFF, TIMING OFF)
SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, paradedb.score(id), id, category DESC
LIMIT 5;
                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: rating, (paradedb.score(id)), id, category DESC
         ->  Custom Scan (ParadeDB Scan) on mock_items
               Table: mock_items
               Index: search_idx
               Exec Method: NormalScanExecState
               Scores: true
               Tantivy Query: {"boolean":{"should":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"keyboard","lenient":null,"conjunction_mode":null}}}},{"boolean":{"must":[{"with_index":{"query":{"parse_with_field":{"field":"description","query_string":"shoes","lenient":null,"conjunction_mode":null}}}},{"range":{"field":"rating","lower_bound":{"excluded":2},"upper_bound":null,"is_datetime":false}}]}}]}}
(9 rows)

SELECT id, description, rating, paradedb.score(id) FROM mock_items
WHERE description @@@ 'keyboard' OR description @@@ 'shoes' AND rating > 2
ORDER BY rating, paradedb.score(id), id, category DESC
LIMIT 5;
 id |       description        | rating |   score   
----+--------------------------+--------+-----------
  4 | White jogging shoes      |      3 | 3.4849067
  1 | Ergonomic metal keyboard |      4 | 2.8213787
  2 | Plastic Keyboard         |      4 | 3.2668595
  5 | Generic shoes            |      4 | 3.8772602
  3 | Sleek running shoes      |      5 | 3.4849067
(5 rows)

DROP TABLE mock_items;
