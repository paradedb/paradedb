-- Testing and Validation
-- Test all aspects of the unified expression evaluator
-- Create extension if not exists
CREATE EXTENSION IF NOT EXISTS pg_search;
-- Drop table if it exists to ensure clean test
DROP TABLE IF EXISTS unified_test_products CASCADE;
-- Setup test table with diverse data types
CREATE TABLE unified_test_products (
    id SERIAL PRIMARY KEY,
    name TEXT,
    description TEXT,
    category TEXT,
    price NUMERIC(10,2),
    in_stock BOOLEAN,
    tags TEXT[],
    created_at TIMESTAMP,
    metadata JSONB
);
-- Create search index using the correct syntax
CREATE INDEX unified_test_products_idx ON unified_test_products USING bm25 (
    id,
    name,
    description,
    price,
    in_stock
) WITH (key_field = 'id');
-- Insert comprehensive test data
INSERT INTO unified_test_products (name, description, category, price, in_stock, tags, created_at, metadata) VALUES
-- Tech products with search terms
('Apple iPhone 15', 'Latest smartphone with advanced camera', 'Electronics', 999.99, true, ARRAY['phone', 'apple', 'premium'], '2024-01-15', '{"brand": "Apple", "storage": "128GB"}'),
('Samsung Galaxy S24', 'Android smartphone with AI features', 'Electronics', 899.99, true, ARRAY['phone', 'samsung', 'android'], '2024-01-20', '{"brand": "Samsung", "storage": "256GB"}'),
('Apple MacBook Pro', 'Professional laptop for developers', 'Computers', 2499.99, false, ARRAY['laptop', 'apple', 'professional'], '2024-01-10', '{"brand": "Apple", "cpu": "M3"}'),
-- Home products without search terms
('Kitchen Blender', 'High-speed blender for smoothies', 'Kitchen', 149.99, true, ARRAY['blender', 'kitchen'], '2024-01-25', '{"power": "1000W"}'),
('Coffee Maker', 'Automatic drip coffee maker', 'Kitchen', 89.99, true, ARRAY['coffee', 'kitchen'], '2024-01-30', '{"capacity": "12cups"}'),
('Dining Table', 'Wooden dining table for 6 people', 'Furniture', 599.99, false, ARRAY['table', 'furniture'], '2024-02-01', '{"material": "oak"}'),
-- Mixed category products
('Apple Watch', 'Smartwatch with health tracking', 'Electronics', 399.99, true, ARRAY['watch', 'apple', 'health'], '2024-02-05', '{"brand": "Apple", "waterproof": true}'),
('Smart TV', 'Ultra HD smart television', 'Electronics', 799.99, true, ARRAY['tv', 'smart', 'entertainment'], '2024-02-10', '{"size": "55inch", "resolution": "4K"}'),
('Office Chair', 'Ergonomic office chair', 'Furniture', 299.99, true, ARRAY['chair', 'office', 'ergonomic'], '2024-02-15', '{"adjustable": true}'),
-- Products for edge cases
('Apple Juice', 'Fresh organic apple juice', 'Food', 4.99, true, ARRAY['juice', 'organic', 'apple'], '2024-02-20', '{"organic": true}'),
('Samsung Monitor', 'Professional monitor for design work', 'Electronics', 449.99, false, ARRAY['monitor', 'samsung', 'professional'], '2024-02-25', '{"brand": "Samsung", "size": "27inch"}');
SELECT name, description, category, price, in_stock, tags, created_at, metadata FROM unified_test_products;
        name        |              description               |  category   |  price  | in_stock |              tags              |        created_at        |                 metadata                 
--------------------+----------------------------------------+-------------+---------+----------+--------------------------------+--------------------------+------------------------------------------
 Apple iPhone 15    | Latest smartphone with advanced camera | Electronics |  999.99 | t        | {phone,apple,premium}          | Mon Jan 15 00:00:00 2024 | {"brand": "Apple", "storage": "128GB"}
 Samsung Galaxy S24 | Android smartphone with AI features    | Electronics |  899.99 | t        | {phone,samsung,android}        | Sat Jan 20 00:00:00 2024 | {"brand": "Samsung", "storage": "256GB"}
 Apple MacBook Pro  | Professional laptop for developers     | Computers   | 2499.99 | f        | {laptop,apple,professional}    | Wed Jan 10 00:00:00 2024 | {"cpu": "M3", "brand": "Apple"}
 Kitchen Blender    | High-speed blender for smoothies       | Kitchen     |  149.99 | t        | {blender,kitchen}              | Thu Jan 25 00:00:00 2024 | {"power": "1000W"}
 Coffee Maker       | Automatic drip coffee maker            | Kitchen     |   89.99 | t        | {coffee,kitchen}               | Tue Jan 30 00:00:00 2024 | {"capacity": "12cups"}
 Dining Table       | Wooden dining table for 6 people       | Furniture   |  599.99 | f        | {table,furniture}              | Thu Feb 01 00:00:00 2024 | {"material": "oak"}
 Apple Watch        | Smartwatch with health tracking        | Electronics |  399.99 | t        | {watch,apple,health}           | Mon Feb 05 00:00:00 2024 | {"brand": "Apple", "waterproof": true}
 Smart TV           | Ultra HD smart television              | Electronics |  799.99 | t        | {tv,smart,entertainment}       | Sat Feb 10 00:00:00 2024 | {"size": "55inch", "resolution": "4K"}
 Office Chair       | Ergonomic office chair                 | Furniture   |  299.99 | t        | {chair,office,ergonomic}       | Thu Feb 15 00:00:00 2024 | {"adjustable": true}
 Apple Juice        | Fresh organic apple juice              | Food        |    4.99 | t        | {juice,organic,apple}          | Tue Feb 20 00:00:00 2024 | {"organic": true}
 Samsung Monitor    | Professional monitor for design work   | Electronics |  449.99 | f        | {monitor,samsung,professional} | Sun Feb 25 00:00:00 2024 | {"size": "27inch", "brand": "Samsung"}
(11 rows)

-- Test 1: Basic Mixed Expression Validation
\echo '=== Test 1: Basic Mixed Expression Validation ==='
=== Test 1: Basic Mixed Expression Validation ===
-- Test 1.1: OR with indexed and non-indexed predicates
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR category = 'Kitchen')
ORDER BY score DESC, id;
 id |       name        |  category   |   score   
----+-------------------+-------------+-----------
  7 | Apple Watch       | Electronics | 1.0314647
 10 | Apple Juice       | Food        | 1.0314647
  4 | Kitchen Blender   | Kitchen     |         1
  5 | Coffee Maker      | Kitchen     |         1
  1 | Apple iPhone 15   | Electronics | 0.8672927
  3 | Apple MacBook Pro | Computers   | 0.8672927
(6 rows)

-- Test 1.2: AND with indexed and non-indexed predicates  
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' AND category = 'Electronics')
ORDER BY score DESC, id;
 id |      name       |  category   |   score   
----+-----------------+-------------+-----------
  7 | Apple Watch     | Electronics | 1.0314647
  1 | Apple iPhone 15 | Electronics | 0.8672927
(2 rows)

-- Test 1.3: NOT with mixed predicates
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE NOT (name @@@ 'Samsung' OR category = 'Furniture')
ORDER BY score DESC, id;
 id |       name        |  category   | score 
----+-------------------+-------------+-------
  1 | Apple iPhone 15   | Electronics |     0
  3 | Apple MacBook Pro | Computers   |     0
  4 | Kitchen Blender   | Kitchen     |     0
  5 | Coffee Maker      | Kitchen     |     0
  7 | Apple Watch       | Electronics |     0
  8 | Smart TV          | Electronics |     0
 10 | Apple Juice       | Food        |     0
(7 rows)

-- Test 2: Complex Nested Boolean Expressions
\echo '=== Test 2: Complex Nested Boolean Expressions ==='
=== Test 2: Complex Nested Boolean Expressions ===
-- Test 2.1: Nested AND/OR combinations
SELECT id, name, category, price, paradedb.score(id) as score
FROM unified_test_products 
WHERE ((name @@@ 'Apple' OR description @@@ 'smartphone') AND category = 'Electronics') 
   OR (category = 'Kitchen' AND price < 100)
ORDER BY score DESC, id;
 id |        name        |  category   | price  |   score   
----+--------------------+-------------+--------+-----------
  1 | Apple iPhone 15    | Electronics | 999.99 | 2.3610806
  2 | Samsung Galaxy S24 | Electronics | 899.99 |  1.493788
  7 | Apple Watch        | Electronics | 399.99 | 1.0314647
  5 | Coffee Maker       | Kitchen     |  89.99 |         1
(4 rows)

-- Test 2.2: Complex NOT with nested expressions
-- NOTE: This test demonstrates a known limitation where PostgreSQL's query planner
-- incorrectly decomposes complex NOT expressions into multiple separate clauses.
-- The expression NOT ((name @@@ 'Apple' AND category = 'Electronics') OR (category = 'Furniture'))
-- gets parsed as multiple AND clauses instead of a single NOT expression.
-- This is a fundamental PostgreSQL query planning issue, not a unified evaluator issue.
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE NOT ((name @@@ 'Apple' AND category = 'Electronics') OR (category = 'Furniture'))
ORDER BY score DESC, id;
 id |        name        |  category   | score 
----+--------------------+-------------+-------
  2 | Samsung Galaxy S24 | Electronics |     1
  3 | Apple MacBook Pro  | Computers   |     1
  4 | Kitchen Blender    | Kitchen     |     1
  5 | Coffee Maker       | Kitchen     |     1
  8 | Smart TV           | Electronics |     1
 10 | Apple Juice        | Food        |     1
 11 | Samsung Monitor    | Electronics |     1
(7 rows)

-- Test 2.3: Deep nesting with multiple operators
SELECT id, name, category, price, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR (description @@@ 'smartphone' AND price > 500)) 
  AND NOT (category = 'Food' OR in_stock = false)
ORDER BY score DESC, id;
 id |        name        |  category   | price  |   score   
----+--------------------+-------------+--------+-----------
  1 | Apple iPhone 15    | Electronics | 999.99 |  1.493788
  2 | Samsung Galaxy S24 | Electronics | 899.99 |  1.493788
  7 | Apple Watch        | Electronics | 399.99 | 1.0314647
(3 rows)

-- Test 3: Data Type Comprehensive Testing
\echo '=== Test 3: Data Type Comprehensive Testing ==='
=== Test 3: Data Type Comprehensive Testing ===
-- Test 3.1: Numeric field combinations
SELECT id, name, price, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR price BETWEEN 100 AND 500)
ORDER BY score DESC, id;
 id |       name        |  price  |   score   
----+-------------------+---------+-----------
  7 | Apple Watch       |  399.99 | 1.0314647
 10 | Apple Juice       |    4.99 | 1.0314647
  4 | Kitchen Blender   |  149.99 |         1
  9 | Office Chair      |  299.99 |         1
 11 | Samsung Monitor   |  449.99 |         1
  1 | Apple iPhone 15   |  999.99 | 0.8672927
  3 | Apple MacBook Pro | 2499.99 | 0.8672927
(7 rows)

-- Test 3.2: Boolean field combinations
SELECT id, name, in_stock, paradedb.score(id) as score
FROM unified_test_products 
WHERE (description @@@ 'smartphone' OR in_stock = true)
ORDER BY score DESC, id;
 id |        name        | in_stock |   score   
----+--------------------+----------+-----------
  1 | Apple iPhone 15    | t        | 1.8386285
  2 | Samsung Galaxy S24 | t        | 1.8386285
  4 | Kitchen Blender    | t        | 0.3448405
  5 | Coffee Maker       | t        | 0.3448405
  7 | Apple Watch        | t        | 0.3448405
  8 | Smart TV           | t        | 0.3448405
  9 | Office Chair       | t        | 0.3448405
 10 | Apple Juice        | t        | 0.3448405
(8 rows)

-- Test 3.3: Array field combinations
SELECT id, name, tags, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR 'kitchen' = ANY(tags))
ORDER BY score DESC, id;
 id |       name        |            tags             |   score   
----+-------------------+-----------------------------+-----------
  7 | Apple Watch       | {watch,apple,health}        | 1.0314647
 10 | Apple Juice       | {juice,organic,apple}       | 1.0314647
  4 | Kitchen Blender   | {blender,kitchen}           |         1
  5 | Coffee Maker      | {coffee,kitchen}            |         1
  1 | Apple iPhone 15   | {phone,apple,premium}       | 0.8672927
  3 | Apple MacBook Pro | {laptop,apple,professional} | 0.8672927
(6 rows)

-- Test 3.4: Timestamp field combinations
SELECT id, name, created_at, paradedb.score(id) as score
FROM unified_test_products 
WHERE (description @@@ 'smartphone' OR created_at > '2024-02-01')
ORDER BY score DESC, id;
 id |        name        |        created_at        |  score   
----+--------------------+--------------------------+----------
  1 | Apple iPhone 15    | Mon Jan 15 00:00:00 2024 | 1.493788
  2 | Samsung Galaxy S24 | Sat Jan 20 00:00:00 2024 | 1.493788
  7 | Apple Watch        | Mon Feb 05 00:00:00 2024 |        1
  8 | Smart TV           | Sat Feb 10 00:00:00 2024 |        1
  9 | Office Chair       | Thu Feb 15 00:00:00 2024 |        1
 10 | Apple Juice        | Tue Feb 20 00:00:00 2024 |        1
 11 | Samsung Monitor    | Sun Feb 25 00:00:00 2024 |        1
(7 rows)

-- Test 3.5: JSONB field combinations
SELECT id, name, metadata, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR metadata->>'brand' = 'Samsung')
ORDER BY score DESC, id;
 id |        name        |                 metadata                 |   score   
----+--------------------+------------------------------------------+-----------
  7 | Apple Watch        | {"brand": "Apple", "waterproof": true}   | 1.0314647
 10 | Apple Juice        | {"organic": true}                        | 1.0314647
  2 | Samsung Galaxy S24 | {"brand": "Samsung", "storage": "256GB"} |         1
 11 | Samsung Monitor    | {"size": "27inch", "brand": "Samsung"}   |         1
  1 | Apple iPhone 15    | {"brand": "Apple", "storage": "128GB"}   | 0.8672927
  3 | Apple MacBook Pro  | {"cpu": "M3", "brand": "Apple"}          | 0.8672927
(6 rows)

-- Test 4: Scoring Validation
\echo '=== Test 4: Scoring Validation ==='
=== Test 4: Scoring Validation ===
-- Test 4.1: Verify BM25 scores are preserved for indexed predicates
SELECT id, name, paradedb.score(id) as score, 
       CASE WHEN paradedb.score(id) > 1.0 THEN 'BM25_SCORE' ELSE 'DEFAULT_SCORE' END as score_type
FROM unified_test_products 
WHERE name @@@ 'Apple'
ORDER BY score DESC, id;
 id |       name        |   score   |  score_type   
----+-------------------+-----------+---------------
  7 | Apple Watch       | 1.0314647 | BM25_SCORE
 10 | Apple Juice       | 1.0314647 | BM25_SCORE
  1 | Apple iPhone 15   | 0.8672927 | DEFAULT_SCORE
  3 | Apple MacBook Pro | 0.8672927 | DEFAULT_SCORE
(4 rows)

-- Test 4.2: Verify default scores for non-indexed matches
SELECT id, name, category, paradedb.score(id) as score,
       CASE WHEN paradedb.score(id) = 1.0 THEN 'DEFAULT_SCORE' ELSE 'OTHER_SCORE' END as score_type
FROM unified_test_products 
WHERE category = 'Kitchen'
ORDER BY score DESC, id;
 id |      name       | category | score | score_type  
----+-----------------+----------+-------+-------------
  4 | Kitchen Blender | Kitchen  |       | OTHER_SCORE
  5 | Coffee Maker    | Kitchen  |       | OTHER_SCORE
(2 rows)

-- Test 4.3: Score combination in OR expressions
SELECT id, name, category, paradedb.score(id) as score,
       CASE 
         WHEN paradedb.score(id) > 1.0 THEN 'INDEXED_MATCH'
         WHEN paradedb.score(id) = 1.0 THEN 'NON_INDEXED_MATCH'
         ELSE 'NO_MATCH'
       END as match_type
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR category = 'Kitchen')
ORDER BY score DESC, id;
 id |       name        |  category   |   score   |    match_type     
----+-------------------+-------------+-----------+-------------------
  7 | Apple Watch       | Electronics | 1.0314647 | INDEXED_MATCH
 10 | Apple Juice       | Food        | 1.0314647 | INDEXED_MATCH
  4 | Kitchen Blender   | Kitchen     |         1 | NON_INDEXED_MATCH
  5 | Coffee Maker      | Kitchen     |         1 | NON_INDEXED_MATCH
  1 | Apple iPhone 15   | Electronics | 0.8672927 | NO_MATCH
  3 | Apple MacBook Pro | Computers   | 0.8672927 | NO_MATCH
(6 rows)

-- Test 4.4: Score combination in AND expressions
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' AND category = 'Electronics')
ORDER BY score DESC, id;
 id |      name       |  category   |   score   
----+-----------------+-------------+-----------
  7 | Apple Watch     | Electronics | 1.0314647
  1 | Apple iPhone 15 | Electronics | 0.8672927
(2 rows)

-- Test 5: Edge Cases and Error Conditions
\echo '=== Test 5: Edge Cases and Error Conditions ==='
=== Test 5: Edge Cases and Error Conditions ===
-- Test 5.1: Empty search results with non-indexed fallback
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'NonExistentBrand' OR category = 'Kitchen')
ORDER BY score DESC, id;
 id |      name       | category | score 
----+-----------------+----------+-------
  4 | Kitchen Blender | Kitchen  |     1
  5 | Coffee Maker    | Kitchen  |     1
(2 rows)

-- Test 5.2: All conditions false
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'NonExistentBrand' AND category = 'NonExistentCategory')
ORDER BY score DESC, id;
 id | name | category | score 
----+------+----------+-------
(0 rows)

-- Test 5.3: NULL handling in mixed expressions
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR category IS NULL)
ORDER BY score DESC, id;
 id |       name        |  category   |   score   
----+-------------------+-------------+-----------
  7 | Apple Watch       | Electronics | 1.0314647
 10 | Apple Juice       | Food        | 1.0314647
  1 | Apple iPhone 15   | Electronics | 0.8672927
  3 | Apple MacBook Pro | Computers   | 0.8672927
(4 rows)

-- Test 5.4: Complex expression with all OR conditions
SELECT id, name, category, price, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR category = 'Kitchen' OR price < 50 OR in_stock = false)
ORDER BY score DESC, id;
 id |       name        |  category   |  price  |   score   
----+-------------------+-------------+---------+-----------
  7 | Apple Watch       | Electronics |  399.99 | 1.0314647
 10 | Apple Juice       | Food        |    4.99 | 1.0314647
  4 | Kitchen Blender   | Kitchen     |  149.99 |         1
  5 | Coffee Maker      | Kitchen     |   89.99 |         1
  6 | Dining Table      | Furniture   |  599.99 |         1
 11 | Samsung Monitor   | Electronics |  449.99 |         1
  1 | Apple iPhone 15   | Electronics |  999.99 | 0.8672927
  3 | Apple MacBook Pro | Computers   | 2499.99 | 0.8672927
(8 rows)

-- Test 6: Performance and Optimization Validation
\echo '=== Test 6: Performance and Optimization Validation ==='
=== Test 6: Performance and Optimization Validation ===
-- Test 6.1: Large OR expression to test lazy evaluation
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR name @@@ 'Samsung' OR category = 'Electronics' 
       OR category = 'Kitchen' OR price > 1000 OR in_stock = true)
ORDER BY score DESC, id;
 id |        name        |  category   |   score   
----+--------------------+-------------+-----------
 11 | Samsung Monitor    | Electronics | 1.6495961
  2 | Samsung Galaxy S24 | Electronics | 1.3870399
  7 | Apple Watch        | Electronics | 1.0314647
 10 | Apple Juice        | Food        | 1.0314647
  4 | Kitchen Blender    | Kitchen     |         1
  5 | Coffee Maker       | Kitchen     |         1
  8 | Smart TV           | Electronics |         1
  9 | Office Chair       | Furniture   |         1
  1 | Apple iPhone 15    | Electronics | 0.8672927
  3 | Apple MacBook Pro  | Computers   | 0.8672927
(10 rows)

-- Test 6.2: Complex nested expression to test optimization
SELECT id, name, category, price, paradedb.score(id) as score
FROM unified_test_products 
WHERE ((name @@@ 'Apple' OR description @@@ 'smartphone') 
       AND (category = 'Electronics' OR category = 'Computers'))
   OR ((category = 'Kitchen' OR category = 'Furniture') 
       AND (price < 200 OR in_stock = true))
ORDER BY score DESC, id;
 id |        name        |  category   |  price  |   score   
----+--------------------+-------------+---------+-----------
  1 | Apple iPhone 15    | Electronics |  999.99 | 1.6805403
  2 | Samsung Galaxy S24 | Electronics |  899.99 |  1.246894
  7 | Apple Watch        | Electronics |  399.99 | 1.0157323
  4 | Kitchen Blender    | Kitchen     |  149.99 |         1
  5 | Coffee Maker       | Kitchen     |   89.99 |         1
  9 | Office Chair       | Furniture   |  299.99 |         1
  3 | Apple MacBook Pro  | Computers   | 2499.99 | 0.9336463
(7 rows)

-- Test 6.3: Expression with repeated predicates to test caching
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR category = 'Electronics') 
  AND (name @@@ 'Apple' OR price > 100)
ORDER BY score DESC, id;
 id |        name        |  category   |   score   
----+--------------------+-------------+-----------
  7 | Apple Watch        | Electronics | 1.0314647
 10 | Apple Juice        | Food        | 1.0314647
  2 | Samsung Galaxy S24 | Electronics |         1
  8 | Smart TV           | Electronics |         1
 11 | Samsung Monitor    | Electronics |         1
  1 | Apple iPhone 15    | Electronics | 0.8672927
  3 | Apple MacBook Pro  | Computers   | 0.8672927
(7 rows)

-- Test 7: Integration with PostgreSQL Features
\echo '=== Test 7: Integration with PostgreSQL Features ==='
=== Test 7: Integration with PostgreSQL Features ===
-- Test 7.1: Mixed expressions with LIMIT and OFFSET
SELECT id, name, category, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR category = 'Electronics')
ORDER BY score DESC, id
LIMIT 5 OFFSET 1;
 id |       name        |  category   |   score   
----+-------------------+-------------+-----------
  1 | Apple iPhone 15   | Electronics | 0.8672927
  3 | Apple MacBook Pro | Computers   | 0.8672927
(2 rows)

-- Test 7.2: Mixed expressions with GROUP BY
SELECT category, COUNT(*) as count, AVG(paradedb.score(id)) as avg_score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR category = 'Kitchen')
GROUP BY category
ORDER BY avg_score DESC;
  category   | count |     avg_score      
-------------+-------+--------------------
 Food        |     1 |  1.031464695930481
 Kitchen     |     2 |                  1
 Electronics |     2 | 0.9493786990642548
 Computers   |     1 | 0.8672927021980286
(4 rows)

-- Test 7.3: Mixed expressions in subquery
SELECT outer_query.id, outer_query.name, outer_query.score
FROM (
    SELECT id, name, category, paradedb.score(id) as score
    FROM unified_test_products 
    WHERE (name @@@ 'Apple' OR category = 'Electronics')
) outer_query
WHERE outer_query.score > 1.0
ORDER BY outer_query.score DESC;
 id | name | score 
----+------+-------
(0 rows)

-- Test 7.4: Mixed expressions with CTE
WITH high_score_products AS (
    SELECT id, name, category, paradedb.score(id) as score
    FROM unified_test_products 
    WHERE (name @@@ 'Apple' OR description @@@ 'smartphone')
)
SELECT * FROM high_score_products 
WHERE score > 1.0 OR category = 'Electronics'
ORDER BY score DESC;
 id |        name        |  category   |   score   
----+--------------------+-------------+-----------
  1 | Apple iPhone 15    | Electronics | 1.6805403
  2 | Samsung Galaxy S24 | Electronics |  1.246894
  7 | Apple Watch        | Electronics | 1.0157323
(3 rows)

-- Test 8: Backward Compatibility Validation
\echo '=== Test 8: Backward Compatibility Validation ==='
=== Test 8: Backward Compatibility Validation ===
-- Test 8.1: Pure indexed queries (should work as before)
SELECT id, name, paradedb.score(id) as score
FROM unified_test_products 
WHERE name @@@ 'Apple'
ORDER BY score DESC, id;
 id |       name        |   score   
----+-------------------+-----------
  7 | Apple Watch       | 1.0314647
 10 | Apple Juice       | 1.0314647
  1 | Apple iPhone 15   | 0.8672927
  3 | Apple MacBook Pro | 0.8672927
(4 rows)

-- Test 8.2: Pure non-indexed queries (should work as before)
SELECT id, name, category
FROM unified_test_products 
WHERE category = 'Kitchen'
ORDER BY id;
 id |      name       | category 
----+-----------------+----------
  4 | Kitchen Blender | Kitchen
  5 | Coffee Maker    | Kitchen
(2 rows)

-- Test 8.3: Complex indexed-only boolean expressions
SELECT id, name, paradedb.score(id) as score
FROM unified_test_products 
WHERE (name @@@ 'Apple' OR description @@@ 'smartphone') AND NOT name @@@ 'Samsung'
ORDER BY score DESC, id;
 id |       name        |   score   
----+-------------------+-----------
  1 | Apple iPhone 15   | 2.3610806
  7 | Apple Watch       | 1.0314647
 10 | Apple Juice       | 1.0314647
  3 | Apple MacBook Pro | 0.8672927
(4 rows)

-- Cleanup
DROP TABLE unified_test_products CASCADE; 
 
