// Copyright (c) 2023-2025 ParadeDB, Inc.
//
// This file is part of ParadeDB - Postgres for Search and Analytics
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

use async_std::task::block_on;
use chrono::{NaiveDate, NaiveDateTime};
use proptest::prelude::*;
use proptest_derive::Arbitrary;
use soa_derive::StructOfArray;
use sqlx::{Executor, FromRow, PgConnection};

use crate::fixtures::props::{arb_date, arb_date_time, arb_json_value, Row};

#[derive(Arbitrary, Debug, PartialEq, FromRow, StructOfArray, Default)]
pub struct SimpleProductsTable {
    // NOTE: We start above the ids that are auto-generated by `create_bm25_test_table`.
    #[proptest(strategy = "100..1000000i32")]
    pub id: i32,
    pub description: String,
    #[proptest(strategy = "arb_simple_products_category()")]
    pub category: String,
    #[proptest(strategy = "1..5i32")]
    pub rating: i32,
    pub in_stock: bool,
    #[proptest(strategy = "arb_json_value()")]
    pub metadata: serde_json::Value,
    #[proptest(strategy = "arb_date_time()")]
    pub created_at: NaiveDateTime,
    #[proptest(strategy = "arb_date()")]
    pub last_updated_date: NaiveDate,
}

impl SimpleProductsTable {
    pub fn setup() -> String {
        SIMPLE_PRODUCTS_TABLE_SETUP.into()
    }

    pub fn insert(self, connection: &mut PgConnection) {
        let query = sqlx::query(
            r#"
            INSERT INTO paradedb.bm25_search
              (id, description, category, rating, in_stock, metadata, created_at, last_updated_date)
            VALUES
              ($1, $2, $3, $4, $5, $6, $7, $8)
        "#,
        )
        .bind(self.id)
        .bind(self.description)
        .bind(self.category)
        .bind(self.rating)
        .bind(self.in_stock)
        .bind(self.metadata)
        .bind(self.created_at)
        .bind(self.last_updated_date);

        block_on(async { connection.execute(query).await }).unwrap();
    }
}

impl Row for SimpleProductsTable {
    type Key = i32;

    fn key(&self) -> Self::Key {
        self.id
    }
}

static SIMPLE_PRODUCTS_TABLE_SETUP: &str = r#"
BEGIN;
    CALL paradedb.create_bm25_test_table(table_name => 'bm25_search', schema_name => 'paradedb');

    CREATE INDEX bm25_search_bm25_index
    ON paradedb.bm25_search
    USING bm25 (id, description, category, rating, in_stock, metadata, created_at, last_updated_date, latest_available_time)
    WITH (key_field='id');
COMMIT;
"#;

pub fn arb_simple_products_category() -> impl Strategy<Value = String> {
    prop_oneof![
        Just("Apparel".to_string()),
        Just("Electronics".to_string()),
        Just("Footwear".to_string()),
        Just("Furniture".to_string()),
        Just("Groceries".to_string()),
        Just("Home Decor".to_string()),
        Just("Toys".to_string()),
    ]
}
